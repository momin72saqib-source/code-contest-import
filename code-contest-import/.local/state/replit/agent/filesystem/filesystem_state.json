{"file_contents":{"README.md":{"content":"# Code contest platform\n\n*Automatically synced with your [v0.app](https://v0.app) deployments*\n\n[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/saqib-ahmeds-projects-b4b4d6c7/v0-code-contest-platform)\n[![Built with v0](https://img.shields.io/badge/Built%20with-v0.app-black?style=for-the-badge)](https://v0.app/chat/projects/MlXT2RSiILS)\n\n## Overview\n\nThis repository will stay in sync with your deployed chats on [v0.app](https://v0.app).\nAny changes you make to your deployed app will be automatically pushed to this repository from [v0.app](https://v0.app).\n\n## Deployment\n\nYour project is live at:\n\n**[https://vercel.com/saqib-ahmeds-projects-b4b4d6c7/v0-code-contest-platform](https://vercel.com/saqib-ahmeds-projects-b4b4d6c7/v0-code-contest-platform)**\n\n## Build your app\n\nContinue building your app on:\n\n**[https://v0.app/chat/projects/MlXT2RSiILS](https://v0.app/chat/projects/MlXT2RSiILS)**\n\n## How It Works\n\n1. Create and modify your project using [v0.app](https://v0.app)\n2. Deploy your chats from the v0 interface\n3. Changes are automatically pushed to this repository\n4. Vercel deploys the latest version from this repository\n","size_bytes":1224},"pnpm-lock.yaml":{"content":"lockfileVersion: '9.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false\n\nimporters:\n\n  .:\n    dependencies:\n      '@hookform/resolvers':\n        specifier: ^3.10.0\n        version: 3.10.0(react-hook-form@7.60.0(react@18.0.0))\n      '@radix-ui/react-accordion':\n        specifier: 1.2.2\n        version: 1.2.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-alert-dialog':\n        specifier: 1.1.4\n        version: 1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-aspect-ratio':\n        specifier: 1.1.1\n        version: 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-avatar':\n        specifier: latest\n        version: 1.1.10(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-checkbox':\n        specifier: 1.1.3\n        version: 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-collapsible':\n        specifier: latest\n        version: 1.1.12(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-context-menu':\n        specifier: 2.2.4\n        version: 2.2.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-dialog':\n        specifier: latest\n        version: 1.1.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-dropdown-menu':\n        specifier: latest\n        version: 2.1.16(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-hover-card':\n        specifier: 1.1.4\n        version: 1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-label':\n        specifier: latest\n        version: 2.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-menubar':\n        specifier: 1.1.4\n        version: 1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-navigation-menu':\n        specifier: 1.2.3\n        version: 1.2.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-popover':\n        specifier: latest\n        version: 1.1.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-progress':\n        specifier: latest\n        version: 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-radio-group':\n        specifier: 1.2.2\n        version: 1.2.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-scroll-area':\n        specifier: latest\n        version: 1.2.10(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-select':\n        specifier: latest\n        version: 2.2.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-separator':\n        specifier: latest\n        version: 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slider':\n        specifier: latest\n        version: 1.3.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot':\n        specifier: latest\n        version: 1.2.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-switch':\n        specifier: latest\n        version: 1.2.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-tabs':\n        specifier: latest\n        version: 1.1.13(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-toast':\n        specifier: latest\n        version: 1.2.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-toggle':\n        specifier: 1.1.1\n        version: 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-toggle-group':\n        specifier: 1.1.1\n        version: 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-tooltip':\n        specifier: 1.1.6\n        version: 1.1.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@tanstack/react-query':\n        specifier: latest\n        version: 5.89.0(react@18.0.0)\n      '@vercel/analytics':\n        specifier: latest\n        version: 1.5.0(next@14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0))(react@18.0.0)\n      autoprefixer:\n        specifier: ^10.4.20\n        version: 10.4.20(postcss@8.5.0)\n      class-variance-authority:\n        specifier: ^0.7.1\n        version: 0.7.1\n      clsx:\n        specifier: ^2.1.1\n        version: 2.1.1\n      cmdk:\n        specifier: 1.0.4\n        version: 1.0.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      date-fns:\n        specifier: latest\n        version: 4.1.0\n      embla-carousel-react:\n        specifier: 8.5.1\n        version: 8.5.1(react@18.0.0)\n      geist:\n        specifier: latest\n        version: 1.5.1(next@14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0))\n      input-otp:\n        specifier: 1.4.1\n        version: 1.4.1(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      lucide-react:\n        specifier: ^0.454.0\n        version: 0.454.0(react@18.0.0)\n      next:\n        specifier: 14.2.16\n        version: 14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      next-themes:\n        specifier: latest\n        version: 0.4.6(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react:\n        specifier: ^18\n        version: 18.0.0\n      react-day-picker:\n        specifier: latest\n        version: 9.11.0(react@18.0.0)\n      react-dom:\n        specifier: ^18\n        version: 18.0.0(react@18.0.0)\n      react-hook-form:\n        specifier: ^7.60.0\n        version: 7.60.0(react@18.0.0)\n      react-resizable-panels:\n        specifier: ^2.1.7\n        version: 2.1.7(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      recharts:\n        specifier: latest\n        version: 3.2.1(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react-is@19.1.1)(react@18.0.0)(redux@5.0.1)\n      sonner:\n        specifier: latest\n        version: 2.0.7(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      tailwind-merge:\n        specifier: ^2.5.5\n        version: 2.5.5\n      tailwindcss-animate:\n        specifier: ^1.0.7\n        version: 1.0.7(tailwindcss@4.1.9)\n      vaul:\n        specifier: ^0.9.9\n        version: 0.9.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      zod:\n        specifier: 3.25.67\n        version: 3.25.67\n    devDependencies:\n      '@tailwindcss/postcss':\n        specifier: ^4.1.9\n        version: 4.1.9\n      '@types/node':\n        specifier: ^22\n        version: 22.0.0\n      '@types/react':\n        specifier: ^18\n        version: 18.0.0\n      '@types/react-dom':\n        specifier: ^18\n        version: 18.0.0\n      postcss:\n        specifier: ^8.5\n        version: 8.5.0\n      tailwindcss:\n        specifier: ^4.1.9\n        version: 4.1.9\n      tw-animate-css:\n        specifier: 1.3.3\n        version: 1.3.3\n      typescript:\n        specifier: ^5\n        version: 5.0.2\n\npackages:\n\n  '@alloc/quick-lru@5.2.0':\n    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}\n    engines: {node: '>=10'}\n\n  '@ampproject/remapping@2.3.0':\n    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}\n    engines: {node: '>=6.0.0'}\n\n  '@date-fns/tz@1.4.1':\n    resolution: {integrity: sha512-P5LUNhtbj6YfI3iJjw5EL9eUAG6OitD0W3fWQcpQjDRc/QIsL0tRNuO1PcDvPccWL1fSTXXdE1ds+l95DV/OFA==}\n\n  '@floating-ui/core@1.7.3':\n    resolution: {integrity: sha512-sGnvb5dmrJaKEZ+LDIpguvdX3bDlEllmv4/ClQ9awcmCZrlx5jQyyMWFM5kBI+EyNOCDDiKk8il0zeuX3Zlg/w==}\n\n  '@floating-ui/dom@1.7.4':\n    resolution: {integrity: sha512-OOchDgh4F2CchOX94cRVqhvy7b3AFb+/rQXyswmzmGakRfkMgoWVjfnLWkRirfLEfuD4ysVW16eXzwt3jHIzKA==}\n\n  '@floating-ui/react-dom@2.1.6':\n    resolution: {integrity: sha512-4JX6rEatQEvlmgU80wZyq9RT96HZJa88q8hp0pBd+LrczeDI4o6uA2M+uvxngVHo4Ihr8uibXxH6+70zhAFrVw==}\n    peerDependencies:\n      react: '>=16.8.0'\n      react-dom: '>=16.8.0'\n\n  '@floating-ui/utils@0.2.10':\n    resolution: {integrity: sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==}\n\n  '@hookform/resolvers@3.10.0':\n    resolution: {integrity: sha512-79Dv+3mDF7i+2ajj7SkypSKHhl1cbln1OGavqrsF7p6mbUv11xpqpacPsGDCTRvCSjEEIez2ef1NveSVL3b0Ag==}\n    peerDependencies:\n      react-hook-form: ^7.0.0\n\n  '@isaacs/fs-minipass@4.0.1':\n    resolution: {integrity: sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==}\n    engines: {node: '>=18.0.0'}\n\n  '@jridgewell/gen-mapping@0.3.13':\n    resolution: {integrity: sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==}\n\n  '@jridgewell/resolve-uri@3.1.2':\n    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}\n    engines: {node: '>=6.0.0'}\n\n  '@jridgewell/sourcemap-codec@1.5.5':\n    resolution: {integrity: sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==}\n\n  '@jridgewell/trace-mapping@0.3.31':\n    resolution: {integrity: sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==}\n\n  '@next/env@14.2.16':\n    resolution: {integrity: sha512-fLrX5TfJzHCbnZ9YUSnGW63tMV3L4nSfhgOQ0iCcX21Pt+VSTDuaLsSuL8J/2XAiVA5AnzvXDpf6pMs60QxOag==}\n\n  '@next/swc-darwin-arm64@14.2.16':\n    resolution: {integrity: sha512-uFT34QojYkf0+nn6MEZ4gIWQ5aqGF11uIZ1HSxG+cSbj+Mg3+tYm8qXYd3dKN5jqKUm5rBVvf1PBRO/MeQ6rxw==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [darwin]\n\n  '@next/swc-darwin-x64@14.2.16':\n    resolution: {integrity: sha512-mCecsFkYezem0QiZlg2bau3Xul77VxUD38b/auAjohMA22G9KTJneUYMv78vWoCCFkleFAhY1NIvbyjj1ncG9g==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [darwin]\n\n  '@next/swc-linux-arm64-gnu@14.2.16':\n    resolution: {integrity: sha512-yhkNA36+ECTC91KSyZcgWgKrYIyDnXZj8PqtJ+c2pMvj45xf7y/HrgI17hLdrcYamLfVt7pBaJUMxADtPaczHA==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [linux]\n\n  '@next/swc-linux-arm64-musl@14.2.16':\n    resolution: {integrity: sha512-X2YSyu5RMys8R2lA0yLMCOCtqFOoLxrq2YbazFvcPOE4i/isubYjkh+JCpRmqYfEuCVltvlo+oGfj/b5T2pKUA==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [linux]\n\n  '@next/swc-linux-x64-gnu@14.2.16':\n    resolution: {integrity: sha512-9AGcX7VAkGbc5zTSa+bjQ757tkjr6C/pKS7OK8cX7QEiK6MHIIezBLcQ7gQqbDW2k5yaqba2aDtaBeyyZh1i6Q==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [linux]\n\n  '@next/swc-linux-x64-musl@14.2.16':\n    resolution: {integrity: sha512-Klgeagrdun4WWDaOizdbtIIm8khUDQJ/5cRzdpXHfkbY91LxBXeejL4kbZBrpR/nmgRrQvmz4l3OtttNVkz2Sg==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [linux]\n\n  '@next/swc-win32-arm64-msvc@14.2.16':\n    resolution: {integrity: sha512-PwW8A1UC1Y0xIm83G3yFGPiOBftJK4zukTmk7DI1CebyMOoaVpd8aSy7K6GhobzhkjYvqS/QmzcfsWG2Dwizdg==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [win32]\n\n  '@next/swc-win32-ia32-msvc@14.2.16':\n    resolution: {integrity: sha512-jhPl3nN0oKEshJBNDAo0etGMzv0j3q3VYorTSFqH1o3rwv1MQRdor27u1zhkgsHPNeY1jxcgyx1ZsCkDD1IHgg==}\n    engines: {node: '>= 10'}\n    cpu: [ia32]\n    os: [win32]\n\n  '@next/swc-win32-x64-msvc@14.2.16':\n    resolution: {integrity: sha512-OA7NtfxgirCjfqt+02BqxC3MIgM/JaGjw9tOe4fyZgPsqfseNiMPnCRP44Pfs+Gpo9zPN+SXaFsgP6vk8d571A==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [win32]\n\n  '@radix-ui/number@1.1.1':\n    resolution: {integrity: sha512-MkKCwxlXTgz6CFoJx3pCwn07GKp36+aZyu/u2Ln2VrA5DcdyCZkASEDBTd8x5whTQQL5CiYf4prXKLcgQdv29g==}\n\n  '@radix-ui/primitive@1.1.1':\n    resolution: {integrity: sha512-SJ31y+Q/zAyShtXJc8x83i9TYdbAfHZ++tUZnvjJJqFjzsdUnKsxPL6IEtBlxKkU7yzer//GQtZSV4GbldL3YA==}\n\n  '@radix-ui/primitive@1.1.3':\n    resolution: {integrity: sha512-JTF99U/6XIjCBo0wqkU5sK10glYe27MRRsfwoiq5zzOEZLHU3A3KCMa5X/azekYRCJ0HlwI0crAXS/5dEHTzDg==}\n\n  '@radix-ui/react-accordion@1.2.2':\n    resolution: {integrity: sha512-b1oh54x4DMCdGsB4/7ahiSrViXxaBwRPotiZNnYXjLha9vfuURSAZErki6qjDoSIV0eXx5v57XnTGVtGwnfp2g==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-alert-dialog@1.1.4':\n    resolution: {integrity: sha512-A6Kh23qZDLy3PSU4bh2UJZznOrUdHImIXqF8YtUa6CN73f8EOO9XlXSCd9IHyPvIquTaa/kwaSWzZTtUvgXVGw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-arrow@1.1.1':\n    resolution: {integrity: sha512-NaVpZfmv8SKeZbn4ijN2V3jlHA9ngBG16VnIIm22nUR0Yk8KUALyBxT3KYEUnNuch9sTE8UTsS3whzBgKOL30w==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-arrow@1.1.7':\n    resolution: {integrity: sha512-F+M1tLhO+mlQaOWspE8Wstg+z6PwxwRd8oQ8IXceWz92kfAmalTRf0EjrouQeo7QssEPfCn05B4Ihs1K9WQ/7w==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-aspect-ratio@1.1.1':\n    resolution: {integrity: sha512-kNU4FIpcFMBLkOUcgeIteH06/8JLBcYY6Le1iKenDGCYNYFX3TQqCZjzkOsz37h7r94/99GTb7YhEr98ZBJibw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-avatar@1.1.10':\n    resolution: {integrity: sha512-V8piFfWapM5OmNCXTzVQY+E1rDa53zY+MQ4Y7356v4fFz6vqCyUtIz2rUD44ZEdwg78/jKmMJHj07+C/Z/rcog==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-checkbox@1.1.3':\n    resolution: {integrity: sha512-HD7/ocp8f1B3e6OHygH0n7ZKjONkhciy1Nh0yuBgObqThc3oyx+vuMfFHKAknXRHHWVE9XvXStxJFyjUmB8PIw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-collapsible@1.1.12':\n    resolution: {integrity: sha512-Uu+mSh4agx2ib1uIGPP4/CKNULyajb3p92LsVXmH2EHVMTfZWpll88XJ0j4W0z3f8NK1eYl1+Mf/szHPmcHzyA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-collapsible@1.1.2':\n    resolution: {integrity: sha512-PliMB63vxz7vggcyq0IxNYk8vGDrLXVWw4+W4B8YnwI1s18x7YZYqlG9PLX7XxAJUi0g2DxP4XKJMFHh/iVh9A==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-collection@1.1.1':\n    resolution: {integrity: sha512-LwT3pSho9Dljg+wY2KN2mrrh6y3qELfftINERIzBUO9e0N+t0oMTyn3k9iv+ZqgrwGkRnLpNJrsMv9BZlt2yuA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-collection@1.1.7':\n    resolution: {integrity: sha512-Fh9rGN0MoI4ZFUNyfFVNU4y9LUz93u9/0K+yLgA2bwRojxM8JU1DyvvMBabnZPBgMWREAJvU2jjVzq+LrFUglw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-compose-refs@1.1.1':\n    resolution: {integrity: sha512-Y9VzoRDSJtgFMUCoiZBDVo084VQ5hfpXxVE+NgkdNsjiDBByiImMZKKhxMwCbdHvhlENG6a833CbFkOQvTricw==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-compose-refs@1.1.2':\n    resolution: {integrity: sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-context-menu@2.2.4':\n    resolution: {integrity: sha512-ap4wdGwK52rJxGkwukU1NrnEodsUFQIooANKu+ey7d6raQ2biTcEf8za1zr0mgFHieevRTB2nK4dJeN8pTAZGQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-context@1.1.1':\n    resolution: {integrity: sha512-UASk9zi+crv9WteK/NU4PLvOoL3OuE6BWVKNF6hPRBtYBDXQ2u5iu3O59zUlJiTVvkyuycnqrztsHVJwcK9K+Q==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-context@1.1.2':\n    resolution: {integrity: sha512-jCi/QKUM2r1Ju5a3J64TH2A5SpKAgh0LpknyqdQ4m6DCV0xJ2HG1xARRwNGPQfi1SLdLWZ1OJz6F4OMBBNiGJA==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-dialog@1.1.15':\n    resolution: {integrity: sha512-TCglVRtzlffRNxRMEyR36DGBLJpeusFcgMVD9PZEzAKnUs1lKCgX5u9BmC2Yg+LL9MgZDugFFs1Vl+Jp4t/PGw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-dialog@1.1.4':\n    resolution: {integrity: sha512-Ur7EV1IwQGCyaAuyDRiOLA5JIUZxELJljF+MbM/2NC0BYwfuRrbpS30BiQBJrVruscgUkieKkqXYDOoByaxIoA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-direction@1.1.0':\n    resolution: {integrity: sha512-BUuBvgThEiAXh2DWu93XsT+a3aWrGqolGlqqw5VU1kG7p/ZH2cuDlM1sRLNnY3QcBS69UIz2mcKhMxDsdewhjg==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-direction@1.1.1':\n    resolution: {integrity: sha512-1UEWRX6jnOA2y4H5WczZ44gOOjTEmlqv1uNW4GAJEO5+bauCBhv8snY65Iw5/VOS/ghKN9gr2KjnLKxrsvoMVw==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-dismissable-layer@1.1.11':\n    resolution: {integrity: sha512-Nqcp+t5cTB8BinFkZgXiMJniQH0PsUt2k51FUhbdfeKvc4ACcG2uQniY/8+h1Yv6Kza4Q7lD7PQV0z0oicE0Mg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-dismissable-layer@1.1.3':\n    resolution: {integrity: sha512-onrWn/72lQoEucDmJnr8uczSNTujT0vJnA/X5+3AkChVPowr8n1yvIKIabhWyMQeMvvmdpsvcyDqx3X1LEXCPg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-dropdown-menu@2.1.16':\n    resolution: {integrity: sha512-1PLGQEynI/3OX/ftV54COn+3Sud/Mn8vALg2rWnBLnRaGtJDduNW/22XjlGgPdpcIbiQxjKtb7BkcjP00nqfJw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-focus-guards@1.1.1':\n    resolution: {integrity: sha512-pSIwfrT1a6sIoDASCSpFwOasEwKTZWDw/iBdtnqKO7v6FeOzYJ7U53cPzYFVR3geGGXgVHaH+CdngrrAzqUGxg==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-focus-guards@1.1.3':\n    resolution: {integrity: sha512-0rFg/Rj2Q62NCm62jZw0QX7a3sz6QCQU0LpZdNrJX8byRGaGVTqbrW9jAoIAHyMQqsNpeZ81YgSizOt5WXq0Pw==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-focus-scope@1.1.1':\n    resolution: {integrity: sha512-01omzJAYRxXdG2/he/+xy+c8a8gCydoQ1yOxnWNcRhrrBW5W+RQJ22EK1SaO8tb3WoUsuEw7mJjBozPzihDFjA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-focus-scope@1.1.7':\n    resolution: {integrity: sha512-t2ODlkXBQyn7jkl6TNaw/MtVEVvIGelJDCG41Okq/KwUsJBwQ4XVZsHAVUkK4mBv3ewiAS3PGuUWuY2BoK4ZUw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-hover-card@1.1.4':\n    resolution: {integrity: sha512-QSUUnRA3PQ2UhvoCv3eYvMnCAgGQW+sTu86QPuNb+ZMi+ZENd6UWpiXbcWDQ4AEaKF9KKpCHBeaJz9Rw6lRlaQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-id@1.1.0':\n    resolution: {integrity: sha512-EJUrI8yYh7WOjNOqpoJaf1jlFIH2LvtgAl+YcFqNCa+4hj64ZXmPkAKOFs/ukjz3byN6bdb/AVUqHkI8/uWWMA==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-id@1.1.1':\n    resolution: {integrity: sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-label@2.1.7':\n    resolution: {integrity: sha512-YT1GqPSL8kJn20djelMX7/cTRp/Y9w5IZHvfxQTVHrOqa2yMl7i/UfMqKRU5V7mEyKTrUVgJXhNQPVCG8PBLoQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-menu@2.1.16':\n    resolution: {integrity: sha512-72F2T+PLlphrqLcAotYPp0uJMr5SjP5SL01wfEspJbru5Zs5vQaSHb4VB3ZMJPimgHHCHG7gMOeOB9H3Hdmtxg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-menu@2.1.4':\n    resolution: {integrity: sha512-BnOgVoL6YYdHAG6DtXONaR29Eq4nvbi8rutrV/xlr3RQCMMb3yqP85Qiw/3NReozrSW+4dfLkK+rc1hb4wPU/A==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-menubar@1.1.4':\n    resolution: {integrity: sha512-+KMpi7VAZuB46+1LD7a30zb5IxyzLgC8m8j42gk3N4TUCcViNQdX8FhoH1HDvYiA8quuqcek4R4bYpPn/SY1GA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-navigation-menu@1.2.3':\n    resolution: {integrity: sha512-IQWAsQ7dsLIYDrn0WqPU+cdM7MONTv9nqrLVYoie3BPiabSfUVDe6Fr+oEt0Cofsr9ONDcDe9xhmJbL1Uq1yKg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-popover@1.1.15':\n    resolution: {integrity: sha512-kr0X2+6Yy/vJzLYJUPCZEc8SfQcf+1COFoAqauJm74umQhta9M7lNJHP7QQS3vkvcGLQUbWpMzwrXYwrYztHKA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-popper@1.2.1':\n    resolution: {integrity: sha512-3kn5Me69L+jv82EKRuQCXdYyf1DqHwD2U/sxoNgBGCB7K9TRc3bQamQ+5EPM9EvyPdli0W41sROd+ZU1dTCztw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-popper@1.2.8':\n    resolution: {integrity: sha512-0NJQ4LFFUuWkE7Oxf0htBKS6zLkkjBH+hM1uk7Ng705ReR8m/uelduy1DBo0PyBXPKVnBA6YBlU94MBGXrSBCw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-portal@1.1.3':\n    resolution: {integrity: sha512-NciRqhXnGojhT93RPyDaMPfLH3ZSl4jjIFbZQ1b/vxvZEdHsBZ49wP9w8L3HzUQwep01LcWtkUvm0OVB5JAHTw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-portal@1.1.9':\n    resolution: {integrity: sha512-bpIxvq03if6UNwXZ+HTK71JLh4APvnXntDc6XOX8UVq4XQOVl7lwok0AvIl+b8zgCw3fSaVTZMpAPPagXbKmHQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-presence@1.1.2':\n    resolution: {integrity: sha512-18TFr80t5EVgL9x1SwF/YGtfG+l0BS0PRAlCWBDoBEiDQjeKgnNZRVJp/oVBl24sr3Gbfwc/Qpj4OcWTQMsAEg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-presence@1.1.5':\n    resolution: {integrity: sha512-/jfEwNDdQVBCNvjkGit4h6pMOzq8bHkopq458dPt2lMjx+eBQUohZNG9A7DtO/O5ukSbxuaNGXMjHicgwy6rQQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-primitive@2.0.1':\n    resolution: {integrity: sha512-sHCWTtxwNn3L3fH8qAfnF3WbUZycW93SM1j3NFDzXBiz8D6F5UTTy8G1+WFEaiCdvCVRJWj6N2R4Xq6HdiHmDg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-primitive@2.1.3':\n    resolution: {integrity: sha512-m9gTwRkhy2lvCPe6QJp4d3G1TYEUHn/FzJUtq9MjH46an1wJU+GdoGC5VLof8RX8Ft/DlpshApkhswDLZzHIcQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-progress@1.1.7':\n    resolution: {integrity: sha512-vPdg/tF6YC/ynuBIJlk1mm7Le0VgW6ub6J2UWnTQ7/D23KXcPI1qy+0vBkgKgd38RCMJavBXpB83HPNFMTb0Fg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-radio-group@1.2.2':\n    resolution: {integrity: sha512-E0MLLGfOP0l8P/NxgVzfXJ8w3Ch8cdO6UDzJfDChu4EJDy+/WdO5LqpdY8PYnCErkmZH3gZhDL1K7kQ41fAHuQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-roving-focus@1.1.1':\n    resolution: {integrity: sha512-QE1RoxPGJ/Nm8Qmk0PxP8ojmoaS67i0s7hVssS7KuI2FQoc/uzVlZsqKfQvxPE6D8hICCPHJ4D88zNhT3OOmkw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-roving-focus@1.1.11':\n    resolution: {integrity: sha512-7A6S9jSgm/S+7MdtNDSb+IU859vQqJ/QAtcYQcfFC6W8RS4IxIZDldLR0xqCFZ6DCyrQLjLPsxtTNch5jVA4lA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-scroll-area@1.2.10':\n    resolution: {integrity: sha512-tAXIa1g3sM5CGpVT0uIbUx/U3Gs5N8T52IICuCtObaos1S8fzsrPXG5WObkQN3S6NVl6wKgPhAIiBGbWnvc97A==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-select@2.2.6':\n    resolution: {integrity: sha512-I30RydO+bnn2PQztvo25tswPH+wFBjehVGtmagkU78yMdwTwVf12wnAOF+AeP8S2N8xD+5UPbGhkUfPyvT+mwQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-separator@1.1.7':\n    resolution: {integrity: sha512-0HEb8R9E8A+jZjvmFCy/J4xhbXy3TV+9XSnGJ3KvTtjlIUy/YQ/p6UYZvi7YbeoeXdyU9+Y3scizK6hkY37baA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-slider@1.3.6':\n    resolution: {integrity: sha512-JPYb1GuM1bxfjMRlNLE+BcmBC8onfCi60Blk7OBqi2MLTFdS+8401U4uFjnwkOr49BLmXxLC6JHkvAsx5OJvHw==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-slot@1.1.1':\n    resolution: {integrity: sha512-RApLLOcINYJA+dMVbOju7MYv1Mb2EBp2nH4HdDzXTSyaR5optlm6Otrz1euW3HbdOR8UmmFK06TD+A9frYWv+g==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-slot@1.2.3':\n    resolution: {integrity: sha512-aeNmHnBxbi2St0au6VBVC7JXFlhLlOnvIIlePNniyUNAClzmtAUEY8/pBiK3iHjufOlwA+c20/8jngo7xcrg8A==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-switch@1.2.6':\n    resolution: {integrity: sha512-bByzr1+ep1zk4VubeEVViV592vu2lHE2BZY5OnzehZqOOgogN80+mNtCqPkhn2gklJqOpxWgPoYTSnhBCqpOXQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-tabs@1.1.13':\n    resolution: {integrity: sha512-7xdcatg7/U+7+Udyoj2zodtI9H/IIopqo+YOIcZOq1nJwXWBZ9p8xiu5llXlekDbZkca79a/fozEYQXIA4sW6A==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-toast@1.2.15':\n    resolution: {integrity: sha512-3OSz3TacUWy4WtOXV38DggwxoqJK4+eDkNMl5Z/MJZaoUPaP4/9lf81xXMe1I2ReTAptverZUpbPY4wWwWyL5g==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-toggle-group@1.1.1':\n    resolution: {integrity: sha512-OgDLZEA30Ylyz8YSXvnGqIHtERqnUt1KUYTKdw/y8u7Ci6zGiJfXc02jahmcSNK3YcErqioj/9flWC9S1ihfwg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-toggle@1.1.1':\n    resolution: {integrity: sha512-i77tcgObYr743IonC1hrsnnPmszDRn8p+EGUsUt+5a/JFn28fxaM88Py6V2mc8J5kELMWishI0rLnuGLFD/nnQ==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-tooltip@1.1.6':\n    resolution: {integrity: sha512-TLB5D8QLExS1uDn7+wH/bjEmRurNMTzNrtq7IjaS4kjion9NtzsTGkvR5+i7yc9q01Pi2KMM2cN3f8UG4IvvXA==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-use-callback-ref@1.1.0':\n    resolution: {integrity: sha512-CasTfvsy+frcFkbXtSJ2Zu9JHpN8TYKxkgJGWbjiZhFivxaeW7rMeZt7QELGVLaYVfFMsKHjb7Ak0nMEe+2Vfw==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-callback-ref@1.1.1':\n    resolution: {integrity: sha512-FkBMwD+qbGQeMu1cOHnuGB6x4yzPjho8ap5WtbEJ26umhgqVXbhekKUQO+hZEL1vU92a3wHwdp0HAcqAUF5iDg==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-controllable-state@1.1.0':\n    resolution: {integrity: sha512-MtfMVJiSr2NjzS0Aa90NPTnvTSg6C/JLCV7ma0W6+OMV78vd8OyRpID+Ng9LxzsPbLeuBnWBA1Nq30AtBIDChw==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-controllable-state@1.2.2':\n    resolution: {integrity: sha512-BjasUjixPFdS+NKkypcyyN5Pmg83Olst0+c6vGov0diwTEo6mgdqVR6hxcEgFuh4QrAs7Rc+9KuGJ9TVCj0Zzg==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-effect-event@0.0.2':\n    resolution: {integrity: sha512-Qp8WbZOBe+blgpuUT+lw2xheLP8q0oatc9UpmiemEICxGvFLYmHm9QowVZGHtJlGbS6A6yJ3iViad/2cVjnOiA==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-escape-keydown@1.1.0':\n    resolution: {integrity: sha512-L7vwWlR1kTTQ3oh7g1O0CBF3YCyyTj8NmhLR+phShpyA50HCfBFKVJTpshm9PzLiKmehsrQzTYTpX9HvmC9rhw==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-escape-keydown@1.1.1':\n    resolution: {integrity: sha512-Il0+boE7w/XebUHyBjroE+DbByORGR9KKmITzbR7MyQ4akpORYP/ZmbhAr0DG7RmmBqoOnZdy2QlvajJ2QA59g==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-is-hydrated@0.1.0':\n    resolution: {integrity: sha512-U+UORVEq+cTnRIaostJv9AGdV3G6Y+zbVd+12e18jQ5A3c0xL03IhnHuiU4UV69wolOQp5GfR58NW/EgdQhwOA==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-layout-effect@1.1.0':\n    resolution: {integrity: sha512-+FPE0rOdziWSrH9athwI1R0HDVbWlEhd+FR+aSDk4uWGmSJ9Z54sdZVDQPZAinJhJXwfT+qnj969mCsT2gfm5w==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-layout-effect@1.1.1':\n    resolution: {integrity: sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-previous@1.1.0':\n    resolution: {integrity: sha512-Z/e78qg2YFnnXcW88A4JmTtm4ADckLno6F7OXotmkQfeuCVaKuYzqAATPhVzl3delXE7CxIV8shofPn3jPc5Og==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-previous@1.1.1':\n    resolution: {integrity: sha512-2dHfToCj/pzca2Ck724OZ5L0EVrr3eHRNsG/b3xQJLA2hZpVCS99bLAX+hm1IHXDEnzU6by5z/5MIY794/a8NQ==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-rect@1.1.0':\n    resolution: {integrity: sha512-0Fmkebhr6PiseyZlYAOtLS+nb7jLmpqTrJyv61Pe68MKYW6OWdRE2kI70TaYY27u7H0lajqM3hSMMLFq18Z7nQ==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-rect@1.1.1':\n    resolution: {integrity: sha512-QTYuDesS0VtuHNNvMh+CjlKJ4LJickCMUAqjlE3+j8w+RlRpwyX3apEQKGFzbZGdo7XNG1tXa+bQqIE7HIXT2w==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-size@1.1.0':\n    resolution: {integrity: sha512-XW3/vWuIXHa+2Uwcc2ABSfcCledmXhhQPlGbfcRXbiUQI5Icjcg19BGCZVKKInYbvUCut/ufbbLLPFC5cbb1hw==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-use-size@1.1.1':\n    resolution: {integrity: sha512-ewrXRDTAqAXlkl6t/fkXWNAhFX9I+CkKlw6zjEwk86RSPKwZr3xpBRso655aqYafwtnbpHLj6toFzmd6xdVptQ==}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  '@radix-ui/react-visually-hidden@1.1.1':\n    resolution: {integrity: sha512-vVfA2IZ9q/J+gEamvj761Oq1FpWgCDaNOOIfbPVp2MVPLEomUr5+Vf7kJGwQ24YxZSlQVar7Bes8kyTo5Dshpg==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/react-visually-hidden@1.2.3':\n    resolution: {integrity: sha512-pzJq12tEaaIhqjbzpCuv/OypJY/BPavOofm+dbab+MHLajy277+1lLm6JFcGgF5eskJ6mquGirhXY2GD/8u8Ug==}\n    peerDependencies:\n      '@types/react': '*'\n      '@types/react-dom': '*'\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      '@types/react-dom':\n        optional: true\n\n  '@radix-ui/rect@1.1.0':\n    resolution: {integrity: sha512-A9+lCBZoaMJlVKcRBz2YByCG+Cp2t6nAnMnNba+XiWxnj6r4JUFqfsgwocMBZU9LPtdxC6wB56ySYpc7LQIoJg==}\n\n  '@radix-ui/rect@1.1.1':\n    resolution: {integrity: sha512-HPwpGIzkl28mWyZqG52jiqDJ12waP11Pa1lGoiyUkIEuMLBP0oeK/C89esbXrxsky5we7dfd8U58nm0SgAWpVw==}\n\n  '@reduxjs/toolkit@2.9.0':\n    resolution: {integrity: sha512-fSfQlSRu9Z5yBkvsNhYF2rPS8cGXn/TZVrlwN1948QyZ8xMZ0JvP50S2acZNaf+o63u6aEeMjipFyksjIcWrog==}\n    peerDependencies:\n      react: ^16.9.0 || ^17.0.0 || ^18 || ^19\n      react-redux: ^7.2.1 || ^8.1.3 || ^9.0.0\n    peerDependenciesMeta:\n      react:\n        optional: true\n      react-redux:\n        optional: true\n\n  '@standard-schema/spec@1.0.0':\n    resolution: {integrity: sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==}\n\n  '@standard-schema/utils@0.3.0':\n    resolution: {integrity: sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==}\n\n  '@swc/counter@0.1.3':\n    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}\n\n  '@swc/helpers@0.5.5':\n    resolution: {integrity: sha512-KGYxvIOXcceOAbEk4bi/dVLEK9z8sZ0uBB3Il5b1rhfClSpcX0yfRO0KmTkqR2cnQDymwLB+25ZyMzICg/cm/A==}\n\n  '@tailwindcss/node@4.1.9':\n    resolution: {integrity: sha512-ZFsgw6lbtcZKYPWvf6zAuCVSuer7UQ2Z5P8BETHcpA4x/3NwOjAIXmRnYfG77F14f9bPeuR4GaNz3ji1JkQMeQ==}\n\n  '@tailwindcss/oxide-android-arm64@4.1.9':\n    resolution: {integrity: sha512-X4mBUUJ3DPqODhtdT5Ju55feJwBN+hP855Z7c0t11Jzece9KRtdM41ljMrCcureKMh96mcOh2gxahkp1yE+BOQ==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [android]\n\n  '@tailwindcss/oxide-darwin-arm64@4.1.9':\n    resolution: {integrity: sha512-jnWnqz71ZLXUbJLW53m9dSQakLBfaWxAd9TAibimrNdQfZKyie+xGppdDCZExtYwUdflt3kOT9y1JUgYXVEQmw==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [darwin]\n\n  '@tailwindcss/oxide-darwin-x64@4.1.9':\n    resolution: {integrity: sha512-+Ui6LlvZ6aCPvSwv3l16nYb6gu1N6RamFz7hSu5aqaiPrDQqD1LPT/e8r2/laSVwFjRyOZxQQ/gvGxP3ihA2rw==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [darwin]\n\n  '@tailwindcss/oxide-freebsd-x64@4.1.9':\n    resolution: {integrity: sha512-BWqCh0uoXMprwWfG7+oyPW53VCh6G08pxY0IIN/i5DQTpPnCJ4zm2W8neH9kW1v1f6RXP3b2qQjAzrAcnQ5e9w==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [freebsd]\n\n  '@tailwindcss/oxide-linux-arm-gnueabihf@4.1.9':\n    resolution: {integrity: sha512-U8itjQb5TVc80aV5Yo+JtKo+qS95CV4XLrKEtSLQFoTD/c9j3jk4WZipYT+9Jxqem29qCMRPxjEZ3s+wTT4XCw==}\n    engines: {node: '>= 10'}\n    cpu: [arm]\n    os: [linux]\n\n  '@tailwindcss/oxide-linux-arm64-gnu@4.1.9':\n    resolution: {integrity: sha512-dKlGraoNvyTrR7ovLw3Id9yTwc+l0NYg8bwOkYqk+zltvGns8bPvVr6PH5jATdc75kCGd6kDRmP4p1LwqCnPJQ==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [linux]\n\n  '@tailwindcss/oxide-linux-arm64-musl@4.1.9':\n    resolution: {integrity: sha512-qCZ4QTrZaBEgNM13pGjvakdmid1Kw3CUCEQzgVAn64Iud7zSxOGwK1usg+hrwrOfFH7vXZZr8OhzC8fJTRq5NA==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [linux]\n\n  '@tailwindcss/oxide-linux-x64-gnu@4.1.9':\n    resolution: {integrity: sha512-bmzkAWQjRlY9udmg/a1bOtZpV14ZCdrB74PZrd7Oz/wK62Rk+m9+UV3BsgGfOghyO5Qu5ZDciADzDMZbi9n1+g==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [linux]\n\n  '@tailwindcss/oxide-linux-x64-musl@4.1.9':\n    resolution: {integrity: sha512-NpvPQsXj1raDHhd+g2SUvZQoTPWfYAsyYo9h4ZqV7EOmR+aj7LCAE5hnXNnrJ5Egy/NiO3Hs7BNpSbsPEOpORg==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [linux]\n\n  '@tailwindcss/oxide-wasm32-wasi@4.1.9':\n    resolution: {integrity: sha512-G93Yuf3xrpTxDUCSh685d1dvOkqOB0Gy+Bchv9Zy3k+lNw/9SEgsHit50xdvp1/p9yRH2TeDHJeDLUiV4mlTkA==}\n    engines: {node: '>=14.0.0'}\n    cpu: [wasm32]\n    bundledDependencies:\n      - '@napi-rs/wasm-runtime'\n      - '@emnapi/core'\n      - '@emnapi/runtime'\n      - '@tybys/wasm-util'\n      - '@emnapi/wasi-threads'\n      - tslib\n\n  '@tailwindcss/oxide-win32-arm64-msvc@4.1.9':\n    resolution: {integrity: sha512-Eq9FZzZe/NPkUiSMY+eY7r5l7msuFlm6wC6lnV11m8885z0vs9zx48AKTfw0UbVecTRV5wMxKb3Kmzx2LoUIWg==}\n    engines: {node: '>= 10'}\n    cpu: [arm64]\n    os: [win32]\n\n  '@tailwindcss/oxide-win32-x64-msvc@4.1.9':\n    resolution: {integrity: sha512-oZ4zkthMXMJN2w/vu3jEfuqWTW7n8giGYDV/SfhBGRNehNMOBqh3YUAEv+8fv2YDJEzL4JpXTNTiSXW3UiUwBw==}\n    engines: {node: '>= 10'}\n    cpu: [x64]\n    os: [win32]\n\n  '@tailwindcss/oxide@4.1.9':\n    resolution: {integrity: sha512-oqjNxOBt1iNRAywjiH+VFsfovx/hVt4mxe0kOkRMAbbcCwbJg5e2AweFqyGN7gtmE1TJXnvnyX7RWTR1l72ciQ==}\n    engines: {node: '>= 10'}\n\n  '@tailwindcss/postcss@4.1.9':\n    resolution: {integrity: sha512-v3DKzHibZO8ioVDmuVHCW1PR0XSM7nS40EjZFJEA1xPuvTuQPaR5flE1LyikU3hu2u1KNWBtEaSe8qsQjX3tyg==}\n\n  '@tanstack/query-core@5.89.0':\n    resolution: {integrity: sha512-joFV1MuPhSLsKfTzwjmPDrp8ENfZ9N23ymFu07nLfn3JCkSHy0CFgsyhHTJOmWaumC/WiNIKM0EJyduCF/Ih/Q==}\n\n  '@tanstack/react-query@5.89.0':\n    resolution: {integrity: sha512-SXbtWSTSRXyBOe80mszPxpEbaN4XPRUp/i0EfQK1uyj3KCk/c8FuPJNIRwzOVe/OU3rzxrYtiNabsAmk1l714A==}\n    peerDependencies:\n      react: ^18 || ^19\n\n  '@types/d3-array@3.2.2':\n    resolution: {integrity: sha512-hOLWVbm7uRza0BYXpIIW5pxfrKe0W+D5lrFiAEYR+pb6w3N2SwSMaJbXdUfSEv+dT4MfHBLtn5js0LAWaO6otw==}\n\n  '@types/d3-color@3.1.3':\n    resolution: {integrity: sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==}\n\n  '@types/d3-ease@3.0.2':\n    resolution: {integrity: sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==}\n\n  '@types/d3-interpolate@3.0.4':\n    resolution: {integrity: sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==}\n\n  '@types/d3-path@3.1.1':\n    resolution: {integrity: sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==}\n\n  '@types/d3-scale@4.0.9':\n    resolution: {integrity: sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==}\n\n  '@types/d3-shape@3.1.7':\n    resolution: {integrity: sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==}\n\n  '@types/d3-time@3.0.4':\n    resolution: {integrity: sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==}\n\n  '@types/d3-timer@3.0.2':\n    resolution: {integrity: sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==}\n\n  '@types/node@22.0.0':\n    resolution: {integrity: sha512-VT7KSYudcPOzP5Q0wfbowyNLaVR8QWUdw+088uFWwfvpY6uCWaXpqV6ieLAu9WBcnTa7H4Z5RLK8I5t2FuOcqw==}\n\n  '@types/prop-types@15.7.15':\n    resolution: {integrity: sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==}\n\n  '@types/react-dom@18.0.0':\n    resolution: {integrity: sha512-49897Y0UiCGmxZqpC8Blrf6meL8QUla6eb+BBhn69dTXlmuOlzkfr7HHY/O8J25e1lTUMs+YYxSlVDAaGHCOLg==}\n\n  '@types/react@18.0.0':\n    resolution: {integrity: sha512-7+K7zEQYu7NzOwQGLR91KwWXXDzmTFODRVizJyIALf6RfLv2GDpqpknX64pvRVILXCpXi7O/pua8NGk44dLvJw==}\n\n  '@types/scheduler@0.26.0':\n    resolution: {integrity: sha512-WFHp9YUJQ6CKshqoC37iOlHnQSmxNc795UhB26CyBBttrN9svdIrUjl/NjnNmfcwtncN0h/0PPAFWv9ovP8mLA==}\n\n  '@types/use-sync-external-store@0.0.6':\n    resolution: {integrity: sha512-zFDAD+tlpf2r4asuHEj0XH6pY6i0g5NeAHPn+15wk3BV6JA69eERFXC1gyGThDkVa1zCyKr5jox1+2LbV/AMLg==}\n\n  '@vercel/analytics@1.5.0':\n    resolution: {integrity: sha512-MYsBzfPki4gthY5HnYN7jgInhAZ7Ac1cYDoRWFomwGHWEX7odTEzbtg9kf/QSo7XEsEAqlQugA6gJ2WS2DEa3g==}\n    peerDependencies:\n      '@remix-run/react': ^2\n      '@sveltejs/kit': ^1 || ^2\n      next: '>= 13'\n      react: ^18 || ^19 || ^19.0.0-rc\n      svelte: '>= 4'\n      vue: ^3\n      vue-router: ^4\n    peerDependenciesMeta:\n      '@remix-run/react':\n        optional: true\n      '@sveltejs/kit':\n        optional: true\n      next:\n        optional: true\n      react:\n        optional: true\n      svelte:\n        optional: true\n      vue:\n        optional: true\n      vue-router:\n        optional: true\n\n  aria-hidden@1.2.6:\n    resolution: {integrity: sha512-ik3ZgC9dY/lYVVM++OISsaYDeg1tb0VtP5uL3ouh1koGOaUMDPpbFIei4JkFimWUFPn90sbMNMXQAIVOlnYKJA==}\n    engines: {node: '>=10'}\n\n  autoprefixer@10.4.20:\n    resolution: {integrity: sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==}\n    engines: {node: ^10 || ^12 || >=14}\n    hasBin: true\n    peerDependencies:\n      postcss: ^8.1.0\n\n  baseline-browser-mapping@2.8.6:\n    resolution: {integrity: sha512-wrH5NNqren/QMtKUEEJf7z86YjfqW/2uw3IL3/xpqZUC95SSVIFXYQeeGjL6FT/X68IROu6RMehZQS5foy2BXw==}\n    hasBin: true\n\n  browserslist@4.26.2:\n    resolution: {integrity: sha512-ECFzp6uFOSB+dcZ5BK/IBaGWssbSYBHvuMeMt3MMFyhI0Z8SqGgEkBLARgpRH3hutIgPVsALcMwbDrJqPxQ65A==}\n    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}\n    hasBin: true\n\n  busboy@1.6.0:\n    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}\n    engines: {node: '>=10.16.0'}\n\n  caniuse-lite@1.0.30001743:\n    resolution: {integrity: sha512-e6Ojr7RV14Un7dz6ASD0aZDmQPT/A+eZU+nuTNfjqmRrmkmQlnTNWH0SKmqagx9PeW87UVqapSurtAXifmtdmw==}\n\n  chownr@3.0.0:\n    resolution: {integrity: sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==}\n    engines: {node: '>=18'}\n\n  class-variance-authority@0.7.1:\n    resolution: {integrity: sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==}\n\n  client-only@0.0.1:\n    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}\n\n  clsx@2.1.1:\n    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}\n    engines: {node: '>=6'}\n\n  cmdk@1.0.4:\n    resolution: {integrity: sha512-AnsjfHyHpQ/EFeAnG216WY7A5LiYCoZzCSygiLvfXC3H3LFGCprErteUcszaVluGOhuOTbJS3jWHrSDYPBBygg==}\n    peerDependencies:\n      react: ^18 || ^19 || ^19.0.0-rc\n      react-dom: ^18 || ^19 || ^19.0.0-rc\n\n  csstype@3.1.3:\n    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}\n\n  d3-array@3.2.4:\n    resolution: {integrity: sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==}\n    engines: {node: '>=12'}\n\n  d3-color@3.1.0:\n    resolution: {integrity: sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==}\n    engines: {node: '>=12'}\n\n  d3-ease@3.0.1:\n    resolution: {integrity: sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==}\n    engines: {node: '>=12'}\n\n  d3-format@3.1.0:\n    resolution: {integrity: sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==}\n    engines: {node: '>=12'}\n\n  d3-interpolate@3.0.1:\n    resolution: {integrity: sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==}\n    engines: {node: '>=12'}\n\n  d3-path@3.1.0:\n    resolution: {integrity: sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==}\n    engines: {node: '>=12'}\n\n  d3-scale@4.0.2:\n    resolution: {integrity: sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==}\n    engines: {node: '>=12'}\n\n  d3-shape@3.2.0:\n    resolution: {integrity: sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==}\n    engines: {node: '>=12'}\n\n  d3-time-format@4.1.0:\n    resolution: {integrity: sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==}\n    engines: {node: '>=12'}\n\n  d3-time@3.1.0:\n    resolution: {integrity: sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==}\n    engines: {node: '>=12'}\n\n  d3-timer@3.0.1:\n    resolution: {integrity: sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==}\n    engines: {node: '>=12'}\n\n  date-fns-jalali@4.1.0-0:\n    resolution: {integrity: sha512-hTIP/z+t+qKwBDcmmsnmjWTduxCg+5KfdqWQvb2X/8C9+knYY6epN/pfxdDuyVlSVeFz0sM5eEfwIUQ70U4ckg==}\n\n  date-fns@4.1.0:\n    resolution: {integrity: sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==}\n\n  decimal.js-light@2.5.1:\n    resolution: {integrity: sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==}\n\n  detect-libc@2.1.0:\n    resolution: {integrity: sha512-vEtk+OcP7VBRtQZ1EJ3bdgzSfBjgnEalLTp5zjJrS+2Z1w2KZly4SBdac/WDU3hhsNAZ9E8SC96ME4Ey8MZ7cg==}\n    engines: {node: '>=8'}\n\n  detect-node-es@1.1.0:\n    resolution: {integrity: sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==}\n\n  electron-to-chromium@1.5.222:\n    resolution: {integrity: sha512-gA7psSwSwQRE60CEoLz6JBCQPIxNeuzB2nL8vE03GK/OHxlvykbLyeiumQy1iH5C2f3YbRAZpGCMT12a/9ih9w==}\n\n  embla-carousel-react@8.5.1:\n    resolution: {integrity: sha512-z9Y0K84BJvhChXgqn2CFYbfEi6AwEr+FFVVKm/MqbTQ2zIzO1VQri6w67LcfpVF0AjbhwVMywDZqY4alYkjW5w==}\n    peerDependencies:\n      react: ^16.8.0 || ^17.0.1 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n\n  embla-carousel-reactive-utils@8.5.1:\n    resolution: {integrity: sha512-n7VSoGIiiDIc4MfXF3ZRTO59KDp820QDuyBDGlt5/65+lumPHxX2JLz0EZ23hZ4eg4vZGUXwMkYv02fw2JVo/A==}\n    peerDependencies:\n      embla-carousel: 8.5.1\n\n  embla-carousel@8.5.1:\n    resolution: {integrity: sha512-JUb5+FOHobSiWQ2EJNaueCNT/cQU9L6XWBbWmorWPQT9bkbk+fhsuLr8wWrzXKagO3oWszBO7MSx+GfaRk4E6A==}\n\n  enhanced-resolve@5.18.3:\n    resolution: {integrity: sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==}\n    engines: {node: '>=10.13.0'}\n\n  es-toolkit@1.39.10:\n    resolution: {integrity: sha512-E0iGnTtbDhkeczB0T+mxmoVlT4YNweEKBLq7oaU4p11mecdsZpNWOglI4895Vh4usbQ+LsJiuLuI2L0Vdmfm2w==}\n\n  escalade@3.2.0:\n    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}\n    engines: {node: '>=6'}\n\n  eventemitter3@5.0.1:\n    resolution: {integrity: sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==}\n\n  fraction.js@4.3.7:\n    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}\n\n  geist@1.5.1:\n    resolution: {integrity: sha512-mAHZxIsL2o3ZITFaBVFBnwyDOw+zNLYum6A6nIjpzCGIO8QtC3V76XF2RnZTyLx1wlDTmMDy8jg3Ib52MIjGvQ==}\n    peerDependencies:\n      next: '>=13.2.0'\n\n  get-nonce@1.0.1:\n    resolution: {integrity: sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==}\n    engines: {node: '>=6'}\n\n  graceful-fs@4.2.11:\n    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}\n\n  immer@10.1.3:\n    resolution: {integrity: sha512-tmjF/k8QDKydUlm3mZU+tjM6zeq9/fFpPqH9SzWmBnVVKsPBg/V66qsMwb3/Bo90cgUN+ghdVBess+hPsxUyRw==}\n\n  input-otp@1.4.1:\n    resolution: {integrity: sha512-+yvpmKYKHi9jIGngxagY9oWiiblPB7+nEO75F2l2o4vs+6vpPZZmUl4tBNYuTCvQjhvEIbdNeJu70bhfYP2nbw==}\n    peerDependencies:\n      react: ^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc\n\n  internmap@2.0.3:\n    resolution: {integrity: sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==}\n    engines: {node: '>=12'}\n\n  jiti@2.5.1:\n    resolution: {integrity: sha512-twQoecYPiVA5K/h6SxtORw/Bs3ar+mLUtoPSc7iMXzQzK8d7eJ/R09wmTwAjiamETn1cXYPGfNnu7DMoHgu12w==}\n    hasBin: true\n\n  js-tokens@4.0.0:\n    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}\n\n  lightningcss-darwin-arm64@1.30.1:\n    resolution: {integrity: sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [arm64]\n    os: [darwin]\n\n  lightningcss-darwin-x64@1.30.1:\n    resolution: {integrity: sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [x64]\n    os: [darwin]\n\n  lightningcss-freebsd-x64@1.30.1:\n    resolution: {integrity: sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [x64]\n    os: [freebsd]\n\n  lightningcss-linux-arm-gnueabihf@1.30.1:\n    resolution: {integrity: sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [arm]\n    os: [linux]\n\n  lightningcss-linux-arm64-gnu@1.30.1:\n    resolution: {integrity: sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [arm64]\n    os: [linux]\n\n  lightningcss-linux-arm64-musl@1.30.1:\n    resolution: {integrity: sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [arm64]\n    os: [linux]\n\n  lightningcss-linux-x64-gnu@1.30.1:\n    resolution: {integrity: sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [x64]\n    os: [linux]\n\n  lightningcss-linux-x64-musl@1.30.1:\n    resolution: {integrity: sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [x64]\n    os: [linux]\n\n  lightningcss-win32-arm64-msvc@1.30.1:\n    resolution: {integrity: sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [arm64]\n    os: [win32]\n\n  lightningcss-win32-x64-msvc@1.30.1:\n    resolution: {integrity: sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==}\n    engines: {node: '>= 12.0.0'}\n    cpu: [x64]\n    os: [win32]\n\n  lightningcss@1.30.1:\n    resolution: {integrity: sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==}\n    engines: {node: '>= 12.0.0'}\n\n  loose-envify@1.4.0:\n    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}\n    hasBin: true\n\n  lucide-react@0.454.0:\n    resolution: {integrity: sha512-hw7zMDwykCLnEzgncEEjHeA6+45aeEzRYuKHuyRSOPkhko+J3ySGjGIzu+mmMfDFG1vazHepMaYFYHbTFAZAAQ==}\n    peerDependencies:\n      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0-rc\n\n  magic-string@0.30.19:\n    resolution: {integrity: sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==}\n\n  minipass@7.1.2:\n    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}\n    engines: {node: '>=16 || 14 >=14.17'}\n\n  minizlib@3.0.2:\n    resolution: {integrity: sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==}\n    engines: {node: '>= 18'}\n\n  mkdirp@3.0.1:\n    resolution: {integrity: sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==}\n    engines: {node: '>=10'}\n    hasBin: true\n\n  nanoid@3.3.11:\n    resolution: {integrity: sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==}\n    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}\n    hasBin: true\n\n  next-themes@0.4.6:\n    resolution: {integrity: sha512-pZvgD5L0IEvX5/9GWyHMf3m8BKiVQwsCMHfoFosXtXBMnaS0ZnIJ9ST4b4NqLVKDEm8QBxoNNGNaBv2JNF6XNA==}\n    peerDependencies:\n      react: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc\n      react-dom: ^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc\n\n  next@14.2.16:\n    resolution: {integrity: sha512-LcO7WnFu6lYSvCzZoo1dB+IO0xXz5uEv52HF1IUN0IqVTUIZGHuuR10I5efiLadGt+4oZqTcNZyVVEem/TM5nA==}\n    engines: {node: '>=18.17.0'}\n    hasBin: true\n    peerDependencies:\n      '@opentelemetry/api': ^1.1.0\n      '@playwright/test': ^1.41.2\n      react: ^18.2.0\n      react-dom: ^18.2.0\n      sass: ^1.3.0\n    peerDependenciesMeta:\n      '@opentelemetry/api':\n        optional: true\n      '@playwright/test':\n        optional: true\n      sass:\n        optional: true\n\n  node-releases@2.0.21:\n    resolution: {integrity: sha512-5b0pgg78U3hwXkCM8Z9b2FJdPZlr9Psr9V2gQPESdGHqbntyFJKFW4r5TeWGFzafGY3hzs1JC62VEQMbl1JFkw==}\n\n  normalize-range@0.1.2:\n    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}\n    engines: {node: '>=0.10.0'}\n\n  picocolors@1.1.1:\n    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}\n\n  postcss-value-parser@4.2.0:\n    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}\n\n  postcss@8.4.31:\n    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}\n    engines: {node: ^10 || ^12 || >=14}\n\n  postcss@8.5.0:\n    resolution: {integrity: sha512-27VKOqrYfPncKA2NrFOVhP5MGAfHKLYn/Q0mz9cNQyRAKYi3VNHwYU2qKKqPCqgBmeeJ0uAFB56NumXZ5ZReXg==}\n    engines: {node: ^10 || ^12 || >=14}\n\n  react-day-picker@9.11.0:\n    resolution: {integrity: sha512-L4FYOaPrr3+AEROeP6IG2mCORZZfxJDkJI2df8mv1jyPrNYeccgmFPZDaHyAuPCBCddQFozkxbikj2NhMEYfDQ==}\n    engines: {node: '>=18'}\n    peerDependencies:\n      react: '>=16.8.0'\n\n  react-dom@18.0.0:\n    resolution: {integrity: sha512-XqX7uzmFo0pUceWFCt7Gff6IyIMzFUn7QMZrbrQfGxtaxXZIcGQzoNpRLE3fQLnS4XzLLPMZX2T9TRcSrasicw==}\n    peerDependencies:\n      react: ^18.0.0\n\n  react-hook-form@7.60.0:\n    resolution: {integrity: sha512-SBrYOvMbDB7cV8ZfNpaiLcgjH/a1c7aK0lK+aNigpf4xWLO8q+o4tcvVurv3c4EOyzn/3dCsYt4GKD42VvJ/+A==}\n    engines: {node: '>=18.0.0'}\n    peerDependencies:\n      react: ^16.8.0 || ^17 || ^18 || ^19\n\n  react-is@19.1.1:\n    resolution: {integrity: sha512-tr41fA15Vn8p4X9ntI+yCyeGSf1TlYaY5vlTZfQmeLBrFo3psOPX6HhTDnFNL9uj3EhP0KAQ80cugCl4b4BERA==}\n\n  react-redux@9.2.0:\n    resolution: {integrity: sha512-ROY9fvHhwOD9ySfrF0wmvu//bKCQ6AeZZq1nJNtbDC+kk5DuSuNX/n6YWYF/SYy7bSba4D4FSz8DJeKY/S/r+g==}\n    peerDependencies:\n      '@types/react': ^18.2.25 || ^19\n      react: ^18.0 || ^19\n      redux: ^5.0.0\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n      redux:\n        optional: true\n\n  react-remove-scroll-bar@2.3.8:\n    resolution: {integrity: sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q==}\n    engines: {node: '>=10'}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  react-remove-scroll@2.7.1:\n    resolution: {integrity: sha512-HpMh8+oahmIdOuS5aFKKY6Pyog+FNaZV/XyJOq7b4YFwsFHe5yYfdbIalI4k3vU2nSDql7YskmUseHsRrJqIPA==}\n    engines: {node: '>=10'}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  react-resizable-panels@2.1.7:\n    resolution: {integrity: sha512-JtT6gI+nURzhMYQYsx8DKkx6bSoOGFp7A3CwMrOb8y5jFHFyqwo9m68UhmXRw57fRVJksFn1TSlm3ywEQ9vMgA==}\n    peerDependencies:\n      react: ^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n      react-dom: ^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n\n  react-style-singleton@2.2.3:\n    resolution: {integrity: sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ==}\n    engines: {node: '>=10'}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  react@18.0.0:\n    resolution: {integrity: sha512-x+VL6wbT4JRVPm7EGxXhZ8w8LTROaxPXOqhlGyVSrv0sB1jkyFGgXxJ8LVoPRLvPR6/CIZGFmfzqUa2NYeMr2A==}\n    engines: {node: '>=0.10.0'}\n\n  recharts@3.2.1:\n    resolution: {integrity: sha512-0JKwHRiFZdmLq/6nmilxEZl3pqb4T+aKkOkOi/ZISRZwfBhVMgInxzlYU9D4KnCH3KINScLy68m/OvMXoYGZUw==}\n    engines: {node: '>=18'}\n    peerDependencies:\n      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0\n      react-dom: ^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0\n      react-is: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0\n\n  redux-thunk@3.1.0:\n    resolution: {integrity: sha512-NW2r5T6ksUKXCabzhL9z+h206HQw/NJkcLm1GPImRQ8IzfXwRGqjVhKJGauHirT0DAuyy6hjdnMZaRoAcy0Klw==}\n    peerDependencies:\n      redux: ^5.0.0\n\n  redux@5.0.1:\n    resolution: {integrity: sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==}\n\n  reselect@5.1.1:\n    resolution: {integrity: sha512-K/BG6eIky/SBpzfHZv/dd+9JBFiS4SWV7FIujVyJRux6e45+73RaUHXLmIR1f7WOMaQ0U1km6qwklRQxpJJY0w==}\n\n  scheduler@0.21.0:\n    resolution: {integrity: sha512-1r87x5fz9MXqswA2ERLo0EbOAU74DpIUO090gIasYTqlVoJeMcl+Z1Rg7WHz+qtPujhS/hGIt9kxZOYBV3faRQ==}\n\n  sonner@2.0.7:\n    resolution: {integrity: sha512-W6ZN4p58k8aDKA4XPcx2hpIQXBRAgyiWVkYhT7CvK6D3iAu7xjvVyhQHg2/iaKJZ1XVJ4r7XuwGL+WGEK37i9w==}\n    peerDependencies:\n      react: ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n      react-dom: ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n\n  source-map-js@1.2.1:\n    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}\n    engines: {node: '>=0.10.0'}\n\n  streamsearch@1.1.0:\n    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}\n    engines: {node: '>=10.0.0'}\n\n  styled-jsx@5.1.1:\n    resolution: {integrity: sha512-pW7uC1l4mBZ8ugbiZrcIsiIvVx1UmTfw7UkC3Um2tmfUq9Bhk8IiyEIPl6F8agHgjzku6j0xQEZbfA5uSgSaCw==}\n    engines: {node: '>= 12.0.0'}\n    peerDependencies:\n      '@babel/core': '*'\n      babel-plugin-macros: '*'\n      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0'\n    peerDependenciesMeta:\n      '@babel/core':\n        optional: true\n      babel-plugin-macros:\n        optional: true\n\n  tailwind-merge@2.5.5:\n    resolution: {integrity: sha512-0LXunzzAZzo0tEPxV3I297ffKZPlKDrjj7NXphC8V5ak9yHC5zRmxnOe2m/Rd/7ivsOMJe3JZ2JVocoDdQTRBA==}\n\n  tailwindcss-animate@1.0.7:\n    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}\n    peerDependencies:\n      tailwindcss: '>=3.0.0 || insiders'\n\n  tailwindcss@4.1.9:\n    resolution: {integrity: sha512-anBZRcvfNMsQdHB9XSGzAtIQWlhs49uK75jfkwrqjRUbjt4d7q9RE1wR1xWyfYZhLFnFX4ahWp88Au2lcEw5IQ==}\n\n  tapable@2.2.3:\n    resolution: {integrity: sha512-ZL6DDuAlRlLGghwcfmSn9sK3Hr6ArtyudlSAiCqQ6IfE+b+HHbydbYDIG15IfS5do+7XQQBdBiubF/cV2dnDzg==}\n    engines: {node: '>=6'}\n\n  tar@7.4.3:\n    resolution: {integrity: sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==}\n    engines: {node: '>=18'}\n\n  tiny-invariant@1.3.3:\n    resolution: {integrity: sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==}\n\n  tslib@2.8.1:\n    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}\n\n  tw-animate-css@1.3.3:\n    resolution: {integrity: sha512-tXE2TRWrskc4TU3RDd7T8n8Np/wCfoeH9gz22c7PzYqNPQ9FBGFbWWzwL0JyHcFp+jHozmF76tbHfPAx22ua2Q==}\n\n  typescript@5.0.2:\n    resolution: {integrity: sha512-wVORMBGO/FAs/++blGNeAVdbNKtIh1rbBL2EyQ1+J9lClJ93KiiKe8PmFIVdXhHcyv44SL9oglmfeSsndo0jRw==}\n    engines: {node: '>=12.20'}\n    hasBin: true\n\n  undici-types@6.11.1:\n    resolution: {integrity: sha512-mIDEX2ek50x0OlRgxryxsenE5XaQD4on5U2inY7RApK3SOJpofyw7uW2AyfMKkhAxXIceo2DeWGVGwyvng1GNQ==}\n\n  update-browserslist-db@1.1.3:\n    resolution: {integrity: sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==}\n    hasBin: true\n    peerDependencies:\n      browserslist: '>= 4.21.0'\n\n  use-callback-ref@1.3.3:\n    resolution: {integrity: sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg==}\n    engines: {node: '>=10'}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  use-sidecar@1.1.3:\n    resolution: {integrity: sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ==}\n    engines: {node: '>=10'}\n    peerDependencies:\n      '@types/react': '*'\n      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc\n    peerDependenciesMeta:\n      '@types/react':\n        optional: true\n\n  use-sync-external-store@1.5.0:\n    resolution: {integrity: sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==}\n    peerDependencies:\n      react: ^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0\n\n  vaul@0.9.9:\n    resolution: {integrity: sha512-7afKg48srluhZwIkaU+lgGtFCUsYBSGOl8vcc8N/M3YQlZFlynHD15AE+pwrYdc826o7nrIND4lL9Y6b9WWZZQ==}\n    peerDependencies:\n      react: ^16.8 || ^17.0 || ^18.0\n      react-dom: ^16.8 || ^17.0 || ^18.0\n\n  victory-vendor@37.3.6:\n    resolution: {integrity: sha512-SbPDPdDBYp+5MJHhBCAyI7wKM3d5ivekigc2Dk2s7pgbZ9wIgIBYGVw4zGHBml/qTFbexrofXW6Gu4noGxrOwQ==}\n\n  yallist@5.0.0:\n    resolution: {integrity: sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==}\n    engines: {node: '>=18'}\n\n  zod@3.25.67:\n    resolution: {integrity: sha512-idA2YXwpCdqUSKRCACDE6ItZD9TZzy3OZMtpfLoh6oPR47lipysRrJfjzMqFxQ3uJuUPyUeWe1r9vLH33xO/Qw==}\n\nsnapshots:\n\n  '@alloc/quick-lru@5.2.0': {}\n\n  '@ampproject/remapping@2.3.0':\n    dependencies:\n      '@jridgewell/gen-mapping': 0.3.13\n      '@jridgewell/trace-mapping': 0.3.31\n\n  '@date-fns/tz@1.4.1': {}\n\n  '@floating-ui/core@1.7.3':\n    dependencies:\n      '@floating-ui/utils': 0.2.10\n\n  '@floating-ui/dom@1.7.4':\n    dependencies:\n      '@floating-ui/core': 1.7.3\n      '@floating-ui/utils': 0.2.10\n\n  '@floating-ui/react-dom@2.1.6(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@floating-ui/dom': 1.7.4\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n\n  '@floating-ui/utils@0.2.10': {}\n\n  '@hookform/resolvers@3.10.0(react-hook-form@7.60.0(react@18.0.0))':\n    dependencies:\n      react-hook-form: 7.60.0(react@18.0.0)\n\n  '@isaacs/fs-minipass@4.0.1':\n    dependencies:\n      minipass: 7.1.2\n\n  '@jridgewell/gen-mapping@0.3.13':\n    dependencies:\n      '@jridgewell/sourcemap-codec': 1.5.5\n      '@jridgewell/trace-mapping': 0.3.31\n\n  '@jridgewell/resolve-uri@3.1.2': {}\n\n  '@jridgewell/sourcemap-codec@1.5.5': {}\n\n  '@jridgewell/trace-mapping@0.3.31':\n    dependencies:\n      '@jridgewell/resolve-uri': 3.1.2\n      '@jridgewell/sourcemap-codec': 1.5.5\n\n  '@next/env@14.2.16': {}\n\n  '@next/swc-darwin-arm64@14.2.16':\n    optional: true\n\n  '@next/swc-darwin-x64@14.2.16':\n    optional: true\n\n  '@next/swc-linux-arm64-gnu@14.2.16':\n    optional: true\n\n  '@next/swc-linux-arm64-musl@14.2.16':\n    optional: true\n\n  '@next/swc-linux-x64-gnu@14.2.16':\n    optional: true\n\n  '@next/swc-linux-x64-musl@14.2.16':\n    optional: true\n\n  '@next/swc-win32-arm64-msvc@14.2.16':\n    optional: true\n\n  '@next/swc-win32-ia32-msvc@14.2.16':\n    optional: true\n\n  '@next/swc-win32-x64-msvc@14.2.16':\n    optional: true\n\n  '@radix-ui/number@1.1.1': {}\n\n  '@radix-ui/primitive@1.1.1': {}\n\n  '@radix-ui/primitive@1.1.3': {}\n\n  '@radix-ui/react-accordion@1.2.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-collapsible': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-collection': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-alert-dialog@1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dialog': 1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-arrow@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-arrow@1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-aspect-ratio@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-avatar@1.1.10(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-is-hydrated': 0.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-checkbox@1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-previous': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-size': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-collapsible@1.1.12(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-collapsible@1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-collection@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-collection@1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.2.3(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-compose-refs@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-compose-refs@1.1.2(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-context-menu@2.2.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-menu': 2.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-context@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-context@1.1.2(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-dialog@1.1.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-focus-guards': 1.1.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-focus-scope': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.2.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      aria-hidden: 1.2.6\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      react-remove-scroll: 2.7.1(@types/react@18.0.0)(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-dialog@1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-focus-guards': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      aria-hidden: 1.2.6\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      react-remove-scroll: 2.7.1(@types/react@18.0.0)(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-direction@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-direction@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-dismissable-layer@1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-escape-keydown': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-dismissable-layer@1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-escape-keydown': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-dropdown-menu@2.1.16(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-menu': 2.1.16(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-focus-guards@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-focus-guards@1.1.3(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-focus-scope@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-focus-scope@1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-hover-card@1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-popper': 1.2.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-id@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-id@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-label@2.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-menu@2.1.16(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-collection': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-focus-guards': 1.1.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-focus-scope': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-popper': 1.2.8(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-roving-focus': 1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.2.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      aria-hidden: 1.2.6\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      react-remove-scroll: 2.7.1(@types/react@18.0.0)(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-menu@2.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-collection': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-focus-guards': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-focus-scope': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-popper': 1.2.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      aria-hidden: 1.2.6\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      react-remove-scroll: 2.7.1(@types/react@18.0.0)(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-menubar@1.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-collection': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-menu': 2.1.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-navigation-menu@1.2.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-collection': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-previous': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-popover@1.1.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-focus-guards': 1.1.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-focus-scope': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-popper': 1.2.8(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.2.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      aria-hidden: 1.2.6\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      react-remove-scroll: 2.7.1(@types/react@18.0.0)(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-popper@1.2.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@floating-ui/react-dom': 2.1.6(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-arrow': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-rect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-size': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/rect': 1.1.0\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-popper@1.2.8(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@floating-ui/react-dom': 2.1.6(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-arrow': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-rect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-size': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/rect': 1.1.1\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-portal@1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-portal@1.1.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-presence@1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-presence@1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-primitive@2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-slot': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-primitive@2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-slot': 1.2.3(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-progress@1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-radio-group@1.2.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-previous': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-size': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-roving-focus@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-collection': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-roving-focus@1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-collection': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-scroll-area@1.2.10(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/number': 1.1.1\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-select@2.2.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/number': 1.1.1\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-collection': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-focus-guards': 1.1.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-focus-scope': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-popper': 1.2.8(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.2.3(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-previous': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-visually-hidden': 1.2.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      aria-hidden: 1.2.6\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      react-remove-scroll: 2.7.1(@types/react@18.0.0)(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-separator@1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-slider@1.3.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/number': 1.1.1\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-collection': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-previous': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-size': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-slot@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-slot@1.2.3(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-switch@1.2.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-previous': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-size': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-tabs@1.1.13(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-roving-focus': 1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-toast@1.2.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.3\n      '@radix-ui/react-collection': 1.1.7(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-compose-refs': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.11(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.5(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.2.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-visually-hidden': 1.2.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-toggle-group@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-direction': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-roving-focus': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-toggle': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-toggle@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-tooltip@1.1.6(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/primitive': 1.1.1\n      '@radix-ui/react-compose-refs': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-context': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-dismissable-layer': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-popper': 1.2.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-portal': 1.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-presence': 1.1.2(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-slot': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-visually-hidden': 1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-use-callback-ref@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-callback-ref@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-controllable-state@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-controllable-state@1.2.2(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-effect-event': 0.0.2(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-effect-event@0.0.2(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-escape-keydown@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-escape-keydown@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-callback-ref': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-is-hydrated@0.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n      use-sync-external-store: 1.5.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-layout-effect@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-layout-effect@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-previous@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-previous@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-rect@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/rect': 1.1.0\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-rect@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/rect': 1.1.1\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-size@1.1.0(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-use-size@1.1.1(@types/react@18.0.0)(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-use-layout-effect': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      react: 18.0.0\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  '@radix-ui/react-visually-hidden@1.1.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.0.1(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/react-visually-hidden@1.2.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)':\n    dependencies:\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      '@types/react-dom': 18.0.0\n\n  '@radix-ui/rect@1.1.0': {}\n\n  '@radix-ui/rect@1.1.1': {}\n\n  '@reduxjs/toolkit@2.9.0(react-redux@9.2.0(@types/react@18.0.0)(react@18.0.0)(redux@5.0.1))(react@18.0.0)':\n    dependencies:\n      '@standard-schema/spec': 1.0.0\n      '@standard-schema/utils': 0.3.0\n      immer: 10.1.3\n      redux: 5.0.1\n      redux-thunk: 3.1.0(redux@5.0.1)\n      reselect: 5.1.1\n    optionalDependencies:\n      react: 18.0.0\n      react-redux: 9.2.0(@types/react@18.0.0)(react@18.0.0)(redux@5.0.1)\n\n  '@standard-schema/spec@1.0.0': {}\n\n  '@standard-schema/utils@0.3.0': {}\n\n  '@swc/counter@0.1.3': {}\n\n  '@swc/helpers@0.5.5':\n    dependencies:\n      '@swc/counter': 0.1.3\n      tslib: 2.8.1\n\n  '@tailwindcss/node@4.1.9':\n    dependencies:\n      '@ampproject/remapping': 2.3.0\n      enhanced-resolve: 5.18.3\n      jiti: 2.5.1\n      lightningcss: 1.30.1\n      magic-string: 0.30.19\n      source-map-js: 1.2.1\n      tailwindcss: 4.1.9\n\n  '@tailwindcss/oxide-android-arm64@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-darwin-arm64@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-darwin-x64@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-freebsd-x64@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-linux-arm-gnueabihf@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-linux-arm64-gnu@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-linux-arm64-musl@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-linux-x64-gnu@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-linux-x64-musl@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-wasm32-wasi@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-win32-arm64-msvc@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide-win32-x64-msvc@4.1.9':\n    optional: true\n\n  '@tailwindcss/oxide@4.1.9':\n    dependencies:\n      detect-libc: 2.1.0\n      tar: 7.4.3\n    optionalDependencies:\n      '@tailwindcss/oxide-android-arm64': 4.1.9\n      '@tailwindcss/oxide-darwin-arm64': 4.1.9\n      '@tailwindcss/oxide-darwin-x64': 4.1.9\n      '@tailwindcss/oxide-freebsd-x64': 4.1.9\n      '@tailwindcss/oxide-linux-arm-gnueabihf': 4.1.9\n      '@tailwindcss/oxide-linux-arm64-gnu': 4.1.9\n      '@tailwindcss/oxide-linux-arm64-musl': 4.1.9\n      '@tailwindcss/oxide-linux-x64-gnu': 4.1.9\n      '@tailwindcss/oxide-linux-x64-musl': 4.1.9\n      '@tailwindcss/oxide-wasm32-wasi': 4.1.9\n      '@tailwindcss/oxide-win32-arm64-msvc': 4.1.9\n      '@tailwindcss/oxide-win32-x64-msvc': 4.1.9\n\n  '@tailwindcss/postcss@4.1.9':\n    dependencies:\n      '@alloc/quick-lru': 5.2.0\n      '@tailwindcss/node': 4.1.9\n      '@tailwindcss/oxide': 4.1.9\n      postcss: 8.5.0\n      tailwindcss: 4.1.9\n\n  '@tanstack/query-core@5.89.0': {}\n\n  '@tanstack/react-query@5.89.0(react@18.0.0)':\n    dependencies:\n      '@tanstack/query-core': 5.89.0\n      react: 18.0.0\n\n  '@types/d3-array@3.2.2': {}\n\n  '@types/d3-color@3.1.3': {}\n\n  '@types/d3-ease@3.0.2': {}\n\n  '@types/d3-interpolate@3.0.4':\n    dependencies:\n      '@types/d3-color': 3.1.3\n\n  '@types/d3-path@3.1.1': {}\n\n  '@types/d3-scale@4.0.9':\n    dependencies:\n      '@types/d3-time': 3.0.4\n\n  '@types/d3-shape@3.1.7':\n    dependencies:\n      '@types/d3-path': 3.1.1\n\n  '@types/d3-time@3.0.4': {}\n\n  '@types/d3-timer@3.0.2': {}\n\n  '@types/node@22.0.0':\n    dependencies:\n      undici-types: 6.11.1\n\n  '@types/prop-types@15.7.15': {}\n\n  '@types/react-dom@18.0.0':\n    dependencies:\n      '@types/react': 18.0.0\n\n  '@types/react@18.0.0':\n    dependencies:\n      '@types/prop-types': 15.7.15\n      '@types/scheduler': 0.26.0\n      csstype: 3.1.3\n\n  '@types/scheduler@0.26.0': {}\n\n  '@types/use-sync-external-store@0.0.6': {}\n\n  '@vercel/analytics@1.5.0(next@14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0))(react@18.0.0)':\n    optionalDependencies:\n      next: 14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n\n  aria-hidden@1.2.6:\n    dependencies:\n      tslib: 2.8.1\n\n  autoprefixer@10.4.20(postcss@8.5.0):\n    dependencies:\n      browserslist: 4.26.2\n      caniuse-lite: 1.0.30001743\n      fraction.js: 4.3.7\n      normalize-range: 0.1.2\n      picocolors: 1.1.1\n      postcss: 8.5.0\n      postcss-value-parser: 4.2.0\n\n  baseline-browser-mapping@2.8.6: {}\n\n  browserslist@4.26.2:\n    dependencies:\n      baseline-browser-mapping: 2.8.6\n      caniuse-lite: 1.0.30001743\n      electron-to-chromium: 1.5.222\n      node-releases: 2.0.21\n      update-browserslist-db: 1.1.3(browserslist@4.26.2)\n\n  busboy@1.6.0:\n    dependencies:\n      streamsearch: 1.1.0\n\n  caniuse-lite@1.0.30001743: {}\n\n  chownr@3.0.0: {}\n\n  class-variance-authority@0.7.1:\n    dependencies:\n      clsx: 2.1.1\n\n  client-only@0.0.1: {}\n\n  clsx@2.1.1: {}\n\n  cmdk@1.0.4(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0):\n    dependencies:\n      '@radix-ui/react-dialog': 1.1.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      '@radix-ui/react-id': 1.1.1(@types/react@18.0.0)(react@18.0.0)\n      '@radix-ui/react-primitive': 2.1.3(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      use-sync-external-store: 1.5.0(react@18.0.0)\n    transitivePeerDependencies:\n      - '@types/react'\n      - '@types/react-dom'\n\n  csstype@3.1.3: {}\n\n  d3-array@3.2.4:\n    dependencies:\n      internmap: 2.0.3\n\n  d3-color@3.1.0: {}\n\n  d3-ease@3.0.1: {}\n\n  d3-format@3.1.0: {}\n\n  d3-interpolate@3.0.1:\n    dependencies:\n      d3-color: 3.1.0\n\n  d3-path@3.1.0: {}\n\n  d3-scale@4.0.2:\n    dependencies:\n      d3-array: 3.2.4\n      d3-format: 3.1.0\n      d3-interpolate: 3.0.1\n      d3-time: 3.1.0\n      d3-time-format: 4.1.0\n\n  d3-shape@3.2.0:\n    dependencies:\n      d3-path: 3.1.0\n\n  d3-time-format@4.1.0:\n    dependencies:\n      d3-time: 3.1.0\n\n  d3-time@3.1.0:\n    dependencies:\n      d3-array: 3.2.4\n\n  d3-timer@3.0.1: {}\n\n  date-fns-jalali@4.1.0-0: {}\n\n  date-fns@4.1.0: {}\n\n  decimal.js-light@2.5.1: {}\n\n  detect-libc@2.1.0: {}\n\n  detect-node-es@1.1.0: {}\n\n  electron-to-chromium@1.5.222: {}\n\n  embla-carousel-react@8.5.1(react@18.0.0):\n    dependencies:\n      embla-carousel: 8.5.1\n      embla-carousel-reactive-utils: 8.5.1(embla-carousel@8.5.1)\n      react: 18.0.0\n\n  embla-carousel-reactive-utils@8.5.1(embla-carousel@8.5.1):\n    dependencies:\n      embla-carousel: 8.5.1\n\n  embla-carousel@8.5.1: {}\n\n  enhanced-resolve@5.18.3:\n    dependencies:\n      graceful-fs: 4.2.11\n      tapable: 2.2.3\n\n  es-toolkit@1.39.10: {}\n\n  escalade@3.2.0: {}\n\n  eventemitter3@5.0.1: {}\n\n  fraction.js@4.3.7: {}\n\n  geist@1.5.1(next@14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0)):\n    dependencies:\n      next: 14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n\n  get-nonce@1.0.1: {}\n\n  graceful-fs@4.2.11: {}\n\n  immer@10.1.3: {}\n\n  input-otp@1.4.1(react-dom@18.0.0(react@18.0.0))(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n\n  internmap@2.0.3: {}\n\n  jiti@2.5.1: {}\n\n  js-tokens@4.0.0: {}\n\n  lightningcss-darwin-arm64@1.30.1:\n    optional: true\n\n  lightningcss-darwin-x64@1.30.1:\n    optional: true\n\n  lightningcss-freebsd-x64@1.30.1:\n    optional: true\n\n  lightningcss-linux-arm-gnueabihf@1.30.1:\n    optional: true\n\n  lightningcss-linux-arm64-gnu@1.30.1:\n    optional: true\n\n  lightningcss-linux-arm64-musl@1.30.1:\n    optional: true\n\n  lightningcss-linux-x64-gnu@1.30.1:\n    optional: true\n\n  lightningcss-linux-x64-musl@1.30.1:\n    optional: true\n\n  lightningcss-win32-arm64-msvc@1.30.1:\n    optional: true\n\n  lightningcss-win32-x64-msvc@1.30.1:\n    optional: true\n\n  lightningcss@1.30.1:\n    dependencies:\n      detect-libc: 2.1.0\n    optionalDependencies:\n      lightningcss-darwin-arm64: 1.30.1\n      lightningcss-darwin-x64: 1.30.1\n      lightningcss-freebsd-x64: 1.30.1\n      lightningcss-linux-arm-gnueabihf: 1.30.1\n      lightningcss-linux-arm64-gnu: 1.30.1\n      lightningcss-linux-arm64-musl: 1.30.1\n      lightningcss-linux-x64-gnu: 1.30.1\n      lightningcss-linux-x64-musl: 1.30.1\n      lightningcss-win32-arm64-msvc: 1.30.1\n      lightningcss-win32-x64-msvc: 1.30.1\n\n  loose-envify@1.4.0:\n    dependencies:\n      js-tokens: 4.0.0\n\n  lucide-react@0.454.0(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n\n  magic-string@0.30.19:\n    dependencies:\n      '@jridgewell/sourcemap-codec': 1.5.5\n\n  minipass@7.1.2: {}\n\n  minizlib@3.0.2:\n    dependencies:\n      minipass: 7.1.2\n\n  mkdirp@3.0.1: {}\n\n  nanoid@3.3.11: {}\n\n  next-themes@0.4.6(react-dom@18.0.0(react@18.0.0))(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n\n  next@14.2.16(react-dom@18.0.0(react@18.0.0))(react@18.0.0):\n    dependencies:\n      '@next/env': 14.2.16\n      '@swc/helpers': 0.5.5\n      busboy: 1.6.0\n      caniuse-lite: 1.0.30001743\n      graceful-fs: 4.2.11\n      postcss: 8.4.31\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      styled-jsx: 5.1.1(react@18.0.0)\n    optionalDependencies:\n      '@next/swc-darwin-arm64': 14.2.16\n      '@next/swc-darwin-x64': 14.2.16\n      '@next/swc-linux-arm64-gnu': 14.2.16\n      '@next/swc-linux-arm64-musl': 14.2.16\n      '@next/swc-linux-x64-gnu': 14.2.16\n      '@next/swc-linux-x64-musl': 14.2.16\n      '@next/swc-win32-arm64-msvc': 14.2.16\n      '@next/swc-win32-ia32-msvc': 14.2.16\n      '@next/swc-win32-x64-msvc': 14.2.16\n    transitivePeerDependencies:\n      - '@babel/core'\n      - babel-plugin-macros\n\n  node-releases@2.0.21: {}\n\n  normalize-range@0.1.2: {}\n\n  picocolors@1.1.1: {}\n\n  postcss-value-parser@4.2.0: {}\n\n  postcss@8.4.31:\n    dependencies:\n      nanoid: 3.3.11\n      picocolors: 1.1.1\n      source-map-js: 1.2.1\n\n  postcss@8.5.0:\n    dependencies:\n      nanoid: 3.3.11\n      picocolors: 1.1.1\n      source-map-js: 1.2.1\n\n  react-day-picker@9.11.0(react@18.0.0):\n    dependencies:\n      '@date-fns/tz': 1.4.1\n      date-fns: 4.1.0\n      date-fns-jalali: 4.1.0-0\n      react: 18.0.0\n\n  react-dom@18.0.0(react@18.0.0):\n    dependencies:\n      loose-envify: 1.4.0\n      react: 18.0.0\n      scheduler: 0.21.0\n\n  react-hook-form@7.60.0(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n\n  react-is@19.1.1: {}\n\n  react-redux@9.2.0(@types/react@18.0.0)(react@18.0.0)(redux@5.0.1):\n    dependencies:\n      '@types/use-sync-external-store': 0.0.6\n      react: 18.0.0\n      use-sync-external-store: 1.5.0(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n      redux: 5.0.1\n\n  react-remove-scroll-bar@2.3.8(@types/react@18.0.0)(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n      react-style-singleton: 2.2.3(@types/react@18.0.0)(react@18.0.0)\n      tslib: 2.8.1\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  react-remove-scroll@2.7.1(@types/react@18.0.0)(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n      react-remove-scroll-bar: 2.3.8(@types/react@18.0.0)(react@18.0.0)\n      react-style-singleton: 2.2.3(@types/react@18.0.0)(react@18.0.0)\n      tslib: 2.8.1\n      use-callback-ref: 1.3.3(@types/react@18.0.0)(react@18.0.0)\n      use-sidecar: 1.1.3(@types/react@18.0.0)(react@18.0.0)\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  react-resizable-panels@2.1.7(react-dom@18.0.0(react@18.0.0))(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n\n  react-style-singleton@2.2.3(@types/react@18.0.0)(react@18.0.0):\n    dependencies:\n      get-nonce: 1.0.1\n      react: 18.0.0\n      tslib: 2.8.1\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  react@18.0.0:\n    dependencies:\n      loose-envify: 1.4.0\n\n  recharts@3.2.1(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react-is@19.1.1)(react@18.0.0)(redux@5.0.1):\n    dependencies:\n      '@reduxjs/toolkit': 2.9.0(react-redux@9.2.0(@types/react@18.0.0)(react@18.0.0)(redux@5.0.1))(react@18.0.0)\n      clsx: 2.1.1\n      decimal.js-light: 2.5.1\n      es-toolkit: 1.39.10\n      eventemitter3: 5.0.1\n      immer: 10.1.3\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n      react-is: 19.1.1\n      react-redux: 9.2.0(@types/react@18.0.0)(react@18.0.0)(redux@5.0.1)\n      reselect: 5.1.1\n      tiny-invariant: 1.3.3\n      use-sync-external-store: 1.5.0(react@18.0.0)\n      victory-vendor: 37.3.6\n    transitivePeerDependencies:\n      - '@types/react'\n      - redux\n\n  redux-thunk@3.1.0(redux@5.0.1):\n    dependencies:\n      redux: 5.0.1\n\n  redux@5.0.1: {}\n\n  reselect@5.1.1: {}\n\n  scheduler@0.21.0:\n    dependencies:\n      loose-envify: 1.4.0\n\n  sonner@2.0.7(react-dom@18.0.0(react@18.0.0))(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n\n  source-map-js@1.2.1: {}\n\n  streamsearch@1.1.0: {}\n\n  styled-jsx@5.1.1(react@18.0.0):\n    dependencies:\n      client-only: 0.0.1\n      react: 18.0.0\n\n  tailwind-merge@2.5.5: {}\n\n  tailwindcss-animate@1.0.7(tailwindcss@4.1.9):\n    dependencies:\n      tailwindcss: 4.1.9\n\n  tailwindcss@4.1.9: {}\n\n  tapable@2.2.3: {}\n\n  tar@7.4.3:\n    dependencies:\n      '@isaacs/fs-minipass': 4.0.1\n      chownr: 3.0.0\n      minipass: 7.1.2\n      minizlib: 3.0.2\n      mkdirp: 3.0.1\n      yallist: 5.0.0\n\n  tiny-invariant@1.3.3: {}\n\n  tslib@2.8.1: {}\n\n  tw-animate-css@1.3.3: {}\n\n  typescript@5.0.2: {}\n\n  undici-types@6.11.1: {}\n\n  update-browserslist-db@1.1.3(browserslist@4.26.2):\n    dependencies:\n      browserslist: 4.26.2\n      escalade: 3.2.0\n      picocolors: 1.1.1\n\n  use-callback-ref@1.3.3(@types/react@18.0.0)(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n      tslib: 2.8.1\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  use-sidecar@1.1.3(@types/react@18.0.0)(react@18.0.0):\n    dependencies:\n      detect-node-es: 1.1.0\n      react: 18.0.0\n      tslib: 2.8.1\n    optionalDependencies:\n      '@types/react': 18.0.0\n\n  use-sync-external-store@1.5.0(react@18.0.0):\n    dependencies:\n      react: 18.0.0\n\n  vaul@0.9.9(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0):\n    dependencies:\n      '@radix-ui/react-dialog': 1.1.15(@types/react-dom@18.0.0)(@types/react@18.0.0)(react-dom@18.0.0(react@18.0.0))(react@18.0.0)\n      react: 18.0.0\n      react-dom: 18.0.0(react@18.0.0)\n    transitivePeerDependencies:\n      - '@types/react'\n      - '@types/react-dom'\n\n  victory-vendor@37.3.6:\n    dependencies:\n      '@types/d3-array': 3.2.2\n      '@types/d3-ease': 3.0.2\n      '@types/d3-interpolate': 3.0.4\n      '@types/d3-scale': 4.0.9\n      '@types/d3-shape': 3.1.7\n      '@types/d3-time': 3.0.4\n      '@types/d3-timer': 3.0.2\n      d3-array: 3.2.4\n      d3-ease: 3.0.1\n      d3-interpolate: 3.0.1\n      d3-scale: 4.0.2\n      d3-shape: 3.2.0\n      d3-time: 3.1.0\n      d3-timer: 3.0.1\n\n  yallist@5.0.0: {}\n\n  zod@3.25.67: {}\n","size_bytes":145769},"replit.md":{"content":"# CodeContest Pro\n\n## Overview\nCodeContest Pro is a modern code contest platform with plagiarism detection built with Next.js, React, TypeScript, and Tailwind CSS. It provides a comprehensive solution for educators to run programming contests with real-time leaderboards, submission tracking, and advanced plagiarism detection capabilities.\n\n## Project Architecture\n- **Framework**: Next.js 14.2.32 with React 18\n- **Language**: TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **Font**: Geist Sans & Mono fonts\n- **Analytics**: Vercel Analytics\n- **State Management**: React Context for authentication\n- **UI Components**: Radix UI primitives with custom shadcn/ui components\n\n## Key Features\n- Student and teacher authentication flows\n- Live contest management and participation\n- Real-time leaderboards with WebSocket support\n- Code editor with syntax highlighting\n- Automated code execution and testing\n- Advanced plagiarism detection with detailed analysis\n- Performance analytics and progress tracking\n- Multi-language support (Python, Java, C++, JavaScript)\n\n## Project Structure\n- `/app` - Next.js App Router pages and API routes\n- `/components` - Reusable React components and UI primitives\n- `/contexts` - React context providers\n- `/hooks` - Custom React hooks\n- `/lib` - Utility functions and shared logic\n- `/public` - Static assets\n- `/styles` - Global CSS styles\n\n## Development Setup\nThe project is configured to run on Replit with:\n- Development server on port 5000 (0.0.0.0:5000)\n- Host verification disabled for Replit proxy\n- TypeScript build errors ignored for development\n- ESLint errors ignored during builds\n- Unoptimized images for faster development\n\n## API Structure\nAll API endpoints are located in `/app/api/` and include:\n- `/analytics` - Performance and usage analytics\n- `/contests` - Contest CRUD operations\n- `/execute` - Code execution and testing\n- `/leaderboard` - Contest rankings and scores\n- `/plagiarism` - Plagiarism detection and analysis\n- `/submissions` - Code submission processing\n- `/websocket` - Real-time communication endpoints\n\n## Current State\n- Dependencies installed and project running successfully in Replit environment\n- Frontend (Next.js) development server configured on port 5000 with 0.0.0.0 binding\n- Backend (Node.js/Express) API server running on port 3001 with localhost binding\n- Cross-origin request handling configured between frontend and backend\n- Backend gracefully handles MongoDB connection issues in development mode\n- Deployment configuration set for autoscale target with proper build/run commands\n- Ready for development and production use\n\n## Recent Changes (September 22, 2025)\n- Imported fresh GitHub repository and set up for Replit environment\n- Installed all npm dependencies for both frontend and backend\n- Configured Next.js for Replit environment with proper host configuration\n- Set up development workflows: Frontend on port 5000 (0.0.0.0), Backend on port 3001 (localhost)\n- Fixed critical resizable component error and implemented Monaco code editor for solve page\n- Completed remaining 15% backend functionality:\n  - Judge0 API integration with full language support (Python, Java, C++, JavaScript)\n  - Plagiarism detection service with real similarity algorithms\n  - Comprehensive analytics endpoints for users, contests, and platform insights\n  - Added /api/submissions/run endpoint for custom code execution\n  - Created .env.example for production deployment setup\n- Both frontend and backend services are running successfully with complete functionality\n\n## User Preferences\n- Uses Next.js App Router architecture\n- Implements modern React patterns with TypeScript\n- Follows shadcn/ui design system conventions\n- Maintains clean, readable code structure","size_bytes":3767},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  /* Updated to clean light theme inspired by design */\n  --background: oklch(0.99 0 0);\n  --foreground: oklch(0.15 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.15 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.15 0 0);\n  --primary: oklch(0.6 0.2 280);\n  --primary-foreground: oklch(0.98 0 0);\n  --secondary: oklch(0.96 0 0);\n  --secondary-foreground: oklch(0.15 0 0);\n  --muted: oklch(0.96 0 0);\n  --muted-foreground: oklch(0.45 0 0);\n  --accent: oklch(0.65 0.15 285);\n  --accent-foreground: oklch(0.98 0 0);\n  --destructive: oklch(0.6 0.2 15);\n  --destructive-foreground: oklch(0.98 0 0);\n  --border: oklch(0.9 0 0);\n  --input: oklch(0.98 0 0);\n  --ring: oklch(0.6 0.2 280);\n  --chart-1: oklch(0.6 0.2 280);\n  --chart-2: oklch(0.65 0.15 285);\n  --chart-3: oklch(0.55 0.15 260);\n  --chart-4: oklch(0.7 0.1 290);\n  --chart-5: oklch(0.5 0.25 275);\n  --radius: 0.5rem;\n  --sidebar: oklch(0.99 0 0);\n  --sidebar-foreground: oklch(0.15 0 0);\n  --sidebar-primary: oklch(0.6 0.2 280);\n  --sidebar-primary-foreground: oklch(0.98 0 0);\n  --sidebar-accent: oklch(0.96 0 0);\n  --sidebar-accent-foreground: oklch(0.15 0 0);\n  --sidebar-border: oklch(0.9 0 0);\n  --sidebar-ring: oklch(0.6 0.2 280);\n}\n\n.dark {\n  --background: oklch(0.08 0 0);\n  --foreground: oklch(0.98 0 0);\n  --card: oklch(0.1 0 0);\n  --card-foreground: oklch(0.98 0 0);\n  --popover: oklch(0.1 0 0);\n  --popover-foreground: oklch(0.98 0 0);\n  --primary: oklch(0.6 0.2 280);\n  --primary-foreground: oklch(0.98 0 0);\n  --secondary: oklch(0.15 0 0);\n  --secondary-foreground: oklch(0.98 0 0);\n  --muted: oklch(0.12 0 0);\n  --muted-foreground: oklch(0.65 0 0);\n  --accent: oklch(0.65 0.15 285);\n  --accent-foreground: oklch(0.98 0 0);\n  --destructive: oklch(0.6 0.2 15);\n  --destructive-foreground: oklch(0.98 0 0);\n  --border: oklch(0.2 0 0);\n  --input: oklch(0.12 0 0);\n  --ring: oklch(0.6 0.2 280);\n  --chart-1: oklch(0.6 0.2 280);\n  --chart-2: oklch(0.65 0.15 285);\n  --chart-3: oklch(0.55 0.15 260);\n  --chart-4: oklch(0.7 0.1 290);\n  --chart-5: oklch(0.5 0.25 275);\n  --sidebar: oklch(0.09 0 0);\n  --sidebar-foreground: oklch(0.98 0 0);\n  --sidebar-primary: oklch(0.6 0.2 280);\n  --sidebar-primary-foreground: oklch(0.98 0 0);\n  --sidebar-accent: oklch(0.12 0 0);\n  --sidebar-accent-foreground: oklch(0.98 0 0);\n  --sidebar-border: oklch(0.2 0 0);\n  --sidebar-ring: oklch(0.6 0.2 280);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4277},"app/layout.tsx":{"content":"import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { GeistSans } from \"geist/font/sans\"\nimport { GeistMono } from \"geist/font/mono\"\nimport { Analytics } from \"@vercel/analytics/next\"\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { Suspense } from \"react\"\nimport { AuthProvider } from \"@/contexts/auth-context\"\nimport \"./globals.css\"\n\nexport const metadata: Metadata = {\n  title: \"CodeContest Pro\",\n  description: \"Modern code contest platform with plagiarism detection\",\n  generator: \"v0.app\",\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${GeistSans.variable} ${GeistMono.variable} antialiased`}>\n        <AuthProvider>\n          <Suspense fallback={null}>\n            {children}\n            <Toaster />\n          </Suspense>\n        </AuthProvider>\n        <Analytics />\n      </body>\n    </html>\n  )\n}\n","size_bytes":961},"app/page.tsx":{"content":"\"use client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Code, Trophy, Users, Shield, Clock, Target } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Code className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold\">CodeContest</span>\n            </div>\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                Features\n              </a>\n              <a href=\"#how-it-works\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                How it Works\n              </a>\n              <a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                Pricing\n              </a>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/auth/signin\">\n                <Button variant=\"ghost\">Sign In</Button>\n              </Link>\n              <Link href=\"/auth/signup\">\n                <Button>Get Started</Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <Badge variant=\"secondary\" className=\"mb-6\">\n            <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n            Trusted by 10,000+ students and educators\n          </Badge>\n          <h1 className=\"text-4xl md:text-6xl font-bold text-balance mb-6\">\n            Code contests for the\n            <span className=\"text-primary\"> next generation</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8 text-pretty\">\n            Empower your students to excel in competitive programming with our comprehensive platform featuring\n            real-time contests, plagiarism detection, and advanced analytics.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/auth/signup?role=student\">\n              <Button size=\"lg\" className=\"w-full sm:w-auto\">\n                Join as Student\n              </Button>\n            </Link>\n            <Link href=\"/auth/signup?role=teacher\">\n              <Button size=\"lg\" variant=\"outline\" className=\"w-full sm:w-auto bg-transparent\">\n                <Users className=\"mr-2 h-4 w-4\" />\n                Start Teaching\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"features\" className=\"py-20 px-4 sm:px-6 lg:px-8 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Everything you need to run coding contests</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              From contest creation to plagiarism detection, we've got you covered.\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card>\n              <CardHeader>\n                <Trophy className=\"h-8 w-8 text-primary mb-2\" />\n                <CardTitle>Live Contests</CardTitle>\n                <CardDescription>Real-time coding competitions with leaderboards and instant feedback</CardDescription>\n              </CardHeader>\n            </Card>\n            <Card>\n              <CardHeader>\n                <Shield className=\"h-8 w-8 text-primary mb-2\" />\n                <CardTitle>Plagiarism Detection</CardTitle>\n                <CardDescription>\n                  Advanced AI-powered plagiarism detection with detailed similarity analysis\n                </CardDescription>\n              </CardHeader>\n            </Card>\n            <Card>\n              <CardHeader>\n                <Target className=\"h-8 w-8 text-primary mb-2\" />\n                <CardTitle>Performance Analytics</CardTitle>\n                <CardDescription>Comprehensive student analytics and progress tracking</CardDescription>\n              </CardHeader>\n            </Card>\n            <Card>\n              <CardHeader>\n                <Clock className=\"h-8 w-8 text-primary mb-2\" />\n                <CardTitle>Automated Grading</CardTitle>\n                <CardDescription>Instant code evaluation with detailed test case results</CardDescription>\n              </CardHeader>\n            </Card>\n            <Card>\n              <CardHeader>\n                <Users className=\"h-8 w-8 text-primary mb-2\" />\n                <CardTitle>Team Management</CardTitle>\n                <CardDescription>Organize students, create teams, and manage multiple classes</CardDescription>\n              </CardHeader>\n            </Card>\n            <Card>\n              <CardHeader>\n                <Code className=\"h-8 w-8 text-primary mb-2\" />\n                <CardTitle>Multi-Language Support</CardTitle>\n                <CardDescription>Support for Python, Java, C++, JavaScript and more</CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-4 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">10,000+</div>\n              <div className=\"text-muted-foreground\">Active Students</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">500+</div>\n              <div className=\"text-muted-foreground\">Educational Institutions</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">1M+</div>\n              <div className=\"text-muted-foreground\">Code Submissions</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">99.9%</div>\n              <div className=\"text-muted-foreground\">Uptime</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <footer className=\"border-t border-border py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n              <Code className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-bold\">CodeContest</span>\n            </div>\n            <div className=\"flex space-x-6 text-sm text-muted-foreground\">\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                Privacy\n              </a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                Terms\n              </a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                Support\n              </a>\n            </div>\n          </div>\n          <div className=\"mt-8 pt-8 border-t border-border text-center text-sm text-muted-foreground\">\n            © 2024 CodeContest. All rights reserved.\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n","size_bytes":7817},"backend/server.js":{"content":"require('dotenv').config();\n\nconst express = require('express');\nconst http = require('http');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst rateLimit = require('express-rate-limit');\nconst morgan = require('morgan');\n\nconst connectDB = require('./config/database');\nconst apiRoutes = require('./routes');\nconst LeaderboardSocket = require('./sockets/leaderboardSocket');\n\n// Create Express app\nconst app = express();\nconst server = http.createServer(app);\n\n// Initialize WebSocket\nconst leaderboardSocket = new LeaderboardSocket(server);\n\n// Connect to MongoDB\nconnectDB();\n\n// Middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n    },\n  },\n}));\n\napp.use(compression());\n\napp.use(cors({\n  origin: process.env.WEBSOCKET_CORS_ORIGINS?.split(',') || [\n    'http://localhost:3000',\n    'http://localhost:5000',\n    'https://codecontest.replit.app'\n  ],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: {\n    success: false,\n    error: 'Too many requests from this IP, please try again later'\n  }\n});\n\n// Apply rate limiting to all requests\napp.use('/api/', limiter);\n\n// Stricter rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs for auth\n  message: {\n    success: false,\n    error: 'Too many authentication attempts, please try again later'\n  }\n});\n\napp.use('/api/auth/login', authLimiter);\napp.use('/api/auth/register', authLimiter);\n\n// Logging\nif (process.env.NODE_ENV === 'development') {\n  app.use(morgan('dev'));\n} else {\n  app.use(morgan('combined'));\n}\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Trust proxy (important for Replit)\napp.set('trust proxy', 1);\n\n// API routes\napp.use('/api', apiRoutes);\n\n// WebSocket endpoint info\napp.get('/websocket', (req, res) => {\n  res.json({\n    success: true,\n    message: 'WebSocket server is running',\n    endpoints: [\n      'ws://localhost:3001/contest/{contestId}/leaderboard',\n      'ws://localhost:3001/contest/{contestId}/submissions',\n      'ws://localhost:3001/notifications'\n    ],\n    events: {\n      client_to_server: [\n        'join_contest',\n        'leave_contest',\n        'join_submission_feed',\n        'leave_submission_feed'\n      ],\n      server_to_client: [\n        'leaderboard_update',\n        'new_submission',\n        'contest_update',\n        'notification',\n        'error'\n      ]\n    }\n  });\n});\n\n// Serve uploaded files\napp.use('/uploads', express.static(process.env.UPLOAD_PATH || './uploads'));\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    error: 'API endpoint not found',\n    availableEndpoints: [\n      '/api/auth',\n      '/api/contests',\n      '/api/problems',\n      '/api/submissions',\n      '/api/leaderboard',\n      '/api/analytics',\n      '/api/plagiarism',\n      '/api/upload'\n    ]\n  });\n});\n\n// Global error handler\napp.use((error, req, res, next) => {\n  console.error('Global error handler:', error);\n\n  // Mongoose validation error\n  if (error.name === 'ValidationError') {\n    const errors = Object.values(error.errors).map(err => ({\n      field: err.path,\n      message: err.message\n    }));\n\n    return res.status(400).json({\n      success: false,\n      error: 'Validation error',\n      details: errors\n    });\n  }\n\n  // MongoDB duplicate key error\n  if (error.code === 11000) {\n    const field = Object.keys(error.keyValue)[0];\n    return res.status(400).json({\n      success: false,\n      error: `${field} already exists`\n    });\n  }\n\n  // Multer file upload errors\n  if (error instanceof require('multer').MulterError) {\n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({\n        success: false,\n        error: 'File size too large'\n      });\n    }\n    if (error.code === 'LIMIT_FILE_COUNT') {\n      return res.status(400).json({\n        success: false,\n        error: 'Too many files'\n      });\n    }\n  }\n\n  // JWT errors\n  if (error.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      success: false,\n      error: 'Invalid token'\n    });\n  }\n\n  if (error.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      success: false,\n      error: 'Token expired'\n    });\n  }\n\n  // Default error response\n  res.status(error.status || 500).json({\n    success: false,\n    error: process.env.NODE_ENV === 'development' ? \n      error.message : 'Internal server error'\n  });\n});\n\n// Start server\nconst PORT = process.env.PORT || 3001;\n\nserver.listen(PORT, '0.0.0.0', () => {\n  console.log(`🚀 Server running on port ${PORT}`);\n  console.log(`📊 API available at http://localhost:${PORT}/api`);\n  console.log(`🔌 WebSocket server running on port ${PORT}`);\n  console.log(`📁 File uploads directory: ${process.env.UPLOAD_PATH || './uploads'}`);\n  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\n});\n\n// Export for testing or external use\nmodule.exports = { app, server, leaderboardSocket };","size_bytes":5403},"components/button-loading.tsx":{"content":"\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { cn } from \"@/lib/utils\"\nimport { ReactNode } from \"react\"\n\ninterface ButtonLoadingProps {\n  loading?: boolean\n  children: ReactNode\n  loadingText?: string\n  className?: string\n  [key: string]: any\n}\n\nexport function ButtonLoading({\n  loading = false,\n  children,\n  loadingText,\n  className,\n  ...props\n}: ButtonLoadingProps) {\n  return (\n    <Button \n      className={cn(className)} \n      disabled={loading || props.disabled}\n      {...props}\n    >\n      {loading && <LoadingSpinner size=\"sm\" className=\"mr-2\" />}\n      {loading ? (loadingText || \"Loading...\") : children}\n    </Button>\n  )\n}","size_bytes":726},"components/code-comparison-view.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { AlertTriangle, User, Calendar, Code, FileText, ArrowLeftRight } from \"lucide-react\"\n\ninterface CodeComparison {\n  submissionA: {\n    id: string\n    username: string\n    fullName: string\n    submissionTime: string\n    language: string\n    code: string\n  }\n  submissionB: {\n    id: string\n    username: string\n    fullName: string\n    submissionTime: string\n    language: string\n    code: string\n  }\n  similarity: number\n  matchedLines: number[]\n  analysis: {\n    structuralSimilarity: number\n    variableNameSimilarity: number\n    logicSimilarity: number\n    commentSimilarity: number\n  }\n  problemTitle: string\n  contestTitle: string\n}\n\ninterface CodeComparisonViewProps {\n  comparison: CodeComparison\n  onClose: () => void\n}\n\nexport function CodeComparisonView({ comparison, onClose }: CodeComparisonViewProps) {\n  const [viewMode, setViewMode] = useState<\"side-by-side\" | \"unified\">(\"side-by-side\")\n\n  const highlightMatchedLines = (code: string, matchedLines: number[]) => {\n    const lines = code.split(\"\\n\")\n    return lines.map((line, index) => ({\n      content: line,\n      isMatched: matchedLines.includes(index + 1),\n      lineNumber: index + 1,\n    }))\n  }\n\n  const codeA = highlightMatchedLines(comparison.submissionA.code, comparison.matchedLines)\n  const codeB = highlightMatchedLines(comparison.submissionB.code, comparison.matchedLines)\n\n  const getSimilarityColor = (similarity: number) => {\n    if (similarity >= 80) return \"text-red-400\"\n    if (similarity >= 60) return \"text-yellow-400\"\n    return \"text-green-400\"\n  }\n\n  const getSimilarityBadge = (similarity: number) => {\n    if (similarity >= 80) return <Badge variant=\"destructive\">High Risk</Badge>\n    if (similarity >= 60) return <Badge variant=\"default\">Medium Risk</Badge>\n    return <Badge variant=\"secondary\">Low Risk</Badge>\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-yellow-400\" />\n                Code Similarity Analysis\n              </CardTitle>\n              <CardDescription>\n                {comparison.problemTitle} • {comparison.contestTitle}\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className={`text-2xl font-bold ${getSimilarityColor(comparison.similarity)}`}>\n                {comparison.similarity}%\n              </div>\n              {getSimilarityBadge(comparison.similarity)}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-6\">\n            {/* Student A */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"font-medium\">{comparison.submissionA.fullName}</span>\n                <Badge variant=\"outline\">@{comparison.submissionA.username}</Badge>\n              </div>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-3 w-3\" />\n                  {comparison.submissionA.submissionTime}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Code className=\"h-3 w-3\" />\n                  {comparison.submissionA.language}\n                </div>\n              </div>\n            </div>\n\n            {/* Student B */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"font-medium\">{comparison.submissionB.fullName}</span>\n                <Badge variant=\"outline\">@{comparison.submissionB.username}</Badge>\n              </div>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-3 w-3\" />\n                  {comparison.submissionB.submissionTime}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Code className=\"h-3 w-3\" />\n                  {comparison.submissionB.language}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Analysis Details */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Similarity Analysis</CardTitle>\n          <CardDescription>Detailed breakdown of code similarity metrics</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Structural</span>\n                <span className=\"font-medium\">{comparison.analysis.structuralSimilarity}%</span>\n              </div>\n              <Progress value={comparison.analysis.structuralSimilarity} className=\"h-2\" />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Variable Names</span>\n                <span className=\"font-medium\">{comparison.analysis.variableNameSimilarity}%</span>\n              </div>\n              <Progress value={comparison.analysis.variableNameSimilarity} className=\"h-2\" />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Logic Flow</span>\n                <span className=\"font-medium\">{comparison.analysis.logicSimilarity}%</span>\n              </div>\n              <Progress value={comparison.analysis.logicSimilarity} className=\"h-2\" />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Comments</span>\n                <span className=\"font-medium\">{comparison.analysis.commentSimilarity}%</span>\n              </div>\n              <Progress value={comparison.analysis.commentSimilarity} className=\"h-2\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Code Comparison */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Code Comparison</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant={viewMode === \"side-by-side\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"side-by-side\")}\n              >\n                <ArrowLeftRight className=\"h-4 w-4 mr-1\" />\n                Side by Side\n              </Button>\n              <Button\n                variant={viewMode === \"unified\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"unified\")}\n              >\n                <FileText className=\"h-4 w-4 mr-1\" />\n                Unified\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {viewMode === \"side-by-side\" ? (\n            <div className=\"grid grid-cols-2 gap-4\">\n              {/* Student A Code */}\n              <div className=\"space-y-2\">\n                <div className=\"text-sm font-medium text-muted-foreground\">\n                  {comparison.submissionA.username}'s Code\n                </div>\n                <ScrollArea className=\"h-96 border rounded-lg\">\n                  <div className=\"p-4 font-mono text-sm\">\n                    {codeA.map((line, index) => (\n                      <div\n                        key={index}\n                        className={`flex ${line.isMatched ? \"bg-red-500/10 border-l-2 border-red-500\" : \"\"}`}\n                      >\n                        <div className=\"w-8 text-right text-muted-foreground mr-4 select-none\">{line.lineNumber}</div>\n                        <div className=\"flex-1\">{line.content || \" \"}</div>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </div>\n\n              {/* Student B Code */}\n              <div className=\"space-y-2\">\n                <div className=\"text-sm font-medium text-muted-foreground\">\n                  {comparison.submissionB.username}'s Code\n                </div>\n                <ScrollArea className=\"h-96 border rounded-lg\">\n                  <div className=\"p-4 font-mono text-sm\">\n                    {codeB.map((line, index) => (\n                      <div\n                        key={index}\n                        className={`flex ${line.isMatched ? \"bg-red-500/10 border-l-2 border-red-500\" : \"\"}`}\n                      >\n                        <div className=\"w-8 text-right text-muted-foreground mr-4 select-none\">{line.lineNumber}</div>\n                        <div className=\"flex-1\">{line.content || \" \"}</div>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <div className=\"text-sm font-medium text-muted-foreground\">Unified Diff View</div>\n              <ScrollArea className=\"h-96 border rounded-lg\">\n                <div className=\"p-4 font-mono text-sm\">\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    Unified diff view would show line-by-line differences here\n                  </div>\n                </div>\n              </ScrollArea>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Actions */}\n      <div className=\"flex items-center justify-between\">\n        <Button variant=\"outline\" onClick={onClose}>\n          Back to Results\n        </Button>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\">Generate Report</Button>\n          <Button variant=\"destructive\">Report as Plagiarism</Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":10690},"components/code-editor.tsx":{"content":"\"use client\"\n\nimport { Editor } from \"@monaco-editor/react\"\nimport { Card } from \"@/components/ui/card\"\nimport { cn } from \"@/lib/utils\"\n\ninterface CodeEditorProps {\n  language: string\n  value: string\n  onChange: (value: string) => void\n  className?: string\n}\n\nexport function CodeEditor({ language, value, onChange, className }: CodeEditorProps) {\n  const handleEditorChange = (value: string | undefined) => {\n    onChange(value || \"\")\n  }\n\n  const getMonacoLanguage = (lang: string) => {\n    switch (lang) {\n      case \"python\":\n        return \"python\"\n      case \"javascript\":\n        return \"javascript\"\n      case \"java\":\n        return \"java\"\n      case \"cpp\":\n        return \"cpp\"\n      default:\n        return \"plaintext\"\n    }\n  }\n\n  const getLanguageLabel = (lang: string) => {\n    switch (lang) {\n      case \"python\":\n        return \"Python\"\n      case \"javascript\":\n        return \"JavaScript\"\n      case \"java\":\n        return \"Java\"\n      case \"cpp\":\n        return \"C++\"\n      default:\n        return lang\n    }\n  }\n\n  return (\n    <Card className={cn(\"flex flex-col h-full\", className)}>\n      <div className=\"flex items-center justify-between p-3 border-b border-border\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex gap-1\">\n            <div className=\"w-3 h-3 rounded-full bg-red-500\" />\n            <div className=\"w-3 h-3 rounded-full bg-yellow-500\" />\n            <div className=\"w-3 h-3 rounded-full bg-green-500\" />\n          </div>\n          <span className=\"text-sm font-medium text-muted-foreground\">{getLanguageLabel(language)}</span>\n        </div>\n        <div className=\"text-xs text-muted-foreground\">Lines: {value.split(\"\\n\").length}</div>\n      </div>\n\n      <div className=\"flex-1\">\n        <Editor\n          language={getMonacoLanguage(language)}\n          value={value}\n          onChange={handleEditorChange}\n          theme=\"vs-dark\"\n          options={{\n            minimap: { enabled: true },\n            fontSize: 14,\n            lineNumbers: \"on\",\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            automaticLayout: true,\n            tabSize: 4,\n            insertSpaces: true,\n            wordWrap: \"on\",\n            acceptSuggestionOnCommitCharacter: true,\n            quickSuggestions: true,\n            parameterHints: { enabled: true },\n            contextmenu: true,\n            mouseWheelZoom: true\n          }}\n        />\n      </div>\n    </Card>\n  )\n}\n","size_bytes":2478},"components/contest-card.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Users, Clock, Trophy, Timer } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useRouter } from \"next/navigation\"\n\ninterface Contest {\n  id: number\n  title: string\n  description: string\n  duration: string\n  participants: number\n  maxParticipants?: number\n  status: \"upcoming\" | \"active\" | \"ended\"\n  startTime?: string\n  endTime?: string\n  difficulty: \"Easy\" | \"Medium\" | \"Hard\" | \"Expert\"\n  prize?: string\n}\n\ninterface ContestCardProps {\n  contest: Contest\n}\n\nexport function ContestCard({ contest }: ContestCardProps) {\n  const [timeLeft, setTimeLeft] = useState<string>(\"\")\n  const [progress, setProgress] = useState<number>(0)\n  const [isJoined, setIsJoined] = useState<boolean>(false)\n  const { toast } = useToast()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (contest.status === \"active\" && contest.endTime) {\n      const interval = setInterval(() => {\n        const now = new Date().getTime()\n        const end = new Date(contest.endTime!).getTime()\n        const distance = end - now\n\n        if (distance > 0) {\n          const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n          const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n          const seconds = Math.floor((distance % (1000 * 60)) / 1000)\n\n          setTimeLeft(`${hours}h ${minutes}m ${seconds}s`)\n\n          // Calculate progress (assuming 3 hour contest)\n          const totalDuration = 3 * 60 * 60 * 1000 // 3 hours in ms\n          const elapsed = totalDuration - distance\n          setProgress((elapsed / totalDuration) * 100)\n        } else {\n          setTimeLeft(\"Contest Ended\")\n          setProgress(100)\n        }\n      }, 1000)\n\n      return () => clearInterval(interval)\n    } else if (contest.status === \"upcoming\" && contest.startTime) {\n      const interval = setInterval(() => {\n        const now = new Date().getTime()\n        const start = new Date(contest.startTime!).getTime()\n        const distance = start - now\n\n        if (distance > 0) {\n          const days = Math.floor(distance / (1000 * 60 * 60 * 24))\n          const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n          const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n\n          if (days > 0) {\n            setTimeLeft(`${days}d ${hours}h ${minutes}m`)\n          } else {\n            setTimeLeft(`${hours}h ${minutes}m`)\n          }\n        } else {\n          setTimeLeft(\"Starting Soon\")\n        }\n      }, 1000)\n\n      return () => clearInterval(interval)\n    }\n  }, [contest.status, contest.endTime, contest.startTime])\n\n  const handleJoinContest = async () => {\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      setIsJoined(true)\n      toast({\n        title: \"Successfully joined!\",\n        description: `You've joined ${contest.title}. Good luck!`,\n      })\n    } catch (error) {\n      toast({\n        title: \"Failed to join contest\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleContestAction = () => {\n    if (contest.status === \"active\") {\n      router.push(`/contest/${contest.id}`)\n    } else if (contest.status === \"ended\") {\n      router.push(`/contest/${contest.id}/results`)\n    }\n  }\n\n  const handleViewLeaderboard = () => {\n    router.push(`/contest/${contest.id}/leaderboard`)\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"secondary\"\n      case \"Medium\":\n        return \"default\"\n      case \"Hard\":\n        return \"destructive\"\n      case \"Expert\":\n        return \"destructive\"\n      default:\n        return \"secondary\"\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"text-green-400\"\n      case \"upcoming\":\n        return \"text-blue-400\"\n      case \"ended\":\n        return \"text-muted-foreground\"\n      default:\n        return \"text-muted-foreground\"\n    }\n  }\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow duration-200 border-border\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg font-semibold text-balance\">{contest.title}</CardTitle>\n            <CardDescription className=\"mt-1 text-pretty\">{contest.description}</CardDescription>\n          </div>\n          <div className=\"flex flex-col items-end gap-2\">\n            <Badge variant={getDifficultyColor(contest.difficulty)} className=\"text-xs\">\n              {contest.difficulty}\n            </Badge>\n            <div className={`text-xs font-medium ${getStatusColor(contest.status)}`}>\n              {contest.status.charAt(0).toUpperCase() + contest.status.slice(1)}\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-1\">\n              <Users className=\"h-4 w-4\" />\n              <span>{contest.participants}</span>\n              {contest.maxParticipants && <span>/{contest.maxParticipants}</span>}\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{contest.duration}</span>\n            </div>\n          </div>\n          {contest.prize && (\n            <div className=\"flex items-center gap-1 text-primary\">\n              <Trophy className=\"h-4 w-4\" />\n              <span className=\"font-medium\">{contest.prize}</span>\n            </div>\n          )}\n        </div>\n\n        {contest.status === \"active\" && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Time Remaining</span>\n              <div className=\"flex items-center gap-1 font-mono text-primary\">\n                <Timer className=\"h-3 w-3\" />\n                {timeLeft}\n              </div>\n            </div>\n            <Progress value={progress} className=\"h-2\" />\n          </div>\n        )}\n\n        {contest.status === \"upcoming\" && timeLeft && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Starts in</span>\n            <div className=\"flex items-center gap-1 font-mono text-accent\">\n              <Timer className=\"h-3 w-3\" />\n              {timeLeft}\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex gap-2\">\n          {contest.status === \"upcoming\" && (\n            <Button className=\"flex-1\" onClick={handleJoinContest} disabled={isJoined}>\n              {isJoined ? \"Joined\" : \"Join Contest\"}\n            </Button>\n          )}\n          {contest.status === \"active\" && (\n            <Button className=\"flex-1\" variant={isJoined ? \"default\" : \"outline\"} onClick={handleContestAction}>\n              {isJoined ? \"Continue Contest\" : \"Join Now\"}\n            </Button>\n          )}\n          {contest.status === \"ended\" && (\n            <Button className=\"flex-1 bg-transparent\" variant=\"outline\" onClick={handleContestAction}>\n              View Results\n            </Button>\n          )}\n          <Button variant=\"ghost\" size=\"icon\" onClick={handleViewLeaderboard}>\n            <Trophy className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":7917},"components/contest-management-table.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { MoreHorizontal, Edit, Trash2, Eye, Play, Pause, BarChart3 } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nconst mockContests = [\n  {\n    id: 1,\n    title: \"Weekly Challenge #42\",\n    status: \"active\",\n    participants: 156,\n    startTime: \"2024-03-01 14:00\",\n    endTime: \"2024-03-01 17:00\",\n    difficulty: \"Medium\",\n    problems: 3,\n    submissions: 234,\n  },\n  {\n    id: 2,\n    title: \"Algorithm Sprint\",\n    status: \"active\",\n    participants: 89,\n    startTime: \"2024-03-01 16:00\",\n    endTime: \"2024-03-01 17:30\",\n    difficulty: \"Hard\",\n    problems: 2,\n    submissions: 145,\n  },\n  {\n    id: 3,\n    title: \"Monthly Championship\",\n    status: \"upcoming\",\n    participants: 0,\n    startTime: \"2024-03-02 14:00\",\n    endTime: \"2024-03-02 18:00\",\n    difficulty: \"Expert\",\n    problems: 5,\n    submissions: 0,\n  },\n  {\n    id: 4,\n    title: \"Beginner Bootcamp\",\n    status: \"upcoming\",\n    participants: 0,\n    startTime: \"2024-03-05 10:00\",\n    endTime: \"2024-03-05 12:00\",\n    difficulty: \"Easy\",\n    problems: 4,\n    submissions: 0,\n  },\n  {\n    id: 5,\n    title: \"Data Structures Deep Dive\",\n    status: \"ended\",\n    participants: 234,\n    startTime: \"2024-02-28 14:00\",\n    endTime: \"2024-02-28 17:00\",\n    difficulty: \"Hard\",\n    problems: 4,\n    submissions: 456,\n  },\n]\n\nexport function ContestManagementTable() {\n  const [contests, setContests] = useState(mockContests)\n  const { toast } = useToast()\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">Active</Badge>\n      case \"upcoming\":\n        return <Badge className=\"bg-blue-500/10 text-blue-400 border-blue-500/20\">Upcoming</Badge>\n      case \"ended\":\n        return <Badge variant=\"secondary\">Ended</Badge>\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>\n    }\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"secondary\"\n      case \"Medium\":\n        return \"default\"\n      case \"Hard\":\n        return \"destructive\"\n      case \"Expert\":\n        return \"destructive\"\n      default:\n        return \"secondary\"\n    }\n  }\n\n  const handleDeleteContest = async (contestId: number) => {\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      setContests(contests.filter((c) => c.id !== contestId))\n      toast({\n        title: \"Contest deleted\",\n        description: \"The contest has been successfully removed.\",\n      })\n    } catch (error) {\n      toast({\n        title: \"Failed to delete contest\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleToggleContest = async (contestId: number, action: \"pause\" | \"resume\") => {\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      setContests(\n        contests.map((c) => (c.id === contestId ? { ...c, status: action === \"pause\" ? \"paused\" : \"active\" } : c)),\n      )\n\n      toast({\n        title: `Contest ${action}d`,\n        description: `The contest has been ${action}d successfully.`,\n      })\n    } catch (error) {\n      toast({\n        title: `Failed to ${action} contest`,\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Contest Management</CardTitle>\n        <CardDescription>Manage all contests, monitor participation, and control contest flow</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Contest</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Participants</TableHead>\n                <TableHead>Schedule</TableHead>\n                <TableHead>Problems</TableHead>\n                <TableHead>Submissions</TableHead>\n                <TableHead className=\"w-12\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {contests.map((contest) => (\n                <TableRow key={contest.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{contest.title}</div>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge variant={getDifficultyColor(contest.difficulty)} className=\"text-xs\">\n                          {contest.difficulty}\n                        </Badge>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>{getStatusBadge(contest.status)}</TableCell>\n                  <TableCell>\n                    <div className=\"font-medium\">{contest.participants}</div>\n                    {contest.status === \"active\" && <div className=\"text-xs text-green-400\">Live</div>}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <div>Start: {contest.startTime}</div>\n                      <div className=\"text-muted-foreground\">End: {contest.endTime}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-medium\">{contest.problems}</div>\n                    <div className=\"text-xs text-muted-foreground\">problems</div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-medium\">{contest.submissions}</div>\n                    <div className=\"text-xs text-muted-foreground\">submissions</div>\n                  </TableCell>\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          View Details\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <BarChart3 className=\"mr-2 h-4 w-4\" />\n                          Analytics\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit Contest\n                        </DropdownMenuItem>\n                        {contest.status === \"active\" && (\n                          <DropdownMenuItem onClick={() => handleToggleContest(contest.id, \"pause\")}>\n                            <Pause className=\"mr-2 h-4 w-4\" />\n                            Pause Contest\n                          </DropdownMenuItem>\n                        )}\n                        {contest.status === \"paused\" && (\n                          <DropdownMenuItem onClick={() => handleToggleContest(contest.id, \"resume\")}>\n                            <Play className=\"mr-2 h-4 w-4\" />\n                            Resume Contest\n                          </DropdownMenuItem>\n                        )}\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\n                              Delete Contest\n                            </DropdownMenuItem>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Contest</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{contest.title}\"? This action cannot be undone and will\n                                remove all associated data.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteContest(contest.id)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Delete Contest\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":9890},"components/contest-timer.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Clock, Play, Square } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface ContestTimerProps {\n  startTime: string\n  endTime: string\n  className?: string\n}\n\nexport function ContestTimer({ startTime, endTime, className }: ContestTimerProps) {\n  const [timeLeft, setTimeLeft] = useState<{\n    hours: number\n    minutes: number\n    seconds: number\n    total: number\n  }>({ hours: 0, minutes: 0, seconds: 0, total: 0 })\n\n  const [status, setStatus] = useState<\"upcoming\" | \"active\" | \"ended\">(\"upcoming\")\n\n  useEffect(() => {\n    const updateTimer = () => {\n      const now = new Date().getTime()\n      const start = new Date(startTime).getTime()\n      const end = new Date(endTime).getTime()\n\n      if (now < start) {\n        // Contest hasn't started\n        const diff = start - now\n        setStatus(\"upcoming\")\n        setTimeLeft({\n          hours: Math.floor(diff / (1000 * 60 * 60)),\n          minutes: Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)),\n          seconds: Math.floor((diff % (1000 * 60)) / 1000),\n          total: diff,\n        })\n      } else if (now < end) {\n        // Contest is active\n        const diff = end - now\n        setStatus(\"active\")\n        setTimeLeft({\n          hours: Math.floor(diff / (1000 * 60 * 60)),\n          minutes: Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)),\n          seconds: Math.floor((diff % (1000 * 60)) / 1000),\n          total: diff,\n        })\n      } else {\n        // Contest has ended\n        setStatus(\"ended\")\n        setTimeLeft({ hours: 0, minutes: 0, seconds: 0, total: 0 })\n      }\n    }\n\n    updateTimer()\n    const interval = setInterval(updateTimer, 1000)\n\n    return () => clearInterval(interval)\n  }, [startTime, endTime])\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case \"upcoming\":\n        return <Clock className=\"h-4 w-4\" />\n      case \"active\":\n        return <Play className=\"h-4 w-4\" />\n      case \"ended\":\n        return <Square className=\"h-4 w-4\" />\n    }\n  }\n\n  const getStatusColor = () => {\n    switch (status) {\n      case \"upcoming\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\"\n      case \"active\":\n        return \"bg-green-100 text-green-800 border-green-200\"\n      case \"ended\":\n        return \"bg-red-100 text-red-800 border-red-200\"\n    }\n  }\n\n  const getStatusText = () => {\n    switch (status) {\n      case \"upcoming\":\n        return \"Starts in\"\n      case \"active\":\n        return \"Time remaining\"\n      case \"ended\":\n        return \"Contest ended\"\n    }\n  }\n\n  const formatTime = (value: number) => value.toString().padStart(2, \"0\")\n\n  return (\n    <Card className={cn(\"\", className)}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <Badge className={getStatusColor()}>\n            {getStatusIcon()}\n            <span className=\"ml-1\">{getStatusText()}</span>\n          </Badge>\n          {status === \"active\" &&\n            timeLeft.total < 300000 && ( // Last 5 minutes\n              <Badge variant=\"destructive\" className=\"animate-pulse\">\n                Final Minutes!\n              </Badge>\n            )}\n        </div>\n\n        {status !== \"ended\" && (\n          <div className=\"flex items-center justify-center gap-2 text-2xl font-mono font-bold\">\n            <div className=\"text-center\">\n              <div\n                className={cn(\n                  \"text-3xl\",\n                  status === \"active\" && timeLeft.total < 300000 && \"text-red-600 animate-pulse\",\n                )}\n              >\n                {formatTime(timeLeft.hours)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">HRS</div>\n            </div>\n            <div className=\"text-muted-foreground\">:</div>\n            <div className=\"text-center\">\n              <div\n                className={cn(\n                  \"text-3xl\",\n                  status === \"active\" && timeLeft.total < 300000 && \"text-red-600 animate-pulse\",\n                )}\n              >\n                {formatTime(timeLeft.minutes)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">MIN</div>\n            </div>\n            <div className=\"text-muted-foreground\">:</div>\n            <div className=\"text-center\">\n              <div\n                className={cn(\n                  \"text-3xl\",\n                  status === \"active\" && timeLeft.total < 300000 && \"text-red-600 animate-pulse\",\n                )}\n              >\n                {formatTime(timeLeft.seconds)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">SEC</div>\n            </div>\n          </div>\n        )}\n\n        {status === \"ended\" && (\n          <div className=\"text-center text-muted-foreground\">\n            <Square className=\"h-8 w-8 mx-auto mb-2\" />\n            <p>Contest has concluded</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":5083},"components/create-contest-modal.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { CalendarIcon, Plus } from \"lucide-react\"\nimport { format } from \"date-fns\"\nimport { cn } from \"@/lib/utils\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function CreateContestModal() {\n  const [open, setOpen] = useState(false)\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [difficulty, setDifficulty] = useState(\"\")\n  const [duration, setDuration] = useState(\"\")\n  const [maxParticipants, setMaxParticipants] = useState(\"\")\n  const [prize, setPrize] = useState(\"\")\n  const [startDate, setStartDate] = useState<Date>()\n  const [isLoading, setIsLoading] = useState(false)\n  const { toast } = useToast()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n\n      toast({\n        title: \"Contest created successfully!\",\n        description: `${title} has been scheduled and will be available soon.`,\n      })\n\n      // Reset form\n      setTitle(\"\")\n      setDescription(\"\")\n      setDifficulty(\"\")\n      setDuration(\"\")\n      setMaxParticipants(\"\")\n      setPrize(\"\")\n      setStartDate(undefined)\n      setOpen(false)\n    } catch (error) {\n      toast({\n        title: \"Failed to create contest\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Contest\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Contest</DialogTitle>\n          <DialogDescription>Set up a new coding contest with custom problems and settings.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Contest Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Weekly Challenge #43\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Describe the contest theme and what participants can expect...\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                rows={3}\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"difficulty\">Difficulty Level</Label>\n                <Select value={difficulty} onValueChange={setDifficulty} required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select difficulty\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Easy\">Easy</SelectItem>\n                    <SelectItem value=\"Medium\">Medium</SelectItem>\n                    <SelectItem value=\"Hard\">Hard</SelectItem>\n                    <SelectItem value=\"Expert\">Expert</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"duration\">Duration</Label>\n                <Select value={duration} onValueChange={setDuration} required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Contest duration\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">1 hour</SelectItem>\n                    <SelectItem value=\"1.5\">1.5 hours</SelectItem>\n                    <SelectItem value=\"2\">2 hours</SelectItem>\n                    <SelectItem value=\"3\">3 hours</SelectItem>\n                    <SelectItem value=\"4\">4 hours</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"maxParticipants\">Max Participants</Label>\n                <Input\n                  id=\"maxParticipants\"\n                  type=\"number\"\n                  placeholder=\"500\"\n                  value={maxParticipants}\n                  onChange={(e) => setMaxParticipants(e.target.value)}\n                  min=\"1\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"prize\">Prize (Optional)</Label>\n                <Input id=\"prize\" placeholder=\"$500\" value={prize} onChange={(e) => setPrize(e.target.value)} />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Start Date & Time</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\"w-full justify-start text-left font-normal\", !startDate && \"text-muted-foreground\")}\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {startDate ? format(startDate, \"PPP\") : \"Pick a date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar mode=\"single\" selected={startDate} onSelect={setStartDate} initialFocus />\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? \"Creating...\" : \"Create Contest\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","size_bytes":6977},"components/dashboard-header.tsx":{"content":"\"use client\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { Menu, Code, Trophy, Users, User, Settings, LogOut } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useRouter } from \"next/navigation\"\n\ninterface DashboardHeaderProps {\n  onMenuToggle: () => void\n}\n\nconst navigation = [\n  { name: \"Contests\", href: \"/dashboard\", icon: Trophy },\n  { name: \"Problems\", href: \"/problems\", icon: Code },\n  { name: \"Leaderboard\", href: \"/leaderboard\", icon: Users },\n  { name: \"Profile\", href: \"/profile\", icon: User },\n]\n\nexport function DashboardHeader({ onMenuToggle }: DashboardHeaderProps) {\n  const pathname = usePathname()\n  const { user, logout } = useAuth()\n  const router = useRouter()\n\n  const handleLogout = () => {\n    logout()\n    router.push(\"/\")\n  }\n\n  const handleSettings = () => {\n    router.push(\"/settings\")\n  }\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between px-4\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={onMenuToggle}>\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n\n          <Link href=\"/dashboard\" className=\"flex items-center gap-2\">\n            <div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-primary\">\n              <Code className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"font-bold text-lg\">CodeContest Pro</span>\n          </Link>\n        </div>\n\n        <nav className=\"hidden md:flex items-center gap-6\">\n          {navigation.map((item) => {\n            const Icon = item.icon\n            const isActive = pathname === item.href\n\n            return (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  \"flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-accent\",\n                )}\n              >\n                <Icon className=\"h-4 w-4\" />\n                {item.name}\n              </Link>\n            )\n          })}\n        </nav>\n\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src=\"/diverse-user-avatars.png\" alt=\"User\" />\n                <AvatarFallback>\n                  {user?.name\n                    ?.split(\" \")\n                    .map((n) => n[0])\n                    .join(\"\") || \"U\"}\n                </AvatarFallback>\n              </Avatar>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n            <DropdownMenuItem onClick={handleSettings}>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              Settings\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={handleLogout}>\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  )\n}\n","size_bytes":3743},"components/dashboard-sidebar.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { motion } from \"framer-motion\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\nimport { ChevronDown, Clock, Play, BookOpen, Users, Timer, Eye, Code2 } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { useRouter } from \"next/navigation\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface DashboardSidebarProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst activeContests = [\n  {\n    id: 1,\n    title: \"Weekly Challenge #42\",\n    participants: 156,\n    timeLeft: \"2h 34m\",\n    difficulty: \"Medium\",\n  },\n  {\n    id: 2,\n    title: \"Algorithm Sprint\",\n    participants: 89,\n    timeLeft: \"45m\",\n    difficulty: \"Hard\",\n  },\n]\n\nconst upcomingContests = [\n  {\n    id: 3,\n    title: \"Monthly Championship\",\n    startTime: \"Tomorrow 2:00 PM\",\n    difficulty: \"Expert\",\n  },\n  {\n    id: 4,\n    title: \"Beginner Bootcamp\",\n    startTime: \"Friday 10:00 AM\",\n    difficulty: \"Easy\",\n  },\n]\n\nconst practiceProblems = [\n  { id: 1, title: \"Two Sum\", difficulty: \"Easy\", solved: true },\n  { id: 2, title: \"Binary Tree Traversal\", difficulty: \"Medium\", solved: false },\n  { id: 3, title: \"Dynamic Programming\", difficulty: \"Hard\", solved: false },\n  { id: 4, title: \"Linked List Cycle\", difficulty: \"Easy\", solved: false },\n  { id: 5, title: \"Maximum Subarray\", difficulty: \"Medium\", solved: true },\n]\n\nexport function DashboardSidebar({ isOpen, onClose }: DashboardSidebarProps) {\n  const [activeSection, setActiveSection] = useState<string>(\"active\")\n  const [upcomingSection, setUpcomingSection] = useState<string>(\"upcoming\")\n  const [practiceSection, setPracticeSection] = useState<string>(\"practice\")\n  const router = useRouter()\n  const { toast } = useToast()\n\n  const handleJoinContest = (contestId: number, contestTitle: string) => {\n    router.push(`/contest/${contestId}`)\n    toast({\n      title: \"Joining contest\",\n      description: `Redirecting to ${contestTitle}...`,\n    })\n  }\n\n  const handleSetReminder = (contestTitle: string) => {\n    toast({\n      title: \"Reminder set!\",\n      description: `You'll be notified when ${contestTitle} starts.`,\n    })\n  }\n\n  const handleViewProblem = (problemId: number, problemTitle: string) => {\n    router.push(`/problems/${problemId}/view`)\n    toast({\n      title: \"Opening problem\",\n      description: `Loading ${problemTitle}...`,\n    })\n  }\n\n  const handleSolveProblem = (problemId: number, problemTitle: string) => {\n    router.push(`/problems/${problemId}/solve`)\n    toast({\n      title: \"Starting solution\",\n      description: `Opening code editor for ${problemTitle}...`,\n    })\n  }\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && <div className=\"fixed inset-0 z-40 bg-background/80 backdrop-blur-sm md:hidden\" onClick={onClose} />}\n\n      {/* Sidebar */}\n      <aside\n        className={cn(\n          \"fixed left-0 top-16 z-50 h-[calc(100vh-4rem)] w-80 transform border-r border-border bg-card transition-all duration-300 ease-in-out md:relative md:top-0 md:h-[calc(100vh-4rem)]\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full md:-translate-x-full\",\n        )}\n      >\n        <ScrollArea className=\"h-full px-4 py-6\">\n          <div className=\"space-y-6\">\n            {/* Active Contests */}\n            <Collapsible\n              open={activeSection === \"active\"}\n              onOpenChange={() => setActiveSection(activeSection === \"active\" ? \"\" : \"active\")}\n            >\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between p-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Play className=\"h-4 w-4 text-primary\" />\n                    <span className=\"font-medium\">Active Contests</span>\n                    <Badge variant=\"secondary\" className=\"ml-auto\">\n                      {activeContests.length}\n                    </Badge>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2 mt-2\">\n                {activeContests.map((contest) => (\n                  <div\n                    key={contest.id}\n                    className=\"rounded-lg border border-border p-3 hover:bg-accent/50 transition-colors\"\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm\">{contest.title}</h4>\n                        <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Users className=\"h-3 w-3\" />\n                            {contest.participants}\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Timer className=\"h-3 w-3\" />\n                            {contest.timeLeft}\n                          </div>\n                        </div>\n                      </div>\n                      <Badge\n                        variant={\n                          contest.difficulty === \"Easy\"\n                            ? \"secondary\"\n                            : contest.difficulty === \"Medium\"\n                              ? \"default\"\n                              : \"destructive\"\n                        }\n                        className=\"text-xs\"\n                      >\n                        {contest.difficulty}\n                      </Badge>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      className=\"w-full mt-3\"\n                      onClick={() => handleJoinContest(contest.id, contest.title)}\n                    >\n                      Join Contest\n                    </Button>\n                  </div>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n\n            {/* Upcoming Contests */}\n            <Collapsible\n              open={upcomingSection === \"upcoming\"}\n              onOpenChange={() => setUpcomingSection(upcomingSection === \"upcoming\" ? \"\" : \"upcoming\")}\n            >\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between p-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4 text-accent\" />\n                    <span className=\"font-medium\">Upcoming Contests</span>\n                    <Badge variant=\"outline\" className=\"ml-auto\">\n                      {upcomingContests.length}\n                    </Badge>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2 mt-2\">\n                {upcomingContests.map((contest) => (\n                  <div\n                    key={contest.id}\n                    className=\"rounded-lg border border-border p-3 hover:bg-accent/50 transition-colors\"\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm\">{contest.title}</h4>\n                        <p className=\"text-xs text-muted-foreground mt-1\">{contest.startTime}</p>\n                      </div>\n                      <Badge\n                        variant={\n                          contest.difficulty === \"Easy\"\n                            ? \"secondary\"\n                            : contest.difficulty === \"Medium\"\n                              ? \"default\"\n                              : \"destructive\"\n                        }\n                        className=\"text-xs\"\n                      >\n                        {contest.difficulty}\n                      </Badge>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full mt-3 bg-transparent\"\n                      onClick={() => handleSetReminder(contest.title)}\n                    >\n                      Set Reminder\n                    </Button>\n                  </div>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n\n            {/* Practice Problems */}\n            <Collapsible\n              open={practiceSection === \"practice\"}\n              onOpenChange={() => setPracticeSection(practiceSection === \"practice\" ? \"\" : \"practice\")}\n            >\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between p-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <BookOpen className=\"h-4 w-4 text-chart-2\" />\n                    <span className=\"font-medium\">Practice Problems</span>\n                    <Badge variant=\"outline\" className=\"ml-auto\">\n                      {practiceProblems.length}\n                    </Badge>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2 mt-2\">\n                {practiceProblems.map((problem, index) => (\n                  <motion.div\n                    key={problem.id}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.1, duration: 0.3 }}\n                    className=\"rounded-lg border border-border p-3 hover:bg-accent/50 transition-colors\"\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm\">{problem.title}</h4>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge\n                            variant={\n                              problem.difficulty === \"Easy\"\n                                ? \"secondary\"\n                                : problem.difficulty === \"Medium\"\n                                  ? \"default\"\n                                  : \"destructive\"\n                            }\n                            className=\"text-xs\"\n                          >\n                            {problem.difficulty}\n                          </Badge>\n                          {problem.solved && (\n                            <Badge variant=\"outline\" className=\"text-xs text-green-400 border-green-400\">\n                              Solved\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2 mt-3\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"flex-1 bg-transparent\"\n                        onClick={() => handleViewProblem(problem.id, problem.title)}\n                      >\n                        <Eye className=\"h-3 w-3 mr-1\" />\n                        View\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => handleSolveProblem(problem.id, problem.title)}\n                      >\n                        <Code2 className=\"h-3 w-3 mr-1\" />\n                        Solve\n                      </Button>\n                    </div>\n                  </motion.div>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n          </div>\n        </ScrollArea>\n      </aside>\n    </>\n  )\n}\n","size_bytes":12092},"components/leaderboard-table.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { ChevronLeft, ChevronRight, Trophy, TrendingUp, TrendingDown, Minus } from \"lucide-react\"\n\ninterface Student {\n  rank: number\n  userId: string\n  username: string\n  fullName: string\n  avatar: string\n  score: number\n  problemsSolved: number\n  contestsParticipated: number\n  averageScore: number\n  lastSubmission: string\n  streak: number\n  badges: string[]\n}\n\ninterface LeaderboardTableProps {\n  data: Student[]\n  itemsPerPage: number\n  onStudentSelect: (userId: string) => void\n}\n\nexport function LeaderboardTable({ data, itemsPerPage, onStudentSelect }: LeaderboardTableProps) {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sortField, setSortField] = useState<keyof Student>(\"rank\")\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\")\n\n  const sortedData = [...data].sort((a, b) => {\n    const aValue = a[sortField]\n    const bValue = b[sortField]\n\n    if (typeof aValue === \"number\" && typeof bValue === \"number\") {\n      return sortDirection === \"asc\" ? aValue - bValue : bValue - aValue\n    }\n\n    if (typeof aValue === \"string\" && typeof bValue === \"string\") {\n      return sortDirection === \"asc\" ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue)\n    }\n\n    return 0\n  })\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage)\n  const startIndex = (currentPage - 1) * itemsPerPage\n  const paginatedData = sortedData.slice(startIndex, startIndex + itemsPerPage)\n\n  const handleSort = (field: keyof Student) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\")\n    } else {\n      setSortField(field)\n      setSortDirection(\"asc\")\n    }\n  }\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Trophy className=\"h-4 w-4 text-yellow-500\" />\n      case 2:\n        return <Trophy className=\"h-4 w-4 text-gray-400\" />\n      case 3:\n        return <Trophy className=\"h-4 w-4 text-amber-600\" />\n      default:\n        return <span className=\"text-sm font-medium\">{rank}</span>\n    }\n  }\n\n  const getTrendIcon = (rank: number) => {\n    // Mock trend data - in real app this would come from historical data\n    const trend = Math.random()\n    if (trend > 0.6) return <TrendingUp className=\"h-3 w-3 text-green-400\" />\n    if (trend < 0.4) return <TrendingDown className=\"h-3 w-3 text-red-400\" />\n    return <Minus className=\"h-3 w-3 text-muted-foreground\" />\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Student Rankings</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-16\">Rank</TableHead>\n                <TableHead>Student</TableHead>\n                <TableHead className=\"cursor-pointer hover:bg-accent/50\" onClick={() => handleSort(\"score\")}>\n                  Score\n                </TableHead>\n                <TableHead className=\"cursor-pointer hover:bg-accent/50\" onClick={() => handleSort(\"problemsSolved\")}>\n                  Problems\n                </TableHead>\n                <TableHead className=\"cursor-pointer hover:bg-accent/50\" onClick={() => handleSort(\"averageScore\")}>\n                  Avg Score\n                </TableHead>\n                <TableHead>Streak</TableHead>\n                <TableHead>Last Active</TableHead>\n                <TableHead className=\"w-24\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedData.map((student) => (\n                <TableRow\n                  key={student.userId}\n                  className=\"hover:bg-accent/50 cursor-pointer\"\n                  onClick={() => onStudentSelect(student.userId)}\n                >\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      {getRankIcon(student.rank)}\n                      {getTrendIcon(student.rank)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={student.avatar || \"/placeholder.svg\"} alt={student.fullName} />\n                        <AvatarFallback>\n                          {student.fullName\n                            .split(\" \")\n                            .map((n) => n[0])\n                            .join(\"\")}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <div className=\"font-medium\">{student.username}</div>\n                        <div className=\"text-sm text-muted-foreground\">{student.fullName}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-bold text-primary\">{student.score.toLocaleString()}</div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <span>{student.problemsSolved}</span>\n                      <span className=\"text-xs text-muted-foreground\">({student.contestsParticipated} contests)</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"font-mono\">\n                      {student.averageScore.toFixed(1)}%\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full\" />\n                      <span className=\"text-sm\">{student.streak} days</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm text-muted-foreground\">{student.lastSubmission}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      View\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        <div className=\"flex items-center justify-between mt-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, sortedData.length)} of {sortedData.length}{\" \"}\n            students\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              Previous\n            </Button>\n            <div className=\"flex items-center gap-1\">\n              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                const page = i + 1\n                return (\n                  <Button\n                    key={page}\n                    variant={currentPage === page ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(page)}\n                    className=\"w-8 h-8 p-0\"\n                  >\n                    {page}\n                  </Button>\n                )\n              })}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n              disabled={currentPage === totalPages}\n            >\n              Next\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":8333},"components/live-contest-monitor.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\"\nimport { Users, Activity, Clock, Pause, Play, Square } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nconst mockLiveContests = [\n  {\n    id: 1,\n    title: \"Weekly Challenge #42\",\n    participants: 156,\n    submissions: 234,\n    timeLeft: \"1h 23m\",\n    progress: 67,\n    status: \"active\",\n  },\n  {\n    id: 2,\n    title: \"Algorithm Sprint\",\n    participants: 89,\n    submissions: 145,\n    timeLeft: \"45m\",\n    progress: 85,\n    status: \"active\",\n  },\n]\n\nconst mockSubmissionActivity = [\n  { time: \"14:00\", submissions: 12 },\n  { time: \"14:15\", submissions: 28 },\n  { time: \"14:30\", submissions: 45 },\n  { time: \"14:45\", submissions: 38 },\n  { time: \"15:00\", submissions: 52 },\n  { time: \"15:15\", submissions: 41 },\n  { time: \"15:30\", submissions: 35 },\n]\n\nexport function LiveContestMonitor() {\n  const [contests, setContests] = useState(mockLiveContests)\n  const [submissionData, setSubmissionData] = useState(mockSubmissionActivity)\n  const { toast } = useToast()\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setContests((prev) =>\n        prev.map((contest) => ({\n          ...contest,\n          submissions: contest.submissions + Math.floor(Math.random() * 3),\n          participants: contest.participants + (Math.random() > 0.8 ? 1 : 0),\n        })),\n      )\n\n      // Update submission activity chart\n      setSubmissionData((prev) => {\n        const newData = [...prev]\n        const lastEntry = newData[newData.length - 1]\n        const currentTime = new Date()\n        const timeStr = `${currentTime.getHours()}:${currentTime.getMinutes().toString().padStart(2, \"0\")}`\n\n        newData.push({\n          time: timeStr,\n          submissions: Math.floor(Math.random() * 60) + 20,\n        })\n\n        return newData.slice(-7) // Keep only last 7 data points\n      })\n    }, 5000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleContestAction = async (contestId: number, action: \"pause\" | \"resume\" | \"end\") => {\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      setContests((prev) =>\n        prev.map((contest) =>\n          contest.id === contestId\n            ? {\n                ...contest,\n                status: action === \"end\" ? \"ended\" : action === \"pause\" ? \"paused\" : \"active\",\n              }\n            : contest,\n        ),\n      )\n\n      toast({\n        title: `Contest ${action}${action === \"end\" ? \"ed\" : \"d\"}`,\n        description: `The contest has been ${action}${action === \"end\" ? \"ed\" : \"d\"} successfully.`,\n      })\n    } catch (error) {\n      toast({\n        title: `Failed to ${action} contest`,\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Live Contest Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        {contests.map((contest) => (\n          <Card key={contest.id}>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">{contest.title}</CardTitle>\n                <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                  <Activity className=\"h-3 w-3 mr-1\" />\n                  Live\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\">{contest.participants}</div>\n                  <div className=\"text-xs text-muted-foreground\">Participants</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\">{contest.submissions}</div>\n                  <div className=\"text-xs text-muted-foreground\">Submissions</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\">{contest.timeLeft}</div>\n                  <div className=\"text-xs text-muted-foreground\">Time Left</div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Contest Progress</span>\n                  <span>{contest.progress}%</span>\n                </div>\n                <Progress value={contest.progress} className=\"h-2\" />\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleContestAction(contest.id, contest.status === \"active\" ? \"pause\" : \"resume\")}\n                >\n                  {contest.status === \"active\" ? (\n                    <>\n                      <Pause className=\"h-4 w-4 mr-1\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"h-4 w-4 mr-1\" />\n                      Resume\n                    </>\n                  )}\n                </Button>\n                <Button variant=\"destructive\" size=\"sm\" onClick={() => handleContestAction(contest.id, \"end\")}>\n                  <Square className=\"h-4 w-4 mr-1\" />\n                  End Contest\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Submission Activity Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Real-time Submission Activity</CardTitle>\n          <CardDescription>Live submission trends across all active contests</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={submissionData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                <XAxis dataKey=\"time\" className=\"text-xs fill-muted-foreground\" />\n                <YAxis className=\"text-xs fill-muted-foreground\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"hsl(var(--card))\",\n                    border: \"1px solid hsl(var(--border))\",\n                    borderRadius: \"6px\",\n                  }}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"submissions\"\n                  stroke=\"#8B5CF6\"\n                  strokeWidth={2}\n                  dot={{ fill: \"#8B5CF6\", strokeWidth: 2, r: 4 }}\n                  activeDot={{ r: 6 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Active Participants</span>\n            </div>\n            <div className=\"text-2xl font-bold mt-1\">\n              {contests.reduce((sum, contest) => sum + contest.participants, 0)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Total Submissions</span>\n            </div>\n            <div className=\"text-2xl font-bold mt-1\">\n              {contests.reduce((sum, contest) => sum + contest.submissions, 0)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Avg Response Time</span>\n            </div>\n            <div className=\"text-2xl font-bold mt-1\">1.2s</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Success Rate</span>\n            </div>\n            <div className=\"text-2xl font-bold mt-1\">94.5%</div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":9039},"components/live-submission-feed.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useWebSocket } from \"@/hooks/use-websocket\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { CheckCircle, XCircle, Clock, Code } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface Submission {\n  id: string\n  studentName: string\n  studentAvatar?: string\n  problemTitle: string\n  language: string\n  status: \"accepted\" | \"wrong_answer\" | \"time_limit\" | \"runtime_error\" | \"pending\"\n  score: number\n  timestamp: string\n  executionTime?: number\n}\n\ninterface LiveSubmissionFeedProps {\n  contestId: string\n  className?: string\n}\n\nexport function LiveSubmissionFeed({ contestId, className }: LiveSubmissionFeedProps) {\n  const [submissions, setSubmissions] = useState<Submission[]>([])\n\n  const { isConnected } = useWebSocket(`ws://localhost:3001/contest/${contestId}/submissions`, {\n    onMessage: (data) => {\n      if (data.type === \"new_submission\") {\n        setSubmissions((prev) => [data.submission, ...prev.slice(0, 19)]) // Keep last 20\n      }\n    },\n  })\n\n  // Mock initial submissions\n  useEffect(() => {\n    const mockSubmissions: Submission[] = [\n      {\n        id: \"1\",\n        studentName: \"Alice Johnson\",\n        studentAvatar: \"/placeholder.svg?height=32&width=32\",\n        problemTitle: \"Two Sum\",\n        language: \"Python\",\n        status: \"accepted\",\n        score: 100,\n        timestamp: \"2 min ago\",\n        executionTime: 45,\n      },\n      {\n        id: \"2\",\n        studentName: \"Bob Smith\",\n        studentAvatar: \"/placeholder.svg?height=32&width=32\",\n        problemTitle: \"Binary Search\",\n        language: \"JavaScript\",\n        status: \"wrong_answer\",\n        score: 0,\n        timestamp: \"3 min ago\",\n        executionTime: 120,\n      },\n      {\n        id: \"3\",\n        studentName: \"Carol Davis\",\n        studentAvatar: \"/placeholder.svg?height=32&width=32\",\n        problemTitle: \"Merge Sort\",\n        language: \"Java\",\n        status: \"accepted\",\n        score: 85,\n        timestamp: \"5 min ago\",\n        executionTime: 200,\n      },\n      {\n        id: \"4\",\n        studentName: \"David Wilson\",\n        studentAvatar: \"/placeholder.svg?height=32&width=32\",\n        problemTitle: \"Graph Traversal\",\n        language: \"C++\",\n        status: \"time_limit\",\n        score: 30,\n        timestamp: \"7 min ago\",\n      },\n      {\n        id: \"5\",\n        studentName: \"Eve Brown\",\n        studentAvatar: \"/placeholder.svg?height=32&width=32\",\n        problemTitle: \"Dynamic Programming\",\n        language: \"Python\",\n        status: \"pending\",\n        score: 0,\n        timestamp: \"8 min ago\",\n      },\n    ]\n    setSubmissions(mockSubmissions)\n  }, [])\n\n  const getStatusIcon = (status: Submission[\"status\"]) => {\n    switch (status) {\n      case \"accepted\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />\n      case \"wrong_answer\":\n      case \"runtime_error\":\n        return <XCircle className=\"h-4 w-4 text-red-600\" />\n      case \"time_limit\":\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />\n      case \"pending\":\n        return <Clock className=\"h-4 w-4 text-blue-600 animate-spin\" />\n      default:\n        return <Code className=\"h-4 w-4 text-muted-foreground\" />\n    }\n  }\n\n  const getStatusColor = (status: Submission[\"status\"]) => {\n    switch (status) {\n      case \"accepted\":\n        return \"bg-green-100 text-green-800 border-green-200\"\n      case \"wrong_answer\":\n      case \"runtime_error\":\n        return \"bg-red-100 text-red-800 border-red-200\"\n      case \"time_limit\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\"\n      case \"pending\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\"\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n    }\n  }\n\n  const getStatusText = (status: Submission[\"status\"]) => {\n    switch (status) {\n      case \"accepted\":\n        return \"Accepted\"\n      case \"wrong_answer\":\n        return \"Wrong Answer\"\n      case \"time_limit\":\n        return \"Time Limit\"\n      case \"runtime_error\":\n        return \"Runtime Error\"\n      case \"pending\":\n        return \"Judging...\"\n      default:\n        return \"Unknown\"\n    }\n  }\n\n  return (\n    <Card className={cn(\"\", className)}>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Code className=\"h-5 w-5\" />\n          Live Submissions\n        </CardTitle>\n        <div className=\"flex items-center gap-2\">\n          <div className={cn(\"h-2 w-2 rounded-full\", isConnected ? \"bg-green-500\" : \"bg-red-500\")} />\n          <span className=\"text-sm text-muted-foreground\">{submissions.length} submissions</span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[400px]\">\n          <div className=\"space-y-3\">\n            {submissions.map((submission) => (\n              <div\n                key={submission.id}\n                className=\"flex items-center gap-3 p-3 rounded-lg border bg-card hover:bg-muted/50 transition-colors\"\n              >\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={submission.studentAvatar || \"/placeholder.svg\"} />\n                  <AvatarFallback>\n                    {submission.studentName\n                      .split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\")}\n                  </AvatarFallback>\n                </Avatar>\n\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <h4 className=\"font-medium truncate\">{submission.studentName}</h4>\n                    <span className=\"text-xs text-muted-foreground\">{submission.timestamp}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <span className=\"truncate\">{submission.problemTitle}</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {submission.language}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  {getStatusIcon(submission.status)}\n                  <Badge className={getStatusColor(submission.status)}>{getStatusText(submission.status)}</Badge>\n                  {submission.status === \"accepted\" && <Badge variant=\"outline\">{submission.score}pts</Badge>}\n                </div>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":6809},"components/loading-spinner.tsx":{"content":"\"use client\"\n\nimport { motion } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\"\n  className?: string\n}\n\nexport function LoadingSpinner({ size = \"md\", className }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-6 w-6\", \n    lg: \"h-8 w-8\"\n  }\n\n  return (\n    <motion.div\n      className={cn(\"relative\", sizeClasses[size], className)}\n      animate={{ rotate: 360 }}\n      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n    >\n      <div className=\"absolute inset-0 rounded-full border-2 border-muted\"></div>\n      <div className=\"absolute inset-0 rounded-full border-2 border-primary border-t-transparent\"></div>\n    </motion.div>\n  )\n}","size_bytes":746},"components/page-transition.tsx":{"content":"\"use client\"\n\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { usePathname } from \"next/navigation\"\nimport { ReactNode } from \"react\"\n\ninterface PageTransitionProps {\n  children: ReactNode\n}\n\nconst pageVariants = {\n  initial: {\n    opacity: 0,\n    y: 20,\n  },\n  in: {\n    opacity: 1,\n    y: 0,\n  },\n  out: {\n    opacity: 0,\n    y: -20,\n  },\n}\n\nconst pageTransition = {\n  type: \"tween\" as const,\n  ease: [0.43, 0.13, 0.23, 0.96],\n  duration: 0.3,\n}\n\nexport function PageTransition({ children }: PageTransitionProps) {\n  const pathname = usePathname()\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        key={pathname}\n        initial=\"initial\"\n        animate=\"in\"\n        exit=\"out\"\n        variants={pageVariants}\n        transition={{ duration: 0.3, ease: \"easeInOut\" }}\n        className=\"w-full\"\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  )\n}","size_bytes":911},"components/performance-chart.tsx":{"content":"\"use client\"\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\"\n\ninterface Student {\n  username: string\n  performance: { date: string; score: number }[]\n}\n\ninterface PerformanceChartProps {\n  data: Student[]\n}\n\nconst colors = [\"#8B5CF6\", \"#A78BFA\", \"#C4B5FD\", \"#DDD6FE\", \"#EDE9FE\"]\n\nexport function PerformanceChart({ data }: PerformanceChartProps) {\n  // Transform data for the chart\n  const chartData =\n    data[0]?.performance.map((point, index) => {\n      const dataPoint: any = { date: point.date }\n\n      data.forEach((student, studentIndex) => {\n        if (student.performance[index]) {\n          dataPoint[student.username] = student.performance[index].score\n        }\n      })\n\n      return dataPoint\n    }) || []\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr)\n    return date.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" })\n  }\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n          <XAxis dataKey=\"date\" tickFormatter={formatDate} className=\"text-xs fill-muted-foreground\" />\n          <YAxis className=\"text-xs fill-muted-foreground\" />\n          <Tooltip\n            labelFormatter={(value) => formatDate(value as string)}\n            contentStyle={{\n              backgroundColor: \"hsl(var(--card))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"6px\",\n            }}\n          />\n          <Legend />\n          {data.map((student, index) => (\n            <Line\n              key={student.username}\n              type=\"monotone\"\n              dataKey={student.username}\n              stroke={colors[index % colors.length]}\n              strokeWidth={2}\n              dot={{ fill: colors[index % colors.length], strokeWidth: 2, r: 4 }}\n              activeDot={{ r: 6 }}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n","size_bytes":2139},"components/plagiarism-monitor.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { AlertTriangle, Eye, Shield, RefreshCw } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nconst mockPlagiarismData = [\n  {\n    id: \"sub_001\",\n    studentA: \"alice_codes\",\n    studentB: \"bob_dev\",\n    problemTitle: \"Two Sum\",\n    similarity: 87,\n    status: \"flagged\",\n    submissionTime: \"2 hours ago\",\n    reviewStatus: \"pending\",\n  },\n  {\n    id: \"sub_002\",\n    studentA: \"charlie_algo\",\n    studentB: \"diana_prog\",\n    problemTitle: \"Binary Tree Traversal\",\n    similarity: 72,\n    status: \"flagged\",\n    submissionTime: \"4 hours ago\",\n    reviewStatus: \"pending\",\n  },\n  {\n    id: \"sub_003\",\n    studentA: \"eve_coder\",\n    studentB: \"frank_dev\",\n    problemTitle: \"Graph Shortest Path\",\n    similarity: 65,\n    status: \"reviewed\",\n    submissionTime: \"1 day ago\",\n    reviewStatus: \"cleared\",\n  },\n  {\n    id: \"sub_004\",\n    studentA: \"grace_algo\",\n    studentB: \"henry_code\",\n    problemTitle: \"Dynamic Programming\",\n    similarity: 91,\n    status: \"confirmed\",\n    submissionTime: \"2 days ago\",\n    reviewStatus: \"plagiarism\",\n  },\n]\n\nexport function PlagiarismMonitor() {\n  const [plagiarismData, setPlagiarismData] = useState(mockPlagiarismData)\n  const [isScanning, setIsScanning] = useState(false)\n  const { toast } = useToast()\n\n  const getSimilarityColor = (similarity: number) => {\n    if (similarity >= 80) return \"text-red-400\"\n    if (similarity >= 60) return \"text-yellow-400\"\n    return \"text-green-400\"\n  }\n\n  const getSimilarityBadge = (similarity: number) => {\n    if (similarity >= 80) return <Badge variant=\"destructive\">High Risk</Badge>\n    if (similarity >= 60) return <Badge variant=\"default\">Medium Risk</Badge>\n    return <Badge variant=\"secondary\">Low Risk</Badge>\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"flagged\":\n        return <Badge className=\"bg-red-500/10 text-red-400 border-red-500/20\">Flagged</Badge>\n      case \"reviewed\":\n        return <Badge className=\"bg-blue-500/10 text-blue-400 border-blue-500/20\">Reviewed</Badge>\n      case \"confirmed\":\n        return <Badge className=\"bg-red-500/10 text-red-400 border-red-500/20\">Confirmed</Badge>\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>\n    }\n  }\n\n  const handleRunScan = async () => {\n    setIsScanning(true)\n    try {\n      // Simulate plagiarism scan\n      await new Promise((resolve) => setTimeout(resolve, 3000))\n\n      toast({\n        title: \"Plagiarism scan completed\",\n        description: \"Found 2 new potential matches requiring review.\",\n      })\n    } catch (error) {\n      toast({\n        title: \"Scan failed\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsScanning(false)\n    }\n  }\n\n  const handleReviewSubmission = (submissionId: string, action: \"clear\" | \"confirm\") => {\n    setPlagiarismData((data) =>\n      data.map((item) =>\n        item.id === submissionId\n          ? {\n              ...item,\n              reviewStatus: action === \"clear\" ? \"cleared\" : \"plagiarism\",\n              status: action === \"clear\" ? \"reviewed\" : \"confirmed\",\n            }\n          : item,\n      ),\n    )\n\n    toast({\n      title: `Submission ${action === \"clear\" ? \"cleared\" : \"confirmed as plagiarism\"}`,\n      description: `The review has been recorded and appropriate actions will be taken.`,\n    })\n  }\n\n  const pendingReviews = plagiarismData.filter((item) => item.reviewStatus === \"pending\").length\n  const confirmedCases = plagiarismData.filter((item) => item.reviewStatus === \"plagiarism\").length\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4 text-yellow-400\" />\n              <span className=\"text-sm text-muted-foreground\">Pending Reviews</span>\n            </div>\n            <div className=\"text-2xl font-bold mt-1 text-yellow-400\">{pendingReviews}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-4 w-4 text-red-400\" />\n              <span className=\"text-sm text-muted-foreground\">Confirmed Cases</span>\n            </div>\n            <div className=\"text-2xl font-bold mt-1 text-red-400\">{confirmedCases}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <RefreshCw className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Last Scan</span>\n            </div>\n            <div className=\"text-sm font-medium mt-1\">2 hours ago</div>\n            <Button size=\"sm\" className=\"mt-2 w-full\" onClick={handleRunScan} disabled={isScanning}>\n              {isScanning ? \"Scanning...\" : \"Run New Scan\"}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Plagiarism Detection Results */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Plagiarism Detection Results\n          </CardTitle>\n          <CardDescription>Review submissions with high similarity scores and take appropriate action</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Students</TableHead>\n                  <TableHead>Problem</TableHead>\n                  <TableHead>Similarity</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Submitted</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {plagiarismData.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{item.studentA}</div>\n                        <div className=\"text-sm text-muted-foreground\">vs {item.studentB}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-medium\">{item.problemTitle}</div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`font-bold ${getSimilarityColor(item.similarity)}`}>{item.similarity}%</span>\n                          {getSimilarityBadge(item.similarity)}\n                        </div>\n                        <Progress value={item.similarity} className=\"h-1\" />\n                      </div>\n                    </TableCell>\n                    <TableCell>{getStatusBadge(item.status)}</TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\">{item.submissionTime}</span>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          Compare\n                        </Button>\n                        {item.reviewStatus === \"pending\" && (\n                          <>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleReviewSubmission(item.id, \"clear\")}\n                            >\n                              Clear\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => handleReviewSubmission(item.id, \"confirm\")}\n                            >\n                              Confirm\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":8979},"components/plagiarism-scanner.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Label } from \"@/components/ui/label\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Shield, Play, Settings, AlertTriangle, CheckCircle, Clock } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface ScanResult {\n  scanId: string\n  contestId: string\n  problemId?: string\n  threshold: number\n  totalSubmissions: number\n  comparisons: number\n  flaggedPairs: number\n  results: any[]\n  scanCompletedAt: string\n}\n\ninterface PlagiarismScannerProps {\n  onScanComplete: (results: ScanResult) => void\n}\n\nexport function PlagiarismScanner({ onScanComplete }: PlagiarismScannerProps) {\n  const [selectedContest, setSelectedContest] = useState(\"\")\n  const [selectedProblem, setSelectedProblem] = useState(\"\")\n  const [threshold, setThreshold] = useState([70])\n  const [isScanning, setIsScanning] = useState(false)\n  const [scanProgress, setScanProgress] = useState(0)\n  const [lastScanResult, setLastScanResult] = useState<ScanResult | null>(null)\n  const { toast } = useToast()\n\n  const mockContests = [\n    { id: \"1\", title: \"Weekly Challenge #42\" },\n    { id: \"2\", title: \"Algorithm Sprint\" },\n    { id: \"3\", title: \"Monthly Championship\" },\n  ]\n\n  const mockProblems = [\n    { id: \"1\", title: \"Two Sum\" },\n    { id: \"2\", title: \"Binary Tree Traversal\" },\n    { id: \"3\", title: \"Graph Shortest Path\" },\n  ]\n\n  const handleStartScan = async () => {\n    if (!selectedContest) {\n      toast({\n        title: \"Contest required\",\n        description: \"Please select a contest to scan.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsScanning(true)\n    setScanProgress(0)\n\n    try {\n      // Simulate scan progress\n      const progressInterval = setInterval(() => {\n        setScanProgress((prev) => {\n          if (prev >= 90) {\n            clearInterval(progressInterval)\n            return 90\n          }\n          return prev + Math.random() * 15\n        })\n      }, 200)\n\n      // Make API call\n      const response = await fetch(\"/api/plagiarism/scan\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          contestId: selectedContest,\n          problemId: selectedProblem || undefined,\n          threshold: threshold[0],\n        }),\n      })\n\n      const data = await response.json()\n\n      if (data.success) {\n        setScanProgress(100)\n        setLastScanResult(data.data)\n        onScanComplete(data.data)\n\n        toast({\n          title: \"Scan completed successfully\",\n          description: `Found ${data.data.flaggedPairs} potential plagiarism cases.`,\n        })\n      } else {\n        throw new Error(data.error)\n      }\n    } catch (error) {\n      toast({\n        title: \"Scan failed\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsScanning(false)\n      setTimeout(() => setScanProgress(0), 2000)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Scanner Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Plagiarism Scanner\n          </CardTitle>\n          <CardDescription>Configure and run automated plagiarism detection on contest submissions</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"contest\">Contest</Label>\n              <Select value={selectedContest} onValueChange={setSelectedContest}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select contest to scan\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {mockContests.map((contest) => (\n                    <SelectItem key={contest.id} value={contest.id}>\n                      {contest.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"problem\">Problem (Optional)</Label>\n              <Select value={selectedProblem} onValueChange={setSelectedProblem}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All problems\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All problems</SelectItem>\n                  {mockProblems.map((problem) => (\n                    <SelectItem key={problem.id} value={problem.id}>\n                      {problem.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label>Similarity Threshold</Label>\n              <Badge variant=\"outline\">{threshold[0]}%</Badge>\n            </div>\n            <Slider value={threshold} onValueChange={setThreshold} max={100} min={30} step={5} className=\"w-full\" />\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>30% (Low sensitivity)</span>\n              <span>100% (High sensitivity)</span>\n            </div>\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Advanced settings and filters</span>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              Configure\n            </Button>\n          </div>\n\n          {isScanning && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Scanning submissions...</span>\n                <span>{Math.round(scanProgress)}%</span>\n              </div>\n              <Progress value={scanProgress} className=\"h-2\" />\n            </div>\n          )}\n\n          <Button onClick={handleStartScan} disabled={isScanning || !selectedContest} className=\"w-full\">\n            <Play className=\"h-4 w-4 mr-2\" />\n            {isScanning ? \"Scanning...\" : \"Start Plagiarism Scan\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Last Scan Results Summary */}\n      {lastScanResult && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-400\" />\n              Last Scan Results\n            </CardTitle>\n            <CardDescription>Completed {new Date(lastScanResult.scanCompletedAt).toLocaleString()}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-4\">\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">{lastScanResult.totalSubmissions}</div>\n                <div className=\"text-xs text-muted-foreground\">Submissions</div>\n              </div>\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">{lastScanResult.comparisons}</div>\n                <div className=\"text-xs text-muted-foreground\">Comparisons</div>\n              </div>\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-yellow-400\">{lastScanResult.flaggedPairs}</div>\n                <div className=\"text-xs text-muted-foreground\">Flagged Pairs</div>\n              </div>\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">{lastScanResult.threshold}%</div>\n                <div className=\"text-xs text-muted-foreground\">Threshold</div>\n              </div>\n            </div>\n\n            {lastScanResult.flaggedPairs > 0 && (\n              <div className=\"mt-4 p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                <div className=\"flex items-center gap-2 text-yellow-400 mb-2\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">Attention Required</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {lastScanResult.flaggedPairs} submission pairs require manual review for potential plagiarism.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Scan History */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Recent Scans\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[\n              { contest: \"Weekly Challenge #42\", time: \"2 hours ago\", flagged: 3 },\n              { contest: \"Algorithm Sprint\", time: \"1 day ago\", flagged: 1 },\n              { contest: \"Monthly Championship\", time: \"3 days ago\", flagged: 5 },\n            ].map((scan, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 border border-border rounded-lg\">\n                <div>\n                  <div className=\"font-medium\">{scan.contest}</div>\n                  <div className=\"text-sm text-muted-foreground\">{scan.time}</div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-bold text-primary\">{scan.flagged}</div>\n                  <div className=\"text-xs text-muted-foreground\">flagged</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":10399},"components/protected-route.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useRouter } from \"next/navigation\"\nimport { useEffect } from \"react\"\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode\n  requiredRole?: \"student\" | \"teacher\"\n}\n\nexport function ProtectedRoute({ children, requiredRole }: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!user) {\n        router.push(\"/auth/signin\")\n        return\n      }\n\n      if (requiredRole && user.role !== requiredRole) {\n        // Redirect to appropriate dashboard based on user role\n        if (user.role === \"student\") {\n          router.push(\"/dashboard\")\n        } else {\n          router.push(\"/teacher/dashboard\")\n        }\n      }\n    }\n  }, [user, isLoading, requiredRole, router])\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user || (requiredRole && user.role !== requiredRole)) {\n    return null\n  }\n\n  return <>{children}</>\n}\n","size_bytes":1350},"components/real-time-leaderboard.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useWebSocket } from \"@/hooks/use-websocket\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Trophy, TrendingUp, TrendingDown, Minus } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface LeaderboardEntry {\n  id: string\n  name: string\n  score: number\n  rank: number\n  previousRank: number\n  avatar?: string\n  lastSubmission: string\n  problemsSolved: number\n}\n\ninterface RealTimeLeaderboardProps {\n  contestId: string\n  className?: string\n}\n\nexport function RealTimeLeaderboard({ contestId, className }: RealTimeLeaderboardProps) {\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([])\n  const [updates, setUpdates] = useState<string[]>([])\n\n  const { isConnected, lastMessage } = useWebSocket(`ws://localhost:3001/contest/${contestId}/leaderboard`, {\n    onMessage: (data) => {\n      if (data.type === \"leaderboard_update\") {\n        setLeaderboard(data.leaderboard)\n        setUpdates((prev) => [`${data.student} submitted solution - Rank changed!`, ...prev.slice(0, 4)])\n      }\n    },\n  })\n\n  // Mock initial data\n  useEffect(() => {\n    setLeaderboard([\n      {\n        id: \"1\",\n        name: \"Alice Johnson\",\n        score: 2850,\n        rank: 1,\n        previousRank: 2,\n        avatar: \"/placeholder.svg?height=32&width=32\",\n        lastSubmission: \"2 min ago\",\n        problemsSolved: 8,\n      },\n      {\n        id: \"2\",\n        name: \"Bob Smith\",\n        score: 2720,\n        rank: 2,\n        previousRank: 1,\n        avatar: \"/placeholder.svg?height=32&width=32\",\n        lastSubmission: \"5 min ago\",\n        problemsSolved: 7,\n      },\n      {\n        id: \"3\",\n        name: \"Carol Davis\",\n        score: 2650,\n        rank: 3,\n        previousRank: 3,\n        avatar: \"/placeholder.svg?height=32&width=32\",\n        lastSubmission: \"8 min ago\",\n        problemsSolved: 7,\n      },\n      {\n        id: \"4\",\n        name: \"David Wilson\",\n        score: 2580,\n        rank: 4,\n        previousRank: 5,\n        avatar: \"/placeholder.svg?height=32&width=32\",\n        lastSubmission: \"12 min ago\",\n        problemsSolved: 6,\n      },\n      {\n        id: \"5\",\n        name: \"Eve Brown\",\n        score: 2520,\n        rank: 5,\n        previousRank: 4,\n        avatar: \"/placeholder.svg?height=32&width=32\",\n        lastSubmission: \"15 min ago\",\n        problemsSolved: 6,\n      },\n    ])\n  }, [])\n\n  const getRankChangeIcon = (current: number, previous: number) => {\n    if (current < previous) return <TrendingUp className=\"h-4 w-4 text-green-600\" />\n    if (current > previous) return <TrendingDown className=\"h-4 w-4 text-red-600\" />\n    return <Minus className=\"h-4 w-4 text-muted-foreground\" />\n  }\n\n  const getRankChangeColor = (current: number, previous: number) => {\n    if (current < previous) return \"text-green-600\"\n    if (current > previous) return \"text-red-600\"\n    return \"text-muted-foreground\"\n  }\n\n  return (\n    <Card className={cn(\"\", className)}>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Trophy className=\"h-5 w-5\" />\n          Live Leaderboard\n        </CardTitle>\n        <div className=\"flex items-center gap-2\">\n          <div className={cn(\"h-2 w-2 rounded-full\", isConnected ? \"bg-green-500\" : \"bg-red-500\")} />\n          <span className=\"text-sm text-muted-foreground\">{isConnected ? \"Live\" : \"Disconnected\"}</span>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Recent Updates */}\n        {updates.length > 0 && (\n          <div className=\"bg-muted/50 rounded-lg p-3\">\n            <h4 className=\"text-sm font-medium mb-2\">Recent Updates</h4>\n            <div className=\"space-y-1\">\n              {updates.map((update, index) => (\n                <p key={index} className=\"text-xs text-muted-foreground\">\n                  • {update}\n                </p>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Leaderboard */}\n        <div className=\"space-y-2\">\n          {leaderboard.map((entry, index) => (\n            <div\n              key={entry.id}\n              className={cn(\n                \"flex items-center gap-3 p-3 rounded-lg border transition-all duration-300\",\n                index === 0 && \"bg-yellow-50 border-yellow-200\",\n                index === 1 && \"bg-gray-50 border-gray-200\",\n                index === 2 && \"bg-orange-50 border-orange-200\",\n              )}\n            >\n              <div className=\"flex items-center gap-2 min-w-[60px]\">\n                <span\n                  className={cn(\n                    \"font-bold text-lg\",\n                    index === 0 && \"text-yellow-600\",\n                    index === 1 && \"text-gray-600\",\n                    index === 2 && \"text-orange-600\",\n                  )}\n                >\n                  #{entry.rank}\n                </span>\n                {getRankChangeIcon(entry.rank, entry.previousRank)}\n              </div>\n\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src={entry.avatar || \"/placeholder.svg\"} />\n                <AvatarFallback>\n                  {entry.name\n                    .split(\" \")\n                    .map((n) => n[0])\n                    .join(\"\")}\n                </AvatarFallback>\n              </Avatar>\n\n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">{entry.name}</h4>\n                  <Badge variant=\"outline\">{entry.score} pts</Badge>\n                </div>\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <span>{entry.problemsSolved} problems solved</span>\n                  <span>{entry.lastSubmission}</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":6123},"components/student-profile-card.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Trophy, Target, Flame, ExternalLink } from \"lucide-react\"\n\ninterface Student {\n  rank: number\n  userId: string\n  username: string\n  fullName: string\n  avatar: string\n  score: number\n  problemsSolved: number\n  contestsParticipated: number\n  averageScore: number\n  lastSubmission: string\n  streak: number\n  badges: string[]\n}\n\ninterface StudentProfileCardProps {\n  student: Student\n}\n\nexport function StudentProfileCard({ student }: StudentProfileCardProps) {\n  const progressToNextRank = ((student.score % 1000) / 1000) * 100\n\n  return (\n    <Card className=\"sticky top-6\">\n      <CardHeader className=\"text-center\">\n        <Avatar className=\"h-16 w-16 mx-auto mb-2\">\n          <AvatarImage src={student.avatar || \"/placeholder.svg\"} alt={student.fullName} />\n          <AvatarFallback className=\"text-lg\">\n            {student.fullName\n              .split(\" \")\n              .map((n) => n[0])\n              .join(\"\")}\n          </AvatarFallback>\n        </Avatar>\n        <CardTitle className=\"text-lg\">{student.fullName}</CardTitle>\n        <CardDescription>@{student.username}</CardDescription>\n        <div className=\"flex items-center justify-center gap-2 mt-2\">\n          <Trophy className=\"h-4 w-4 text-primary\" />\n          <span className=\"font-bold text-primary\">Rank #{student.rank}</span>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Score Progress */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span>Progress to next rank</span>\n            <span className=\"font-medium\">{Math.round(progressToNextRank)}%</span>\n          </div>\n          <Progress value={progressToNextRank} className=\"h-2\" />\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-primary\">{student.score.toLocaleString()}</div>\n            <div className=\"text-xs text-muted-foreground\">Total Score</div>\n          </div>\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-primary\">{student.problemsSolved}</div>\n            <div className=\"text-xs text-muted-foreground\">Problems Solved</div>\n          </div>\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-primary\">{student.averageScore.toFixed(1)}%</div>\n            <div className=\"text-xs text-muted-foreground\">Average Score</div>\n          </div>\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-primary\">{student.contestsParticipated}</div>\n            <div className=\"text-xs text-muted-foreground\">Contests</div>\n          </div>\n        </div>\n\n        {/* Streak */}\n        <div className=\"flex items-center justify-between p-3 bg-gradient-to-r from-orange-500/10 to-red-500/10 rounded-lg border border-orange-500/20\">\n          <div className=\"flex items-center gap-2\">\n            <Flame className=\"h-4 w-4 text-orange-500\" />\n            <span className=\"font-medium\">Current Streak</span>\n          </div>\n          <div className=\"text-lg font-bold text-orange-500\">{student.streak} days</div>\n        </div>\n\n        {/* Badges */}\n        {student.badges.length > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"text-sm font-medium\">Achievements</div>\n            <div className=\"flex flex-wrap gap-1\">\n              {student.badges.map((badge, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {badge}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Recent Activity */}\n        <div className=\"space-y-2\">\n          <div className=\"text-sm font-medium\">Recent Activity</div>\n          <div className=\"text-sm text-muted-foreground\">Last submission: {student.lastSubmission}</div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"space-y-2 pt-2\">\n          <Button className=\"w-full\" size=\"sm\">\n            <ExternalLink className=\"h-4 w-4 mr-2\" />\n            View Full Profile\n          </Button>\n          <Button variant=\"outline\" className=\"w-full bg-transparent\" size=\"sm\">\n            <Target className=\"h-4 w-4 mr-2\" />\n            Compare Performance\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":4869},"components/submission-review.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { AlertTriangle, CheckCircle, XCircle, User, Clock, Code, MessageSquare, RotateCcw, Edit } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Submission {\n  id: string\n  userId: string\n  username: string\n  problemId: number\n  problemTitle: string\n  contestId?: number\n  contestTitle?: string\n  language: string\n  code: string\n  status: \"accepted\" | \"wrong_answer\" | \"time_limit\" | \"runtime_error\"\n  score: number\n  submissionTime: string\n  executionTime: string\n  memory: string\n  plagiarismScore: number\n  testCases: {\n    id: number\n    status: \"passed\" | \"failed\"\n    input: string\n    expectedOutput: string\n    actualOutput: string\n    executionTime: string\n  }[]\n  similarSubmissions?: {\n    id: string\n    username: string\n    similarity: number\n    matchedLines: number[]\n  }[]\n}\n\ninterface SubmissionReviewProps {\n  submission: Submission\n}\n\nexport function SubmissionReview({ submission }: SubmissionReviewProps) {\n  const [comment, setComment] = useState(\"\")\n  const [manualScore, setManualScore] = useState(submission.score.toString())\n  const [isRerunning, setIsRerunning] = useState(false)\n  const { toast } = useToast()\n\n  const handleRerun = async () => {\n    setIsRerunning(true)\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 3000))\n      toast({\n        title: \"Tests re-run successfully\",\n        description: \"Submission has been re-evaluated with updated test cases.\",\n      })\n    } catch (error) {\n      toast({\n        title: \"Failed to re-run tests\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsRerunning(false)\n    }\n  }\n\n  const handleRegrade = async () => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n      toast({\n        title: \"Score updated\",\n        description: `Manual score of ${manualScore} has been applied.`,\n      })\n    } catch (error) {\n      toast({\n        title: \"Failed to update score\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleAddComment = async () => {\n    if (!comment.trim()) return\n\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500))\n      toast({\n        title: \"Comment added\",\n        description: \"Your feedback has been saved.\",\n      })\n      setComment(\"\")\n    } catch (error) {\n      toast({\n        title: \"Failed to add comment\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"accepted\":\n        return <CheckCircle className=\"h-4 w-4 text-green-400\" />\n      case \"wrong_answer\":\n        return <XCircle className=\"h-4 w-4 text-red-400\" />\n      case \"time_limit\":\n        return <Clock className=\"h-4 w-4 text-yellow-400\" />\n      case \"runtime_error\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n      default:\n        return <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"accepted\":\n        return \"text-green-400\"\n      case \"wrong_answer\":\n        return \"text-red-400\"\n      case \"time_limit\":\n        return \"text-yellow-400\"\n      case \"runtime_error\":\n        return \"text-red-400\"\n      default:\n        return \"text-muted-foreground\"\n    }\n  }\n\n  const getPlagiarismSeverity = (score: number) => {\n    if (score >= 80) return { color: \"destructive\", label: \"High Risk\" }\n    if (score >= 50) return { color: \"default\", label: \"Medium Risk\" }\n    if (score >= 20) return { color: \"secondary\", label: \"Low Risk\" }\n    return { color: \"outline\", label: \"No Risk\" }\n  }\n\n  const plagiarismSeverity = getPlagiarismSeverity(submission.plagiarismScore)\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Submission Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                {getStatusIcon(submission.status)}\n                Submission #{submission.id}\n              </CardTitle>\n              <CardDescription>\n                {submission.problemTitle} • {submission.contestTitle && `${submission.contestTitle} • `}\n                Submitted {submission.submissionTime}\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">{submission.language}</Badge>\n              <Badge className={getStatusColor(submission.status)}>\n                {submission.status.replace(\"_\", \" \").toUpperCase()}\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-1\">\n              <div className=\"text-sm text-muted-foreground\">Student</div>\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                {submission.username}\n              </div>\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"text-sm text-muted-foreground\">Score</div>\n              <div className=\"text-lg font-bold text-primary\">{submission.score}/100</div>\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"text-sm text-muted-foreground\">Execution Time</div>\n              <div>{submission.executionTime}</div>\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"text-sm text-muted-foreground\">Memory</div>\n              <div>{submission.memory}</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"code\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"code\">Code Review</TabsTrigger>\n          <TabsTrigger value=\"tests\">Test Results</TabsTrigger>\n          <TabsTrigger value=\"plagiarism\">Plagiarism Analysis</TabsTrigger>\n          <TabsTrigger value=\"actions\">Actions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"code\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Code className=\"h-5 w-5\" />\n                Submitted Code\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-muted rounded-lg p-4\">\n                <pre className=\"text-sm font-mono overflow-x-auto\">\n                  <code>{submission.code}</code>\n                </pre>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"tests\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Case Results</CardTitle>\n              <CardDescription>\n                {submission.testCases.filter((tc) => tc.status === \"passed\").length}/{submission.testCases.length} test\n                cases passed\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-4\">\n                  {submission.testCases.map((testCase) => (\n                    <div key={testCase.id} className=\"border border-border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center gap-2\">\n                          {testCase.status === \"passed\" ? (\n                            <CheckCircle className=\"h-4 w-4 text-green-400\" />\n                          ) : (\n                            <XCircle className=\"h-4 w-4 text-red-400\" />\n                          )}\n                          <span className=\"font-medium\">Test Case {testCase.id}</span>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">{testCase.executionTime}</div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-xs\">\n                        <div>\n                          <div className=\"font-medium mb-1\">Input:</div>\n                          <pre className=\"bg-background p-2 rounded border font-mono\">{testCase.input}</pre>\n                        </div>\n                        <div>\n                          <div className=\"font-medium mb-1\">Expected:</div>\n                          <pre className=\"bg-background p-2 rounded border font-mono\">{testCase.expectedOutput}</pre>\n                        </div>\n                        <div>\n                          <div className=\"font-medium mb-1\">Actual:</div>\n                          <pre\n                            className={`p-2 rounded border font-mono ${\n                              testCase.status === \"passed\"\n                                ? \"bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800\"\n                                : \"bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800\"\n                            }`}\n                          >\n                            {testCase.actualOutput}\n                          </pre>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"plagiarism\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Plagiarism Analysis</span>\n                <Badge variant={plagiarismSeverity.color}>{plagiarismSeverity.label}</Badge>\n              </CardTitle>\n              <CardDescription>Similarity analysis with other submissions</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\">Similarity Score</span>\n                  <span className=\"text-sm font-bold\">{submission.plagiarismScore}%</span>\n                </div>\n                <Progress value={submission.plagiarismScore} className=\"h-2\" />\n              </div>\n\n              {submission.similarSubmissions && submission.similarSubmissions.length > 0 && (\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Similar Submissions</h4>\n                  {submission.similarSubmissions.map((similar) => (\n                    <div key={similar.id} className=\"border border-border rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{similar.username}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {similar.matchedLines.length} matching lines\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold text-primary\">{similar.similarity}%</div>\n                          <Button variant=\"outline\" size=\"sm\" className=\"mt-1 bg-transparent\">\n                            Compare\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {submission.plagiarismScore >= 50 && (\n                <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 text-destructive mb-2\">\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">High Similarity Detected</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    This submission shows significant similarity to other submissions. Manual review is recommended.\n                  </p>\n                  <Button variant=\"destructive\" size=\"sm\" className=\"mt-3\">\n                    Report as Plagiarism\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"actions\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <RotateCcw className=\"h-5 w-5\" />\n                  Re-evaluate\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Button onClick={handleRerun} disabled={isRerunning} className=\"w-full\">\n                  {isRerunning ? \"Re-running Tests...\" : \"Re-run Tests\"}\n                </Button>\n                <p className=\"text-sm text-muted-foreground\">Re-execute the submission with current test cases</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Edit className=\"h-5 w-5\" />\n                  Manual Grading\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={manualScore}\n                    onChange={(e) => setManualScore(e.target.value)}\n                    className=\"flex-1 px-3 py-2 border border-border rounded-md bg-background\"\n                    placeholder=\"Score (0-100)\"\n                  />\n                  <Button onClick={handleRegrade}>Update</Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Override the automated score with manual evaluation</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                Add Feedback\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Textarea\n                placeholder=\"Add instructor feedback for the student...\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                rows={4}\n              />\n              <Button onClick={handleAddComment} disabled={!comment.trim()}>\n                Add Comment\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","size_bytes":15575},"components/teacher-header.tsx":{"content":"\"use client\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { Menu, Code, Trophy, Users, BarChart3, Settings, LogOut, BookOpen } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useRouter } from \"next/navigation\"\n\ninterface TeacherHeaderProps {\n  onMenuToggle: () => void\n}\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/teacher/dashboard\", icon: BarChart3 },\n  { name: \"Contests\", href: \"/teacher/contests\", icon: Trophy },\n  { name: \"Students\", href: \"/teacher/students\", icon: Users },\n  { name: \"Problems\", href: \"/teacher/problems\", icon: BookOpen },\n]\n\nexport function TeacherHeader({ onMenuToggle }: TeacherHeaderProps) {\n  const pathname = usePathname()\n  const { user, logout } = useAuth()\n  const router = useRouter()\n\n  const handleLogout = () => {\n    logout()\n    router.push(\"/\")\n  }\n\n  const handleSettings = () => {\n    router.push(\"/teacher/settings\")\n  }\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between px-4\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" onClick={onMenuToggle}>\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n\n          <Link href=\"/teacher/dashboard\" className=\"flex items-center gap-2\">\n            <div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-primary\">\n              <Code className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"font-bold text-lg\">CodeContest Pro</span>\n            <span className=\"text-xs bg-accent text-accent-foreground px-2 py-1 rounded\">Teacher</span>\n          </Link>\n        </div>\n\n        <nav className=\"hidden md:flex items-center gap-6\">\n          {navigation.map((item) => {\n            const Icon = item.icon\n            const isActive = pathname === item.href\n\n            return (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  \"flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-accent\",\n                )}\n              >\n                <Icon className=\"h-4 w-4\" />\n                {item.name}\n              </Link>\n            )\n          })}\n        </nav>\n\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src=\"/diverse-user-avatars.png\" alt=\"User\" />\n                <AvatarFallback>\n                  {user?.name\n                    ?.split(\" \")\n                    .map((n) => n[0])\n                    .join(\"\") || \"T\"}\n                </AvatarFallback>\n              </Avatar>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n            <DropdownMenuItem onClick={handleSettings}>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              Settings\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={handleLogout}>\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  )\n}\n","size_bytes":3932},"components/teacher-plagiarism-dashboard.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Loader2, Scan, Eye, AlertTriangle, CheckCircle, XCircle } from \"lucide-react\"\nimport { toast } from \"sonner\"\n\ninterface PlagiarismPair {\n  id: string\n  studentA: string\n  studentB: string\n  similarity: number\n  submissionAId: string\n  submissionBId: string\n  codeSnippetA: string\n  codeSnippetB: string\n  matchingLines: number[]\n}\n\ninterface PlagiarismSummary {\n  totalSubmissions: number\n  flaggedPairs: number\n  averageSimilarity: number\n  scanDate: string\n}\n\nexport function TeacherPlagiarismDashboard({ contestId }: { contestId: string }) {\n  const [selectedPair, setSelectedPair] = useState<PlagiarismPair | null>(null)\n  const queryClient = useQueryClient()\n\n  // Fetch plagiarism data\n  const { data: plagiarismData, isLoading } = useQuery({\n    queryKey: [\"plagiarism\", contestId],\n    queryFn: async () => {\n      const response = await fetch(`/api/plagiarism/check?contestId=${contestId}`)\n      if (!response.ok) throw new Error(\"Failed to fetch plagiarism data\")\n      return response.json()\n    },\n  })\n\n  // Scan mutation\n  const scanMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/plagiarism/check?contestId=${contestId}`, {\n        method: \"POST\",\n      })\n      if (!response.ok) throw new Error(\"Failed to scan submissions\")\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"plagiarism\", contestId] })\n      toast.success(\"Plagiarism scan completed successfully\")\n    },\n    onError: () => {\n      toast.error(\"Failed to scan submissions\")\n    },\n  })\n\n  const getSimilarityColor = (similarity: number) => {\n    if (similarity < 30) return \"bg-green-100 text-green-800 border-green-200\"\n    if (similarity <= 70) return \"bg-yellow-100 text-yellow-800 border-yellow-200\"\n    return \"bg-red-100 text-red-800 border-red-200\"\n  }\n\n  const getSimilarityIcon = (similarity: number) => {\n    if (similarity < 30) return <CheckCircle className=\"h-4 w-4 text-green-600\" />\n    if (similarity <= 70) return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n    return <XCircle className=\"h-4 w-4 text-red-600\" />\n  }\n\n  const summary: PlagiarismSummary = plagiarismData?.summary || {\n    totalSubmissions: 0,\n    flaggedPairs: 0,\n    averageSimilarity: 0,\n    scanDate: new Date().toISOString(),\n  }\n\n  const pairs: PlagiarismPair[] = plagiarismData?.pairs || []\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Submissions</CardTitle>\n            <Scan className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{summary.totalSubmissions}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Scanned on {new Date(summary.scanDate).toLocaleDateString()}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Flagged Pairs</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{summary.flaggedPairs}</div>\n            <p className=\"text-xs text-muted-foreground\">Requiring review</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Similarity</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{summary.averageSimilarity.toFixed(1)}%</div>\n            <p className=\"text-xs text-muted-foreground\">Across all pairs</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={() => scanMutation.mutate()} disabled={scanMutation.isPending} className=\"w-full\">\n              {scanMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Scanning...\n                </>\n              ) : (\n                <>\n                  <Scan className=\"mr-2 h-4 w-4\" />\n                  Scan Now\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Suspicious Pairs Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Suspicious Pairs</CardTitle>\n          <CardDescription>Submissions with potential plagiarism detected</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : pairs.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">No suspicious pairs detected</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Student A</TableHead>\n                  <TableHead>Student B</TableHead>\n                  <TableHead>Similarity</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {pairs.map((pair) => (\n                  <TableRow key={pair.id} className={getSimilarityColor(pair.similarity)}>\n                    <TableCell className=\"font-medium\">{pair.studentA}</TableCell>\n                    <TableCell className=\"font-medium\">{pair.studentB}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {getSimilarityIcon(pair.similarity)}\n                        <Badge variant=\"outline\" className={getSimilarityColor(pair.similarity)}>\n                          {pair.similarity.toFixed(1)}%\n                        </Badge>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={pair.similarity > 70 ? \"destructive\" : pair.similarity > 30 ? \"secondary\" : \"default\"}\n                      >\n                        {pair.similarity > 70 ? \"High Risk\" : pair.similarity > 30 ? \"Medium Risk\" : \"Low Risk\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedPair(pair)}>\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Report\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>Plagiarism Report</DialogTitle>\n                            <DialogDescription>\n                              Code comparison between {pair.studentA} and {pair.studentB}\n                            </DialogDescription>\n                          </DialogHeader>\n\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <Badge className={getSimilarityColor(pair.similarity)}>\n                                {pair.similarity.toFixed(1)}% Similarity\n                              </Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {pair.matchingLines.length} matching lines detected\n                              </span>\n                            </div>\n\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <h4 className=\"font-semibold mb-2\">{pair.studentA}'s Code</h4>\n                                <pre className=\"bg-muted p-4 rounded-lg text-sm overflow-x-auto\">\n                                  <code>{pair.codeSnippetA}</code>\n                                </pre>\n                              </div>\n                              <div>\n                                <h4 className=\"font-semibold mb-2\">{pair.studentB}'s Code</h4>\n                                <pre className=\"bg-muted p-4 rounded-lg text-sm overflow-x-auto\">\n                                  <code>{pair.codeSnippetB}</code>\n                                </pre>\n                              </div>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":10079},"components/teacher-sidebar.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\nimport { ChevronDown, Plus, Eye, Users, AlertTriangle, BarChart3 } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { useRouter } from \"next/navigation\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface TeacherSidebarProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst recentContests = [\n  { id: 1, title: \"Data Structures Quiz\", status: \"active\", participants: 45 },\n  { id: 2, title: \"Algorithm Challenge\", status: \"upcoming\", participants: 0 },\n  { id: 3, title: \"Final Exam Practice\", status: \"ended\", participants: 58 },\n]\n\nconst classGroups = [\n  { id: 1, name: \"CS 101 - Fall 2024\", students: 60, active: 45 },\n  { id: 2, name: \"Advanced Algorithms\", students: 35, active: 32 },\n  { id: 3, name: \"Data Structures\", students: 42, active: 38 },\n]\n\nexport function TeacherSidebar({ isOpen, onClose }: TeacherSidebarProps) {\n  const [contestsSection, setContestsSection] = useState<string>(\"contests\")\n  const [classesSection, setClassesSection] = useState<string>(\"classes\")\n  const router = useRouter()\n  const { toast } = useToast()\n\n  const handleCreateContest = () => {\n    router.push(\"/teacher/contests/create\")\n    toast({\n      title: \"Creating new contest\",\n      description: \"Redirecting to contest creation page...\",\n    })\n  }\n\n  const handleViewContest = (contestId: number, contestTitle: string) => {\n    router.push(`/teacher/contests/${contestId}`)\n    toast({\n      title: \"Opening contest\",\n      description: `Viewing ${contestTitle}...`,\n    })\n  }\n\n  const handleViewClass = (classId: number, className: string) => {\n    router.push(`/teacher/classes/${classId}`)\n    toast({\n      title: \"Opening class\",\n      description: `Viewing ${className}...`,\n    })\n  }\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && <div className=\"fixed inset-0 z-40 bg-background/80 backdrop-blur-sm md:hidden\" onClick={onClose} />}\n\n      {/* Sidebar */}\n      <aside\n        className={cn(\n          \"fixed left-0 top-16 z-50 h-[calc(100vh-4rem)] w-80 transform border-r border-border bg-card transition-transform duration-200 ease-in-out md:relative md:top-0 md:h-[calc(100vh-4rem)] md:translate-x-0\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\",\n        )}\n      >\n        <ScrollArea className=\"h-full px-4 py-6\">\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <div className=\"space-y-2\">\n              <h3 className=\"font-medium text-sm text-muted-foreground\">Quick Actions</h3>\n              <Button className=\"w-full justify-start\" onClick={handleCreateContest}>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create Contest\n              </Button>\n              <Button variant=\"outline\" className=\"w-full justify-start bg-transparent\">\n                <BarChart3 className=\"mr-2 h-4 w-4\" />\n                View Analytics\n              </Button>\n            </div>\n\n            {/* Recent Contests */}\n            <Collapsible\n              open={contestsSection === \"contests\"}\n              onOpenChange={() => setContestsSection(contestsSection === \"contests\" ? \"\" : \"contests\")}\n            >\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between p-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4 text-primary\" />\n                    <span className=\"font-medium\">Recent Contests</span>\n                    <Badge variant=\"secondary\" className=\"ml-auto\">\n                      {recentContests.length}\n                    </Badge>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2 mt-2\">\n                {recentContests.map((contest) => (\n                  <div\n                    key={contest.id}\n                    className=\"rounded-lg border border-border p-3 hover:bg-accent/50 transition-colors cursor-pointer\"\n                    onClick={() => handleViewContest(contest.id, contest.title)}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm\">{contest.title}</h4>\n                        <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Users className=\"h-3 w-3\" />\n                            {contest.participants} participants\n                          </div>\n                        </div>\n                      </div>\n                      <Badge\n                        variant={\n                          contest.status === \"active\"\n                            ? \"default\"\n                            : contest.status === \"upcoming\"\n                              ? \"secondary\"\n                              : \"outline\"\n                        }\n                        className=\"text-xs\"\n                      >\n                        {contest.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n\n            {/* Class Groups */}\n            <Collapsible\n              open={classesSection === \"classes\"}\n              onOpenChange={() => setClassesSection(classesSection === \"classes\" ? \"\" : \"classes\")}\n            >\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between p-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-accent\" />\n                    <span className=\"font-medium\">My Classes</span>\n                    <Badge variant=\"outline\" className=\"ml-auto\">\n                      {classGroups.length}\n                    </Badge>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2 mt-2\">\n                {classGroups.map((classGroup) => (\n                  <div\n                    key={classGroup.id}\n                    className=\"rounded-lg border border-border p-3 hover:bg-accent/50 transition-colors cursor-pointer\"\n                    onClick={() => handleViewClass(classGroup.id, classGroup.name)}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm\">{classGroup.name}</h4>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {classGroup.active}/{classGroup.students} students active\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n\n            {/* Alerts */}\n            <div className=\"space-y-2\">\n              <h3 className=\"font-medium text-sm text-muted-foreground flex items-center gap-2\">\n                <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n                Alerts\n              </h3>\n              <div className=\"rounded-lg border border-destructive/20 p-3 bg-destructive/5\">\n                <p className=\"text-sm font-medium text-destructive\">2 Plagiarism Alerts</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">Requires your attention</p>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2 bg-transparent\">\n                  Review Now\n                </Button>\n              </div>\n            </div>\n          </div>\n        </ScrollArea>\n      </aside>\n    </>\n  )\n}\n","size_bytes":8180},"components/test-results.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\nimport { CheckCircle, XCircle, Clock, MemoryStick, ChevronDown } from \"lucide-react\"\nimport { useState } from \"react\"\n\ninterface TestCase {\n  id: number\n  input: string\n  expectedOutput: string\n  actualOutput: string\n  status: \"passed\" | \"failed\" | \"running\"\n  executionTime: string\n  memory: string\n}\n\ninterface TestResultsProps {\n  testCases: TestCase[]\n}\n\nexport function TestResults({ testCases }: TestResultsProps) {\n  const [expandedCases, setExpandedCases] = useState<Set<number>>(new Set())\n\n  const toggleExpanded = (id: number) => {\n    const newExpanded = new Set(expandedCases)\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id)\n    } else {\n      newExpanded.add(id)\n    }\n    setExpandedCases(newExpanded)\n  }\n\n  const passedCount = testCases.filter((tc) => tc.status === \"passed\").length\n  const totalCount = testCases.length\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"passed\":\n        return <CheckCircle className=\"h-4 w-4 text-green-400\" />\n      case \"failed\":\n        return <XCircle className=\"h-4 w-4 text-red-400\" />\n      default:\n        return <Clock className=\"h-4 w-4 text-yellow-400 animate-spin\" />\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"passed\":\n        return \"text-green-400\"\n      case \"failed\":\n        return \"text-red-400\"\n      default:\n        return \"text-yellow-400\"\n    }\n  }\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">Test Results</CardTitle>\n          <Badge variant={passedCount === totalCount ? \"default\" : \"destructive\"}>\n            {passedCount}/{totalCount} Passed\n          </Badge>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 p-0\">\n        <ScrollArea className=\"h-full px-6 pb-6\">\n          <div className=\"space-y-3\">\n            {testCases.map((testCase) => (\n              <Collapsible\n                key={testCase.id}\n                open={expandedCases.has(testCase.id)}\n                onOpenChange={() => toggleExpanded(testCase.id)}\n              >\n                <CollapsibleTrigger className=\"w-full\">\n                  <div className=\"flex items-center justify-between p-3 rounded-lg border border-border hover:bg-accent/50 transition-colors\">\n                    <div className=\"flex items-center gap-3\">\n                      {getStatusIcon(testCase.status)}\n                      <span className=\"font-medium\">Test Case {testCase.id}</span>\n                      <span className={`text-sm font-medium ${getStatusColor(testCase.status)}`}>\n                        {testCase.status.charAt(0).toUpperCase() + testCase.status.slice(1)}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                        <Clock className=\"h-3 w-3\" />\n                        {testCase.executionTime}\n                      </div>\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                        <MemoryStick className=\"h-3 w-3\" />\n                        {testCase.memory}\n                      </div>\n                      <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n                    </div>\n                  </div>\n                </CollapsibleTrigger>\n\n                <CollapsibleContent>\n                  <div className=\"mt-2 p-4 rounded-lg bg-muted/50 space-y-3\">\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Input:</h4>\n                      <pre className=\"text-xs bg-background p-2 rounded border font-mono overflow-x-auto\">\n                        {testCase.input}\n                      </pre>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Expected Output:</h4>\n                      <pre className=\"text-xs bg-background p-2 rounded border font-mono overflow-x-auto\">\n                        {testCase.expectedOutput}\n                      </pre>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Your Output:</h4>\n                      <pre\n                        className={`text-xs p-2 rounded border font-mono overflow-x-auto ${\n                          testCase.status === \"passed\"\n                            ? \"bg-green-50 border-green-200 text-green-800 dark:bg-green-950 dark:border-green-800 dark:text-green-200\"\n                            : \"bg-red-50 border-red-200 text-red-800 dark:bg-red-950 dark:border-red-800 dark:text-red-200\"\n                        }`}\n                      >\n                        {testCase.actualOutput}\n                      </pre>\n                    </div>\n\n                    {testCase.status === \"failed\" && (\n                      <div className=\"text-xs text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-950 p-2 rounded border border-red-200 dark:border-red-800\">\n                        <strong>Error:</strong> Output does not match expected result\n                      </div>\n                    )}\n                  </div>\n                </CollapsibleContent>\n              </Collapsible>\n            ))}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":5798},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"contexts/auth-context.tsx":{"content":"\"use client\"\n\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\n\ninterface User {\n  id: string\n  email: string\n  name: string\n  role: \"student\" | \"teacher\"\n  institution?: string\n  department?: string\n}\n\ninterface AuthContextType {\n  user: User | null\n  login: (email: string, password: string, role: \"student\" | \"teacher\") => Promise<void>\n  logout: () => void\n  isLoading: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    // Check for existing session\n    const savedUser = localStorage.getItem(\"user\")\n    if (savedUser) {\n      setUser(JSON.parse(savedUser))\n    }\n    setIsLoading(false)\n  }, [])\n\n  const login = async (email: string, password: string, role: \"student\" | \"teacher\") => {\n    setIsLoading(true)\n\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n\n    const mockUser: User = {\n      id: Math.random().toString(36).substr(2, 9),\n      email,\n      name: role === \"student\" ? \"John Doe\" : \"Dr. Jane Smith\",\n      role,\n      institution: \"University of Technology\",\n      department: role === \"teacher\" ? \"Computer Science\" : undefined,\n    }\n\n    setUser(mockUser)\n    localStorage.setItem(\"user\", JSON.stringify(mockUser))\n    setIsLoading(false)\n  }\n\n  const logout = () => {\n    setUser(null)\n    localStorage.removeItem(\"user\")\n  }\n\n  return <AuthContext.Provider value={{ user, login, logout, isLoading }}>{children}</AuthContext.Provider>\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n","size_bytes":1869},"hooks/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"hooks/use-websocket.ts":{"content":"\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\n\ninterface UseWebSocketOptions {\n  onMessage?: (data: any) => void\n  onConnect?: () => void\n  onDisconnect?: () => void\n  reconnectInterval?: number\n}\n\nexport function useWebSocket(url: string, options: UseWebSocketOptions = {}) {\n  const [isConnected, setIsConnected] = useState(false)\n  const [lastMessage, setLastMessage] = useState<any>(null)\n  const wsRef = useRef<WebSocket | null>(null)\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>()\n\n  const { onMessage, onConnect, onDisconnect, reconnectInterval = 3000 } = options\n\n  const connect = () => {\n    try {\n      wsRef.current = new WebSocket(url)\n\n      wsRef.current.onopen = () => {\n        setIsConnected(true)\n        onConnect?.()\n        console.log(\"[v0] WebSocket connected\")\n      }\n\n      wsRef.current.onmessage = (event) => {\n        const data = JSON.parse(event.data)\n        setLastMessage(data)\n        onMessage?.(data)\n      }\n\n      wsRef.current.onclose = () => {\n        setIsConnected(false)\n        onDisconnect?.()\n        console.log(\"[v0] WebSocket disconnected, attempting to reconnect...\")\n\n        // Attempt to reconnect\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect()\n        }, reconnectInterval)\n      }\n\n      wsRef.current.onerror = (error) => {\n        console.error(\"[v0] WebSocket error:\", error)\n      }\n    } catch (error) {\n      console.error(\"[v0] Failed to connect WebSocket:\", error)\n    }\n  }\n\n  const sendMessage = (message: any) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message))\n    }\n  }\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current)\n    }\n    wsRef.current?.close()\n  }\n\n  useEffect(() => {\n    connect()\n    return () => disconnect()\n  }, [url])\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n    disconnect,\n  }\n}\n","size_bytes":1973},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4337},"app/admin/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/admin/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { CreateContestModal } from \"@/components/create-contest-modal\"\nimport { ContestManagementTable } from \"@/components/contest-management-table\"\nimport { PlagiarismMonitor } from \"@/components/plagiarism-monitor\"\nimport { LiveContestMonitor } from \"@/components/live-contest-monitor\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Users,\n  Trophy,\n  AlertTriangle,\n  TrendingUp,\n  Eye,\n  Settings,\n  BarChart3,\n  Shield,\n  Clock,\n  CheckCircle,\n} from \"lucide-react\"\n\nconst mockAdminStats = {\n  totalStudents: 1247,\n  activeContests: 8,\n  pendingReviews: 23,\n  flaggedSubmissions: 7,\n  averageScore: 78.5,\n  completionRate: 84.2,\n  trends: {\n    studentsGrowth: 12,\n    contestParticipation: 8.5,\n    scoreImprovement: 3.2,\n  },\n}\n\nconst mockRecentActivity = [\n  {\n    id: 1,\n    type: \"contest_created\",\n    message: \"New contest 'Algorithm Sprint #45' created\",\n    timestamp: \"2 minutes ago\",\n    user: \"Prof. Johnson\",\n  },\n  {\n    id: 2,\n    type: \"plagiarism_detected\",\n    message: \"High similarity detected in submission #12345\",\n    timestamp: \"15 minutes ago\",\n    severity: \"high\",\n  },\n  {\n    id: 3,\n    type: \"contest_ended\",\n    message: \"Weekly Challenge #42 has ended with 156 participants\",\n    timestamp: \"1 hour ago\",\n  },\n  {\n    id: 4,\n    type: \"grade_updated\",\n    message: \"Manual grade adjustment for student alice_codes\",\n    timestamp: \"2 hours ago\",\n    user: \"Prof. Smith\",\n  },\n]\n\nexport default function AdminDashboard() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case \"contest_created\":\n        return <Trophy className=\"h-4 w-4 text-blue-400\" />\n      case \"plagiarism_detected\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n      case \"contest_ended\":\n        return <CheckCircle className=\"h-4 w-4 text-green-400\" />\n      case \"grade_updated\":\n        return <Settings className=\"h-4 w-4 text-yellow-400\" />\n      default:\n        return <Clock className=\"h-4 w-4 text-muted-foreground\" />\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n      <div className=\"flex\">\n        <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            {/* Header */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-balance\">Teacher Dashboard</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">\n                  Manage contests, monitor student progress, and oversee platform activities.\n                </p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CreateContestModal />\n                <Button variant=\"outline\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Export Reports\n                </Button>\n              </div>\n            </div>\n\n            {/* Stats Overview */}\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Total Students</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">{mockAdminStats.totalStudents.toLocaleString()}</div>\n                  <div className=\"text-xs text-green-400 mt-1\">+{mockAdminStats.trends.studentsGrowth}% this month</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Active Contests</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">{mockAdminStats.activeContests}</div>\n                  <div className=\"text-xs text-blue-400 mt-1\">\n                    +{mockAdminStats.trends.contestParticipation}% participation\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Pending Reviews</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">{mockAdminStats.pendingReviews}</div>\n                  <div className=\"text-xs text-yellow-400 mt-1\">Requires attention</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Shield className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Flagged Submissions</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">{mockAdminStats.flaggedSubmissions}</div>\n                  <div className=\"text-xs text-red-400 mt-1\">High priority</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions & Recent Activity */}\n            <div className=\"grid gap-6 lg:grid-cols-3\">\n              <div className=\"lg:col-span-2\">\n                <Tabs defaultValue=\"contests\" className=\"space-y-4\">\n                  <TabsList className=\"grid w-full grid-cols-4\">\n                    <TabsTrigger value=\"contests\">Contest Management</TabsTrigger>\n                    <TabsTrigger value=\"plagiarism\">Plagiarism Monitor</TabsTrigger>\n                    <TabsTrigger value=\"live\">Live Monitoring</TabsTrigger>\n                    <TabsTrigger value=\"grades\">Grade Management</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"contests\" className=\"space-y-4\">\n                    <ContestManagementTable />\n                  </TabsContent>\n\n                  <TabsContent value=\"plagiarism\" className=\"space-y-4\">\n                    <PlagiarismMonitor />\n                  </TabsContent>\n\n                  <TabsContent value=\"live\" className=\"space-y-4\">\n                    <LiveContestMonitor />\n                  </TabsContent>\n\n                  <TabsContent value=\"grades\" className=\"space-y-4\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Grade Management</CardTitle>\n                        <CardDescription>Review and adjust student grades</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          <Settings className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                          <p>Grade management interface would go here</p>\n                          <p className=\"text-sm mt-2\">Bulk actions, manual overrides, and grade analytics</p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n                </Tabs>\n              </div>\n\n              {/* Recent Activity Sidebar */}\n              <div>\n                <Card className=\"sticky top-6\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-5 w-5\" />\n                      Recent Activity\n                    </CardTitle>\n                    <CardDescription>Latest platform events and notifications</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {mockRecentActivity.map((activity) => (\n                      <div key={activity.id} className=\"flex items-start gap-3 p-3 rounded-lg border border-border\">\n                        {getActivityIcon(activity.type)}\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-pretty\">{activity.message}</p>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <span className=\"text-xs text-muted-foreground\">{activity.timestamp}</span>\n                            {activity.user && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {activity.user}\n                              </Badge>\n                            )}\n                            {activity.severity === \"high\" && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                High Priority\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n\n                    <Button variant=\"outline\" className=\"w-full bg-transparent\" size=\"sm\">\n                      View All Activity\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* System Health */}\n                <Card className=\"mt-6\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">System Health</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Server Performance</span>\n                        <span className=\"font-medium\">98%</span>\n                      </div>\n                      <Progress value={98} className=\"h-2\" />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Database Health</span>\n                        <span className=\"font-medium\">95%</span>\n                      </div>\n                      <Progress value={95} className=\"h-2\" />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Code Execution</span>\n                        <span className=\"font-medium\">99%</span>\n                      </div>\n                      <Progress value={99} className=\"h-2\" />\n                    </div>\n\n                    <div className=\"pt-2 border-t border-border\">\n                      <div className=\"flex items-center gap-2 text-sm text-green-400\">\n                        <CheckCircle className=\"h-4 w-4\" />\n                        All systems operational\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":11818},"app/dashboard/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { ContestCard } from \"@/components/contest-card\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Trophy, Target, Clock, TrendingUp } from \"lucide-react\"\n\nconst mockContests = [\n  {\n    id: 1,\n    title: \"Weekly Challenge #42\",\n    description: \"Test your algorithmic skills with dynamic programming and graph theory problems.\",\n    duration: \"3 hours\",\n    participants: 156,\n    maxParticipants: 500,\n    status: \"active\" as const,\n    endTime: new Date(Date.now() + 2 * 60 * 60 * 1000 + 34 * 60 * 1000).toISOString(),\n    difficulty: \"Medium\" as const,\n    prize: \"$500\",\n  },\n  {\n    id: 2,\n    title: \"Algorithm Sprint\",\n    description: \"Fast-paced coding challenge focusing on optimization and time complexity.\",\n    duration: \"1.5 hours\",\n    participants: 89,\n    maxParticipants: 200,\n    status: \"active\" as const,\n    endTime: new Date(Date.now() + 45 * 60 * 1000).toISOString(),\n    difficulty: \"Hard\" as const,\n    prize: \"$200\",\n  },\n  {\n    id: 3,\n    title: \"Monthly Championship\",\n    description: \"The ultimate coding competition with challenging problems across all domains.\",\n    duration: \"4 hours\",\n    participants: 0,\n    maxParticipants: 1000,\n    status: \"upcoming\" as const,\n    startTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    difficulty: \"Expert\" as const,\n    prize: \"$2000\",\n  },\n  {\n    id: 4,\n    title: \"Beginner Bootcamp\",\n    description: \"Perfect for newcomers to competitive programming. Learn the basics!\",\n    duration: \"2 hours\",\n    participants: 0,\n    maxParticipants: 300,\n    status: \"upcoming\" as const,\n    startTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n    difficulty: \"Easy\" as const,\n  },\n  {\n    id: 5,\n    title: \"Data Structures Deep Dive\",\n    description: \"Advanced problems focusing on trees, graphs, and complex data structures.\",\n    duration: \"3 hours\",\n    participants: 234,\n    status: \"ended\" as const,\n    difficulty: \"Hard\" as const,\n    prize: \"$750\",\n  },\n]\n\nexport default function StudentDashboard() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n\n  return (\n    <ProtectedRoute requiredRole=\"student\">\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6 md:ml-0\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"mb-8\">\n                <h1 className=\"text-3xl font-bold text-balance\">Student Dashboard</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">\n                  Join live contests, practice problems, and compete with developers worldwide.\n                </p>\n              </div>\n\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Contests Joined</CardTitle>\n                    <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">12</div>\n                    <p className=\"text-xs text-muted-foreground\">+2 from last month</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Problems Solved</CardTitle>\n                    <Target className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">89</div>\n                    <p className=\"text-xs text-muted-foreground\">+12 from last week</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Current Rank</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">#247</div>\n                    <p className=\"text-xs text-muted-foreground\">↑15 positions</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Study Streak</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">7 days</div>\n                    <p className=\"text-xs text-muted-foreground\">Keep it up!</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-3 mb-8\">\n                <Card className=\"md:col-span-2\">\n                  <CardHeader>\n                    <CardTitle>Weekly Progress</CardTitle>\n                    <CardDescription>Your coding activity this week</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Problems Solved</span>\n                        <span>12/15</span>\n                      </div>\n                      <Progress value={80} className=\"h-2\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Contest Participation</span>\n                        <span>2/3</span>\n                      </div>\n                      <Progress value={67} className=\"h-2\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Study Time</span>\n                        <span>8.5/10 hours</span>\n                      </div>\n                      <Progress value={85} className=\"h-2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Achievements</CardTitle>\n                    <CardDescription>Recent milestones</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"secondary\" className=\"w-8 h-8 rounded-full p-0 flex items-center justify-center\">\n                        🏆\n                      </Badge>\n                      <div>\n                        <p className=\"text-sm font-medium\">First Place</p>\n                        <p className=\"text-xs text-muted-foreground\">Weekly Challenge #41</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"secondary\" className=\"w-8 h-8 rounded-full p-0 flex items-center justify-center\">\n                        🎯\n                      </Badge>\n                      <div>\n                        <p className=\"text-sm font-medium\">Problem Solver</p>\n                        <p className=\"text-xs text-muted-foreground\">Solved 50+ problems</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"secondary\" className=\"w-8 h-8 rounded-full p-0 flex items-center justify-center\">\n                        🔥\n                      </Badge>\n                      <div>\n                        <p className=\"text-sm font-medium\">Streak Master</p>\n                        <p className=\"text-xs text-muted-foreground\">7-day study streak</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold mb-4\">Available Contests</h2>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                {mockContests.map((contest) => (\n                  <ContestCard key={contest.id} contest={contest} />\n                ))}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}\n","size_bytes":9327},"app/leaderboard/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/leaderboard/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { LeaderboardTable } from \"@/components/leaderboard-table\"\nimport { PerformanceChart } from \"@/components/performance-chart\"\nimport { StudentProfileCard } from \"@/components/student-profile-card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { CalendarIcon, Download, Search, Trophy, TrendingUp, Users, Target } from \"lucide-react\"\n\nconst mockLeaderboardData = [\n  {\n    rank: 1,\n    userId: \"user_1\",\n    username: \"alice_codes\",\n    fullName: \"Alice Johnson\",\n    avatar: \"/diverse-user-avatars.png\",\n    score: 2850,\n    problemsSolved: 45,\n    contestsParticipated: 12,\n    averageScore: 95.2,\n    lastSubmission: \"2 hours ago\",\n    streak: 15,\n    badges: [\"Top Performer\", \"Speed Demon\"],\n    performance: [\n      { date: \"2024-01-01\", score: 2100 },\n      { date: \"2024-01-15\", score: 2300 },\n      { date: \"2024-02-01\", score: 2500 },\n      { date: \"2024-02-15\", score: 2700 },\n      { date: \"2024-03-01\", score: 2850 },\n    ],\n  },\n  {\n    rank: 2,\n    userId: \"user_2\",\n    username: \"bob_dev\",\n    fullName: \"Bob Smith\",\n    avatar: \"/diverse-user-avatars.png\",\n    score: 2720,\n    problemsSolved: 42,\n    contestsParticipated: 10,\n    averageScore: 91.8,\n    lastSubmission: \"1 hour ago\",\n    streak: 8,\n    badges: [\"Consistent Coder\"],\n    performance: [\n      { date: \"2024-01-01\", score: 1950 },\n      { date: \"2024-01-15\", score: 2150 },\n      { date: \"2024-02-01\", score: 2350 },\n      { date: \"2024-02-15\", score: 2550 },\n      { date: \"2024-03-01\", score: 2720 },\n    ],\n  },\n  {\n    rank: 3,\n    userId: \"user_3\",\n    username: \"charlie_algo\",\n    fullName: \"Charlie Brown\",\n    avatar: \"/diverse-user-avatars.png\",\n    score: 2650,\n    problemsSolved: 38,\n    contestsParticipated: 15,\n    averageScore: 88.5,\n    lastSubmission: \"30 minutes ago\",\n    streak: 12,\n    badges: [\"Algorithm Master\", \"Contest Veteran\"],\n    performance: [\n      { date: \"2024-01-01\", score: 1800 },\n      { date: \"2024-01-15\", score: 2000 },\n      { date: \"2024-02-01\", score: 2200 },\n      { date: \"2024-02-15\", score: 2450 },\n      { date: \"2024-03-01\", score: 2650 },\n    ],\n  },\n  // Add more mock data...\n]\n\nconst mockContests = [\n  { id: 1, title: \"Weekly Challenge #42\", date: \"2024-03-01\" },\n  { id: 2, title: \"Algorithm Sprint\", date: \"2024-02-28\" },\n  { id: 3, title: \"Monthly Championship\", date: \"2024-02-15\" },\n]\n\nexport default function LeaderboardPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [selectedContest, setSelectedContest] = useState(\"all\")\n  const [dateRange, setDateRange] = useState<{ from?: Date; to?: Date }>({})\n  const [selectedStudent, setSelectedStudent] = useState<string | null>(null)\n  const [itemsPerPage, setItemsPerPage] = useState(\"20\")\n\n  const filteredData = mockLeaderboardData.filter(\n    (student) =>\n      student.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      student.fullName.toLowerCase().includes(searchQuery.toLowerCase()),\n  )\n\n  const handleExportCSV = () => {\n    const csvContent = [\n      [\"Rank\", \"Username\", \"Full Name\", \"Score\", \"Problems Solved\", \"Contests\", \"Average Score\"],\n      ...filteredData.map((student) => [\n        student.rank,\n        student.username,\n        student.fullName,\n        student.score,\n        student.problemsSolved,\n        student.contestsParticipated,\n        student.averageScore,\n      ]),\n    ]\n      .map((row) => row.join(\",\"))\n      .join(\"\\n\")\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = \"leaderboard.csv\"\n    a.click()\n    window.URL.revokeObjectURL(url)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n      <div className=\"flex\">\n        <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            {/* Header */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-balance\">Leaderboard & Analytics</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">\n                  Track student performance and analyze competitive programming progress.\n                </p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button variant=\"outline\" onClick={handleExportCSV}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export CSV\n                </Button>\n                <Button variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export PDF\n                </Button>\n              </div>\n            </div>\n\n            {/* Stats Overview */}\n            <div className=\"grid gap-4 md:grid-cols-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Total Students</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">1,247</div>\n                  <div className=\"text-xs text-green-400 mt-1\">+12% from last month</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Active Contests</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">8</div>\n                  <div className=\"text-xs text-blue-400 mt-1\">2 ending today</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Target className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Avg Score</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">78.5</div>\n                  <div className=\"text-xs text-green-400 mt-1\">+3.2% improvement</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Submissions</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">15,432</div>\n                  <div className=\"text-xs text-green-400 mt-1\">+8% this week</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row gap-4\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search students...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n\n                  <Select value={selectedContest} onValueChange={setSelectedContest}>\n                    <SelectTrigger className=\"w-full lg:w-48\">\n                      <SelectValue placeholder=\"Select contest\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Contests</SelectItem>\n                      {mockContests.map((contest) => (\n                        <SelectItem key={contest.id} value={contest.id.toString()}>\n                          {contest.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button variant=\"outline\" className=\"w-full lg:w-48 bg-transparent\">\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        Date Range\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                      <Calendar mode=\"range\" selected={dateRange} onSelect={setDateRange} numberOfMonths={2} />\n                    </PopoverContent>\n                  </Popover>\n\n                  <Select value={itemsPerPage} onValueChange={setItemsPerPage}>\n                    <SelectTrigger className=\"w-full lg:w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"20\">20 per page</SelectItem>\n                      <SelectItem value=\"50\">50 per page</SelectItem>\n                      <SelectItem value=\"100\">100 per page</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Main Content */}\n            <Tabs defaultValue=\"leaderboard\" className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"leaderboard\">Leaderboard</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Performance Analytics</TabsTrigger>\n                <TabsTrigger value=\"comparison\">Student Comparison</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"leaderboard\" className=\"space-y-4\">\n                <div className=\"grid gap-6 lg:grid-cols-3\">\n                  <div className=\"lg:col-span-2\">\n                    <LeaderboardTable\n                      data={filteredData}\n                      itemsPerPage={Number.parseInt(itemsPerPage)}\n                      onStudentSelect={setSelectedStudent}\n                    />\n                  </div>\n                  <div>\n                    {selectedStudent && (\n                      <StudentProfileCard student={filteredData.find((s) => s.userId === selectedStudent)!} />\n                    )}\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-4\">\n                <div className=\"grid gap-6 lg:grid-cols-2\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Performance Trends</CardTitle>\n                      <CardDescription>Student progress over time</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <PerformanceChart data={mockLeaderboardData.slice(0, 5)} />\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Score Distribution</CardTitle>\n                      <CardDescription>Distribution of student scores</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                        Score distribution chart would go here\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Contest Participation</CardTitle>\n                    <CardDescription>Student engagement across different contests</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                      Contest participation chart would go here\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"comparison\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Student Comparison Tool</CardTitle>\n                    <CardDescription>Compare performance between multiple students</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex flex-wrap gap-2\">\n                        {mockLeaderboardData.slice(0, 3).map((student) => (\n                          <Badge key={student.userId} variant=\"secondary\" className=\"px-3 py-1\">\n                            {student.username}\n                          </Badge>\n                        ))}\n                        <Button variant=\"outline\" size=\"sm\">\n                          + Add Student\n                        </Button>\n                      </div>\n\n                      <div className=\"h-64 flex items-center justify-center text-muted-foreground border border-dashed border-border rounded-lg\">\n                        Comparison chart would go here\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":14450},"app/plagiarism/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/plagiarism/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { PlagiarismScanner } from \"@/components/plagiarism-scanner\"\nimport { CodeComparisonView } from \"@/components/code-comparison-view\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Eye, Shield, AlertTriangle, TrendingUp } from \"lucide-react\"\n\nexport default function PlagiarismPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [scanResults, setScanResults] = useState<any>(null)\n  const [selectedComparison, setSelectedComparison] = useState<any>(null)\n\n  const handleScanComplete = (results: any) => {\n    setScanResults(results)\n  }\n\n  const handleViewComparison = async (submissionIdA: string, submissionIdB: string) => {\n    try {\n      const response = await fetch(\"/api/plagiarism/compare\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ submissionIdA, submissionIdB }),\n      })\n\n      const data = await response.json()\n      if (data.success) {\n        setSelectedComparison(data.data)\n      }\n    } catch (error) {\n      console.error(\"Failed to load comparison:\", error)\n    }\n  }\n\n  if (selectedComparison) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n        <div className=\"flex\">\n          <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n          <main className=\"flex-1 p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              <CodeComparisonView comparison={selectedComparison} onClose={() => setSelectedComparison(null)} />\n            </div>\n          </main>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n      <div className=\"flex\">\n        <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            {/* Header */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-balance\">Plagiarism Detection</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">\n                  Automated code similarity analysis and plagiarism detection system.\n                </p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                  <Shield className=\"h-3 w-3 mr-1\" />\n                  System Active\n                </Badge>\n              </div>\n            </div>\n\n            {/* Main Content */}\n            <Tabs defaultValue=\"scanner\" className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"scanner\">Scanner</TabsTrigger>\n                <TabsTrigger value=\"results\">Results</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"scanner\" className=\"space-y-4\">\n                <PlagiarismScanner onScanComplete={handleScanComplete} />\n              </TabsContent>\n\n              <TabsContent value=\"results\" className=\"space-y-4\">\n                {scanResults ? (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Scan Results</CardTitle>\n                      <CardDescription>Found {scanResults.flaggedPairs} potential plagiarism cases</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"rounded-md border\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Students</TableHead>\n                              <TableHead>Similarity</TableHead>\n                              <TableHead>Risk Level</TableHead>\n                              <TableHead>Actions</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {scanResults.results.map((result: any) => (\n                              <TableRow key={result.id}>\n                                <TableCell>\n                                  <div className=\"space-y-1\">\n                                    <div className=\"font-medium\">{result.submissionA.username}</div>\n                                    <div className=\"text-sm text-muted-foreground\">\n                                      vs {result.submissionB.username}\n                                    </div>\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"font-bold text-primary\">{result.similarity}%</div>\n                                </TableCell>\n                                <TableCell>\n                                  <Badge variant={result.status === \"high_risk\" ? \"destructive\" : \"default\"}>\n                                    {result.status === \"high_risk\" ? \"High Risk\" : \"Medium Risk\"}\n                                  </Badge>\n                                </TableCell>\n                                <TableCell>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleViewComparison(result.submissionA.id, result.submissionB.id)}\n                                  >\n                                    <Eye className=\"h-4 w-4 mr-1\" />\n                                    Compare\n                                  </Button>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <Card>\n                    <CardContent className=\"p-12 text-center\">\n                      <div className=\"text-muted-foreground\">\n                        <AlertTriangle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                        <p className=\"text-lg mb-2\">No scan results available</p>\n                        <p className=\"text-sm\">Run a plagiarism scan to see results here.</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-5 w-5\" />\n                      Plagiarism Analytics\n                    </CardTitle>\n                    <CardDescription>Historical trends and detection statistics</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <TrendingUp className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>Analytics dashboard would go here</p>\n                      <p className=\"text-sm mt-2\">\n                        Charts showing detection trends, false positive rates, and system performance\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":8332},"app/problems/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/problems/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { CheckCircle, XCircle, AlertCircle, Search, Filter, Eye, Code2 } from \"lucide-react\"\n\nconst mockProblems = [\n  {\n    id: 1,\n    title: \"Two Sum\",\n    description:\n      \"Given an array of integers, return indices of the two numbers such that they add up to a specific target.\",\n    difficulty: \"Easy\",\n    category: \"Array\",\n    solved: true,\n    attempted: true,\n    acceptance: 85,\n    submissions: 1234567,\n  },\n  {\n    id: 2,\n    title: \"Binary Tree Traversal\",\n    description: \"Implement inorder, preorder, and postorder traversal of a binary tree.\",\n    difficulty: \"Medium\",\n    category: \"Tree\",\n    solved: false,\n    attempted: true,\n    acceptance: 67,\n    submissions: 456789,\n  },\n  {\n    id: 3,\n    title: \"Dynamic Programming Challenge\",\n    description: \"Solve a complex optimization problem using dynamic programming techniques.\",\n    difficulty: \"Hard\",\n    category: \"Dynamic Programming\",\n    solved: false,\n    attempted: false,\n    acceptance: 34,\n    submissions: 123456,\n  },\n  {\n    id: 4,\n    title: \"Graph Shortest Path\",\n    description: \"Find the shortest path between two nodes in a weighted graph using Dijkstra's algorithm.\",\n    difficulty: \"Medium\",\n    category: \"Graph\",\n    solved: true,\n    attempted: true,\n    acceptance: 56,\n    submissions: 234567,\n  },\n  {\n    id: 5,\n    title: \"String Pattern Matching\",\n    description: \"Implement efficient string pattern matching using KMP algorithm.\",\n    difficulty: \"Hard\",\n    category: \"String\",\n    solved: false,\n    attempted: false,\n    acceptance: 42,\n    submissions: 98765,\n  },\n]\n\nexport default function ProblemsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [difficultyFilter, setDifficultyFilter] = useState(\"all\")\n  const [categoryFilter, setCategoryFilter] = useState(\"all\")\n  const [statusFilter, setStatusFilter] = useState(\"all\")\n  const router = useRouter()\n  const { toast } = useToast()\n\n  const getStatusIcon = (solved: boolean, attempted: boolean) => {\n    if (solved) return <CheckCircle className=\"h-4 w-4 text-green-400\" />\n    if (attempted) return <AlertCircle className=\"h-4 w-4 text-yellow-400\" />\n    return <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"secondary\"\n      case \"Medium\":\n        return \"default\"\n      case \"Hard\":\n        return \"destructive\"\n      default:\n        return \"secondary\"\n    }\n  }\n\n  const handleViewProblem = (problemId: number, problemTitle: string) => {\n    router.push(`/problems/${problemId}/view`)\n    toast({\n      title: \"Opening problem\",\n      description: `Loading ${problemTitle}...`,\n    })\n  }\n\n  const handleSolveProblem = (problemId: number, problemTitle: string) => {\n    router.push(`/problems/${problemId}/solve`)\n    toast({\n      title: \"Starting solution\",\n      description: `Opening code editor for ${problemTitle}...`,\n    })\n  }\n\n  const filteredProblems = mockProblems.filter((problem) => {\n    const matchesSearch =\n      problem.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      problem.description.toLowerCase().includes(searchQuery.toLowerCase())\n    const matchesDifficulty = difficultyFilter === \"all\" || problem.difficulty === difficultyFilter\n    const matchesCategory = categoryFilter === \"all\" || problem.category === categoryFilter\n    const matchesStatus =\n      statusFilter === \"all\" ||\n      (statusFilter === \"solved\" && problem.solved) ||\n      (statusFilter === \"attempted\" && problem.attempted && !problem.solved) ||\n      (statusFilter === \"unsolved\" && !problem.attempted)\n\n    return matchesSearch && matchesDifficulty && matchesCategory && matchesStatus\n  })\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n      <div className=\"flex\">\n        <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-balance\">Practice Problems</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">\n                  Sharpen your coding skills with our curated collection of algorithmic challenges.\n                </p>\n              </div>\n              <Button>\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Advanced Filters\n              </Button>\n            </div>\n\n            {/* Search and Filters */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row gap-4\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search problems...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                  <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>\n                    <SelectTrigger className=\"w-full lg:w-40\">\n                      <SelectValue placeholder=\"Difficulty\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Difficulties</SelectItem>\n                      <SelectItem value=\"Easy\">Easy</SelectItem>\n                      <SelectItem value=\"Medium\">Medium</SelectItem>\n                      <SelectItem value=\"Hard\">Hard</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                    <SelectTrigger className=\"w-full lg:w-40\">\n                      <SelectValue placeholder=\"Category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      <SelectItem value=\"Array\">Array</SelectItem>\n                      <SelectItem value=\"Tree\">Tree</SelectItem>\n                      <SelectItem value=\"Graph\">Graph</SelectItem>\n                      <SelectItem value=\"Dynamic Programming\">DP</SelectItem>\n                      <SelectItem value=\"String\">String</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-full lg:w-40\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"solved\">Solved</SelectItem>\n                      <SelectItem value=\"attempted\">Attempted</SelectItem>\n                      <SelectItem value=\"unsolved\">Unsolved</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Problems List */}\n            <div className=\"space-y-4\">\n              {filteredProblems.map((problem) => (\n                <Card key={problem.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4 flex-1\">\n                        {getStatusIcon(problem.solved, problem.attempted)}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"font-semibold text-lg\">{problem.title}</h3>\n                            <Badge variant={getDifficultyColor(problem.difficulty)} className=\"text-xs\">\n                              {problem.difficulty}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {problem.category}\n                            </Badge>\n                          </div>\n                          <p className=\"text-muted-foreground text-sm text-pretty mb-3\">{problem.description}</p>\n                          <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                            <span>Acceptance: {problem.acceptance}%</span>\n                            <span>Submissions: {problem.submissions.toLocaleString()}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleViewProblem(problem.id, problem.title)}\n                        >\n                          <Eye className=\"h-3 w-3 mr-1\" />\n                          View\n                        </Button>\n                        <Button \n                          size=\"sm\"\n                          onClick={() => handleSolveProblem(problem.id, problem.title)}\n                        >\n                          <Code2 className=\"h-3 w-3 mr-1\" />\n                          {problem.solved ? \"Solve Again\" : \"Solve\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {filteredProblems.length === 0 && (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <div className=\"text-muted-foreground\">\n                    <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p className=\"text-lg mb-2\">No problems found</p>\n                    <p className=\"text-sm\">Try adjusting your search criteria or filters.</p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":11032},"app/profile/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Trophy, Edit, Save } from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\n\nconst achievements = [\n  {\n    id: 1,\n    title: \"First Contest\",\n    description: \"Participated in your first contest\",\n    earned: true,\n    date: \"2024-01-15\",\n  },\n  { id: 2, title: \"Problem Solver\", description: \"Solved 50+ problems\", earned: true, date: \"2024-02-20\" },\n  { id: 3, title: \"Speed Demon\", description: \"Solved a problem in under 5 minutes\", earned: false },\n  { id: 4, title: \"Consistency King\", description: \"7-day solving streak\", earned: true, date: \"2024-03-10\" },\n]\n\nconst contestHistory = [\n  { id: 1, name: \"Weekly Challenge #42\", rank: 15, score: 850, date: \"2024-03-15\" },\n  { id: 2, name: \"Algorithm Sprint\", rank: 8, score: 920, date: \"2024-03-08\" },\n  { id: 3, name: \"Data Structures Quiz\", rank: 23, score: 780, date: \"2024-03-01\" },\n]\n\nexport default function ProfilePage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [isEditing, setIsEditing] = useState(false)\n  const { user } = useAuth()\n  const [profileData, setProfileData] = useState({\n    name: user?.name || \"John Doe\",\n    email: user?.email || \"john.doe@example.com\",\n    bio: \"Passionate competitive programmer with a love for algorithms and data structures.\",\n    university: \"Tech University\",\n    year: \"3rd Year\",\n    major: \"Computer Science\",\n  })\n\n  const handleSave = () => {\n    setIsEditing(false)\n    // Here you would typically save to backend\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"student\">\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6 md:ml-0\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"mb-8\">\n                <h1 className=\"text-3xl font-bold text-balance\">My Profile</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">\n                  Manage your profile information and view your coding journey.\n                </p>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-3\">\n                {/* Profile Card */}\n                <Card className=\"md:col-span-1\">\n                  <CardHeader className=\"text-center\">\n                    <Avatar className=\"w-24 h-24 mx-auto mb-4\">\n                      <AvatarImage src=\"/diverse-user-avatars.png\" alt=\"Profile\" />\n                      <AvatarFallback className=\"text-2xl\">\n                        {profileData.name\n                          .split(\" \")\n                          .map((n) => n[0])\n                          .join(\"\")}\n                      </AvatarFallback>\n                    </Avatar>\n                    <CardTitle>{profileData.name}</CardTitle>\n                    <CardDescription>{profileData.email}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid gap-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Global Rank</span>\n                        <Badge variant=\"secondary\">#247</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Problems Solved</span>\n                        <span className=\"font-medium\">89</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Contests Joined</span>\n                        <span className=\"font-medium\">12</span>\n                      </div>\n                    </div>\n                    <Button\n                      className=\"w-full\"\n                      variant={isEditing ? \"default\" : \"outline\"}\n                      onClick={() => (isEditing ? handleSave() : setIsEditing(true))}\n                    >\n                      {isEditing ? <Save className=\"mr-2 h-4 w-4\" /> : <Edit className=\"mr-2 h-4 w-4\" />}\n                      {isEditing ? \"Save Changes\" : \"Edit Profile\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Main Content */}\n                <div className=\"md:col-span-2\">\n                  <Tabs defaultValue=\"info\" className=\"space-y-6\">\n                    <TabsList>\n                      <TabsTrigger value=\"info\">Information</TabsTrigger>\n                      <TabsTrigger value=\"achievements\">Achievements</TabsTrigger>\n                      <TabsTrigger value=\"history\">Contest History</TabsTrigger>\n                      <TabsTrigger value=\"stats\">Statistics</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"info\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Personal Information</CardTitle>\n                          <CardDescription>Update your profile details</CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <div className=\"grid gap-4 md:grid-cols-2\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"name\">Full Name</Label>\n                              <Input\n                                id=\"name\"\n                                value={profileData.name}\n                                onChange={(e) => setProfileData({ ...profileData, name: e.target.value })}\n                                disabled={!isEditing}\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"email\">Email</Label>\n                              <Input\n                                id=\"email\"\n                                type=\"email\"\n                                value={profileData.email}\n                                onChange={(e) => setProfileData({ ...profileData, email: e.target.value })}\n                                disabled={!isEditing}\n                              />\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"bio\">Bio</Label>\n                            <Textarea\n                              id=\"bio\"\n                              value={profileData.bio}\n                              onChange={(e) => setProfileData({ ...profileData, bio: e.target.value })}\n                              disabled={!isEditing}\n                              rows={3}\n                            />\n                          </div>\n                          <div className=\"grid gap-4 md:grid-cols-3\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"university\">University</Label>\n                              <Input\n                                id=\"university\"\n                                value={profileData.university}\n                                onChange={(e) => setProfileData({ ...profileData, university: e.target.value })}\n                                disabled={!isEditing}\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"year\">Year</Label>\n                              <Input\n                                id=\"year\"\n                                value={profileData.year}\n                                onChange={(e) => setProfileData({ ...profileData, year: e.target.value })}\n                                disabled={!isEditing}\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"major\">Major</Label>\n                              <Input\n                                id=\"major\"\n                                value={profileData.major}\n                                onChange={(e) => setProfileData({ ...profileData, major: e.target.value })}\n                                disabled={!isEditing}\n                              />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </TabsContent>\n\n                    <TabsContent value=\"achievements\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Achievements</CardTitle>\n                          <CardDescription>Your coding milestones and accomplishments</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"grid gap-4\">\n                            {achievements.map((achievement) => (\n                              <div\n                                key={achievement.id}\n                                className={`flex items-center gap-4 p-4 rounded-lg border ${\n                                  achievement.earned ? \"bg-accent/50\" : \"opacity-50\"\n                                }`}\n                              >\n                                <div\n                                  className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                                    achievement.earned ? \"bg-primary text-primary-foreground\" : \"bg-muted\"\n                                  }`}\n                                >\n                                  <Trophy className=\"h-6 w-6\" />\n                                </div>\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-medium\">{achievement.title}</h4>\n                                  <p className=\"text-sm text-muted-foreground\">{achievement.description}</p>\n                                  {achievement.earned && achievement.date && (\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\n                                      Earned on {new Date(achievement.date).toLocaleDateString()}\n                                    </p>\n                                  )}\n                                </div>\n                                {achievement.earned && <Badge variant=\"secondary\">Earned</Badge>}\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </TabsContent>\n\n                    <TabsContent value=\"history\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Contest History</CardTitle>\n                          <CardDescription>Your recent contest performances</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-4\">\n                            {contestHistory.map((contest) => (\n                              <div key={contest.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                                <div>\n                                  <h4 className=\"font-medium\">{contest.name}</h4>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {new Date(contest.date).toLocaleDateString()}\n                                  </p>\n                                </div>\n                                <div className=\"text-right\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Badge variant=\"outline\">Rank #{contest.rank}</Badge>\n                                    <span className=\"font-medium\">{contest.score} pts</span>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </TabsContent>\n\n                    <TabsContent value=\"stats\">\n                      <div className=\"grid gap-6\">\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Problem Solving Statistics</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span>Easy Problems</span>\n                                <span>45/60 (75%)</span>\n                              </div>\n                              <Progress value={75} className=\"h-2\" />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span>Medium Problems</span>\n                                <span>32/80 (40%)</span>\n                              </div>\n                              <Progress value={40} className=\"h-2\" />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span>Hard Problems</span>\n                                <span>12/50 (24%)</span>\n                              </div>\n                              <Progress value={24} className=\"h-2\" />\n                            </div>\n                          </CardContent>\n                        </Card>\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Activity Overview</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <div className=\"grid gap-4 md:grid-cols-2\">\n                              <div className=\"text-center\">\n                                <div className=\"text-2xl font-bold text-primary\">7</div>\n                                <p className=\"text-sm text-muted-foreground\">Current Streak</p>\n                              </div>\n                              <div className=\"text-center\">\n                                <div className=\"text-2xl font-bold text-primary\">156</div>\n                                <p className=\"text-sm text-muted-foreground\">Total Submissions</p>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}\n","size_bytes":15985},"app/settings/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport default function SettingsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const { toast } = useToast()\n  const [settings, setSettings] = useState({\n    notifications: {\n      contestReminders: true,\n      newProblems: false,\n      leaderboardUpdates: true,\n      emailDigest: true,\n    },\n    preferences: {\n      theme: \"system\",\n      language: \"javascript\",\n      fontSize: \"medium\",\n      autoSave: true,\n    },\n    privacy: {\n      profileVisible: true,\n      showRanking: true,\n      showActivity: false,\n    },\n  })\n\n  const handleSave = () => {\n    toast({\n      title: \"Settings saved\",\n      description: \"Your preferences have been updated successfully.\",\n    })\n  }\n\n  const handleNotificationChange = (key: string, value: boolean) => {\n    setSettings((prev) => ({\n      ...prev,\n      notifications: {\n        ...prev.notifications,\n        [key]: value,\n      },\n    }))\n  }\n\n  const handlePreferenceChange = (key: string, value: string | boolean) => {\n    setSettings((prev) => ({\n      ...prev,\n      preferences: {\n        ...prev.preferences,\n        [key]: value,\n      },\n    }))\n  }\n\n  const handlePrivacyChange = (key: string, value: boolean) => {\n    setSettings((prev) => ({\n      ...prev,\n      privacy: {\n        ...prev.privacy,\n        [key]: value,\n      },\n    }))\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"student\">\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6 md:ml-0\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"mb-8\">\n                <h1 className=\"text-3xl font-bold text-balance\">Settings</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">\n                  Customize your experience and manage your preferences.\n                </p>\n              </div>\n\n              <Tabs defaultValue=\"notifications\" className=\"space-y-6\">\n                <TabsList>\n                  <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n                  <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n                  <TabsTrigger value=\"privacy\">Privacy</TabsTrigger>\n                  <TabsTrigger value=\"account\">Account</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"notifications\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Notification Settings</CardTitle>\n                      <CardDescription>Choose what notifications you want to receive</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Contest Reminders</Label>\n                          <p className=\"text-sm text-muted-foreground\">Get notified before contests start</p>\n                        </div>\n                        <Switch\n                          checked={settings.notifications.contestReminders}\n                          onCheckedChange={(value) => handleNotificationChange(\"contestReminders\", value)}\n                        />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>New Problems</Label>\n                          <p className=\"text-sm text-muted-foreground\">Notify when new practice problems are added</p>\n                        </div>\n                        <Switch\n                          checked={settings.notifications.newProblems}\n                          onCheckedChange={(value) => handleNotificationChange(\"newProblems\", value)}\n                        />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Leaderboard Updates</Label>\n                          <p className=\"text-sm text-muted-foreground\">Get notified about ranking changes</p>\n                        </div>\n                        <Switch\n                          checked={settings.notifications.leaderboardUpdates}\n                          onCheckedChange={(value) => handleNotificationChange(\"leaderboardUpdates\", value)}\n                        />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Email Digest</Label>\n                          <p className=\"text-sm text-muted-foreground\">Weekly summary of your activity</p>\n                        </div>\n                        <Switch\n                          checked={settings.notifications.emailDigest}\n                          onCheckedChange={(value) => handleNotificationChange(\"emailDigest\", value)}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"preferences\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Coding Preferences</CardTitle>\n                      <CardDescription>Customize your coding environment</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid gap-4 md:grid-cols-2\">\n                        <div className=\"space-y-2\">\n                          <Label>Theme</Label>\n                          <Select\n                            value={settings.preferences.theme}\n                            onValueChange={(value) => handlePreferenceChange(\"theme\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"light\">Light</SelectItem>\n                              <SelectItem value=\"dark\">Dark</SelectItem>\n                              <SelectItem value=\"system\">System</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label>Default Language</Label>\n                          <Select\n                            value={settings.preferences.language}\n                            onValueChange={(value) => handlePreferenceChange(\"language\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                              <SelectItem value=\"python\">Python</SelectItem>\n                              <SelectItem value=\"java\">Java</SelectItem>\n                              <SelectItem value=\"cpp\">C++</SelectItem>\n                              <SelectItem value=\"c\">C</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label>Font Size</Label>\n                        <Select\n                          value={settings.preferences.fontSize}\n                          onValueChange={(value) => handlePreferenceChange(\"fontSize\", value)}\n                        >\n                          <SelectTrigger className=\"w-48\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"small\">Small</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"large\">Large</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Auto-save Code</Label>\n                          <p className=\"text-sm text-muted-foreground\">Automatically save your code while typing</p>\n                        </div>\n                        <Switch\n                          checked={settings.preferences.autoSave}\n                          onCheckedChange={(value) => handlePreferenceChange(\"autoSave\", value)}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"privacy\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Privacy Settings</CardTitle>\n                      <CardDescription>Control what information is visible to others</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Public Profile</Label>\n                          <p className=\"text-sm text-muted-foreground\">Make your profile visible to other users</p>\n                        </div>\n                        <Switch\n                          checked={settings.privacy.profileVisible}\n                          onCheckedChange={(value) => handlePrivacyChange(\"profileVisible\", value)}\n                        />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Show Ranking</Label>\n                          <p className=\"text-sm text-muted-foreground\">Display your rank on leaderboards</p>\n                        </div>\n                        <Switch\n                          checked={settings.privacy.showRanking}\n                          onCheckedChange={(value) => handlePrivacyChange(\"showRanking\", value)}\n                        />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <Label>Show Activity</Label>\n                          <p className=\"text-sm text-muted-foreground\">Let others see your recent activity</p>\n                        </div>\n                        <Switch\n                          checked={settings.privacy.showActivity}\n                          onCheckedChange={(value) => handlePrivacyChange(\"showActivity\", value)}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"account\">\n                  <div className=\"space-y-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Change Password</CardTitle>\n                        <CardDescription>Update your account password</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"current-password\">Current Password</Label>\n                          <Input id=\"current-password\" type=\"password\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"new-password\">New Password</Label>\n                          <Input id=\"new-password\" type=\"password\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                          <Input id=\"confirm-password\" type=\"password\" />\n                        </div>\n                        <Button>Update Password</Button>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"border-destructive\">\n                      <CardHeader>\n                        <CardTitle className=\"text-destructive\">Danger Zone</CardTitle>\n                        <CardDescription>Irreversible actions that affect your account</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <Button variant=\"destructive\">Delete Account</Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex justify-end mt-8\">\n                <Button onClick={handleSave}>Save All Changes</Button>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}\n","size_bytes":14354},"backend/config/database.js":{"content":"const mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    // Ensure MONGO_URI is provided\n    if (!process.env.MONGO_URI) {\n      throw new Error('MONGO_URI is required in environment variables');\n    }\n\n    const conn = await mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error('MongoDB connection error:', error);\n    console.warn('⚠️  Running in development mode without database connection');\n    console.warn('⚠️  API endpoints may return mock data or errors');\n    // Don't exit in development - allow frontend to work\n    if (process.env.NODE_ENV === 'production') {\n      process.exit(1);\n    }\n  }\n};\n\nmodule.exports = connectDB;","size_bytes":832},"backend/controllers/analyticsController.js":{"content":"const User = require('../models/User');\nconst Contest = require('../models/Contest');\nconst Problem = require('../models/Problem');\nconst Submission = require('../models/Submission');\nconst Report = require('../models/Report');\n\n// Get user analytics (for students to see their own performance)\nconst getUserAnalytics = async (req, res) => {\n  try {\n    const userId = req.params.userId || req.user._id;\n    \n    // Check permissions\n    if (req.user.role === 'student' && userId !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Access denied'\n      });\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found'\n      });\n    }\n\n    // Get submission statistics over time\n    const submissionHistory = await Submission.aggregate([\n      { $match: { userId: user._id } },\n      {\n        $group: {\n          _id: { \n            year: { $year: '$createdAt' },\n            month: { $month: '$createdAt' },\n            day: { $dayOfMonth: '$createdAt' }\n          },\n          submissions: { $sum: 1 },\n          accepted: { $sum: { $cond: [{ $eq: ['$status', 'accepted'] }, 1, 0] } },\n          averageScore: { $avg: '$score' }\n        }\n      },\n      { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } },\n      { $limit: 30 } // Last 30 days\n    ]);\n\n    // Get problem difficulty breakdown\n    const difficultyStats = await Submission.aggregate([\n      { $match: { userId: user._id, status: 'accepted' } },\n      {\n        $lookup: {\n          from: 'problems',\n          localField: 'problemId',\n          foreignField: '_id',\n          as: 'problem'\n        }\n      },\n      { $unwind: '$problem' },\n      {\n        $group: {\n          _id: '$problem.difficulty',\n          count: { $sum: 1 },\n          averageScore: { $avg: '$score' }\n        }\n      }\n    ]);\n\n    // Get language preferences\n    const languageStats = await Submission.aggregate([\n      { $match: { userId: user._id } },\n      {\n        $group: {\n          _id: '$language',\n          submissions: { $sum: 1 },\n          accepted: { $sum: { $cond: [{ $eq: ['$status', 'accepted'] }, 1, 0] } },\n          averageScore: { $avg: '$score' }\n        }\n      },\n      { $sort: { submissions: -1 } }\n    ]);\n\n    // Get contest performance\n    const contestPerformance = await Contest.aggregate([\n      { $match: { 'participants.user': user._id } },\n      { $unwind: '$participants' },\n      { $match: { 'participants.user': user._id } },\n      {\n        $project: {\n          title: 1,\n          difficulty: 1,\n          score: '$participants.score',\n          rank: '$participants.rank',\n          totalParticipants: { $size: '$participants' },\n          endTime: 1\n        }\n      },\n      { $sort: { endTime: -1 } },\n      { $limit: 10 } // Last 10 contests\n    ]);\n\n    // Get weak areas (categories with lower performance)\n    const categoryStats = await Submission.aggregate([\n      { $match: { userId: user._id } },\n      {\n        $lookup: {\n          from: 'problems',\n          localField: 'problemId',\n          foreignField: '_id',\n          as: 'problem'\n        }\n      },\n      { $unwind: '$problem' },\n      {\n        $group: {\n          _id: '$problem.category',\n          submissions: { $sum: 1 },\n          accepted: { $sum: { $cond: [{ $eq: ['$status', 'accepted'] }, 1, 0] } },\n          averageScore: { $avg: '$score' },\n          successRate: { \n            $avg: { $cond: [{ $eq: ['$status', 'accepted'] }, 1, 0] }\n          }\n        }\n      },\n      { $sort: { successRate: 1 } } // Sort by lowest success rate first\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        user: {\n          username: user.username,\n          fullName: user.fullName,\n          statistics: user.statistics\n        },\n        submissionHistory,\n        difficultyStats,\n        languageStats,\n        contestPerformance,\n        categoryStats,\n        insights: {\n          strongestCategory: categoryStats.length > 0 ? categoryStats[categoryStats.length - 1] : null,\n          weakestCategory: categoryStats.length > 0 ? categoryStats[0] : null,\n          preferredLanguage: languageStats.length > 0 ? languageStats[0] : null,\n          recentTrend: submissionHistory.length > 1 ? \n            (submissionHistory[submissionHistory.length - 1].averageScore > \n             submissionHistory[submissionHistory.length - 2].averageScore ? 'improving' : 'declining') : 'stable'\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Get user analytics error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch user analytics'\n    });\n  }\n};\n\n// Get contest analytics (for teachers)\nconst getContestAnalytics = async (req, res) => {\n  try {\n    const { contestId } = req.params;\n\n    const contest = await Contest.findById(contestId);\n    if (!contest) {\n      return res.status(404).json({\n        success: false,\n        error: 'Contest not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role === 'student') {\n      const isParticipant = contest.participants.some(p => \n        p.user.toString() === req.user._id.toString()\n      );\n      if (!isParticipant) {\n        return res.status(403).json({\n          success: false,\n          error: 'Access denied'\n        });\n      }\n    }\n\n    // Get submission statistics\n    const submissionStats = await Submission.aggregate([\n      { $match: { contestId: contest._id } },\n      {\n        $group: {\n          _id: '$status',\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    // Get problem-wise statistics\n    const problemStats = await Submission.aggregate([\n      { $match: { contestId: contest._id } },\n      {\n        $lookup: {\n          from: 'problems',\n          localField: 'problemId',\n          foreignField: '_id',\n          as: 'problem'\n        }\n      },\n      { $unwind: '$problem' },\n      {\n        $group: {\n          _id: {\n            problemId: '$problemId',\n            title: '$problem.title'\n          },\n          submissions: { $sum: 1 },\n          accepted: { $sum: { $cond: [{ $eq: ['$status', 'accepted'] }, 1, 0] } },\n          averageScore: { $avg: '$score' },\n          uniqueUsers: { $addToSet: '$userId' }\n        }\n      },\n      {\n        $project: {\n          problemId: '$_id.problemId',\n          title: '$_id.title',\n          submissions: 1,\n          accepted: 1,\n          averageScore: 1,\n          uniqueUsers: { $size: '$uniqueUsers' },\n          successRate: { $divide: ['$accepted', '$submissions'] }\n        }\n      },\n      { $sort: { successRate: 1 } }\n    ]);\n\n    // Get participation timeline\n    const participationTimeline = await Submission.aggregate([\n      { $match: { contestId: contest._id } },\n      {\n        $group: {\n          _id: {\n            hour: { $hour: '$createdAt' },\n            minute: { $minute: '$createdAt' }\n          },\n          submissions: { $sum: 1 }\n        }\n      },\n      { $sort: { '_id.hour': 1, '_id.minute': 1 } }\n    ]);\n\n    // Get top performers\n    const topPerformers = contest.participants\n      .sort((a, b) => b.score - a.score)\n      .slice(0, 10)\n      .map(participant => ({\n        userId: participant.user,\n        score: participant.score,\n        rank: participant.rank,\n        problemsSolved: participant.submissions.length\n      }));\n\n    // Populate user details for top performers\n    await Contest.populate(topPerformers, {\n      path: 'userId',\n      select: 'username fullName'\n    });\n\n    res.json({\n      success: true,\n      data: {\n        contest: {\n          title: contest.title,\n          difficulty: contest.difficulty,\n          startTime: contest.startTime,\n          endTime: contest.endTime,\n          status: contest.status,\n          statistics: contest.statistics\n        },\n        submissionStats,\n        problemStats,\n        participationTimeline,\n        topPerformers,\n        insights: {\n          mostDifficultProblem: problemStats.length > 0 ? problemStats[0] : null,\n          easiestProblem: problemStats.length > 0 ? problemStats[problemStats.length - 1] : null,\n          peakActivity: participationTimeline.reduce((max, curr) => \n            curr.submissions > max.submissions ? curr : max, \n            { submissions: 0 }\n          )\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Get contest analytics error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch contest analytics'\n    });\n  }\n};\n\n// Get platform overview analytics (for teachers/admin)\nconst getPlatformAnalytics = async (req, res) => {\n  try {\n    const { period = 'month', startDate, endDate } = req.query;\n\n    let dateFilter = {};\n    if (startDate && endDate) {\n      dateFilter = {\n        createdAt: {\n          $gte: new Date(startDate),\n          $lte: new Date(endDate)\n        }\n      };\n    } else {\n      // Default to last month\n      const now = new Date();\n      const periodStart = new Date(now);\n      \n      if (period === 'day') {\n        periodStart.setDate(now.getDate() - 1);\n      } else if (period === 'week') {\n        periodStart.setDate(now.getDate() - 7);\n      } else if (period === 'month') {\n        periodStart.setMonth(now.getMonth() - 1);\n      } else if (period === 'year') {\n        periodStart.setFullYear(now.getFullYear() - 1);\n      }\n      \n      dateFilter = { createdAt: { $gte: periodStart } };\n    }\n\n    // Get user growth\n    const userGrowth = await User.aggregate([\n      { $match: dateFilter },\n      {\n        $group: {\n          _id: {\n            year: { $year: '$createdAt' },\n            month: { $month: '$createdAt' },\n            day: { $dayOfMonth: '$createdAt' }\n          },\n          newUsers: { $sum: 1 }\n        }\n      },\n      { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } }\n    ]);\n\n    // Get submission trends\n    const submissionTrends = await Submission.aggregate([\n      { $match: dateFilter },\n      {\n        $group: {\n          _id: {\n            year: { $year: '$createdAt' },\n            month: { $month: '$createdAt' },\n            day: { $dayOfMonth: '$createdAt' }\n          },\n          submissions: { $sum: 1 },\n          accepted: { $sum: { $cond: [{ $eq: ['$status', 'accepted'] }, 1, 0] } }\n        }\n      },\n      { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } }\n    ]);\n\n    // Get contest activity\n    const contestActivity = await Contest.aggregate([\n      { $match: dateFilter },\n      {\n        $group: {\n          _id: {\n            year: { $year: '$createdAt' },\n            month: { $month: '$createdAt' }\n          },\n          contests: { $sum: 1 },\n          totalParticipants: { $sum: '$statistics.totalParticipants' }\n        }\n      },\n      { $sort: { '_id.year': 1, '_id.month': 1 } }\n    ]);\n\n    // Get overall statistics\n    const totalUsers = await User.countDocuments();\n    const totalContests = await Contest.countDocuments();\n    const totalProblems = await Problem.countDocuments({ isActive: true });\n    const totalSubmissions = await Submission.countDocuments();\n    const activeUsers = await User.countDocuments({ \n      lastLogin: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } \n    });\n\n    // Get top contributors\n    const topContributors = await User.aggregate([\n      {\n        $match: {\n          role: { $in: ['teacher', 'admin'] },\n          ...dateFilter\n        }\n      },\n      {\n        $lookup: {\n          from: 'contests',\n          localField: '_id',\n          foreignField: 'createdBy',\n          as: 'createdContests'\n        }\n      },\n      {\n        $lookup: {\n          from: 'problems',\n          localField: '_id',\n          foreignField: 'createdBy',\n          as: 'createdProblems'\n        }\n      },\n      {\n        $project: {\n          username: 1,\n          fullName: 1,\n          role: 1,\n          contestsCreated: { $size: '$createdContests' },\n          problemsCreated: { $size: '$createdProblems' }\n        }\n      },\n      { $sort: { contestsCreated: -1, problemsCreated: -1 } },\n      { $limit: 10 }\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        overview: {\n          totalUsers,\n          totalContests,\n          totalProblems,\n          totalSubmissions,\n          activeUsers,\n          period: period\n        },\n        trends: {\n          userGrowth,\n          submissionTrends,\n          contestActivity\n        },\n        topContributors,\n        insights: {\n          growthRate: userGrowth.length > 1 ? \n            ((userGrowth[userGrowth.length - 1].newUsers - userGrowth[0].newUsers) / userGrowth[0].newUsers * 100).toFixed(2) + '%' : '0%',\n          avgSubmissionsPerDay: submissionTrends.reduce((sum, day) => sum + day.submissions, 0) / Math.max(submissionTrends.length, 1),\n          overallAcceptanceRate: totalSubmissions > 0 ? \n            (submissionTrends.reduce((sum, day) => sum + day.accepted, 0) / totalSubmissions * 100).toFixed(2) + '%' : '0%'\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Get platform analytics error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch platform analytics'\n    });\n  }\n};\n\n// Generate analytics report\nconst generateReport = async (req, res) => {\n  try {\n    const { type, contestId, userId, dateRange } = req.body;\n\n    let reportData;\n    let title;\n    \n    switch (type) {\n      case 'contest_summary':\n        if (!contestId) {\n          return res.status(400).json({\n            success: false,\n            error: 'Contest ID required for contest summary report'\n          });\n        }\n        \n        const contestAnalytics = await getContestAnalyticsData(contestId);\n        reportData = contestAnalytics;\n        title = `Contest Summary Report - ${contestAnalytics.contest.title}`;\n        break;\n\n      case 'user_activity':\n        if (!userId) {\n          return res.status(400).json({\n            success: false,\n            error: 'User ID required for user activity report'\n          });\n        }\n        \n        const userAnalytics = await getUserAnalyticsData(userId);\n        reportData = userAnalytics;\n        title = `User Activity Report - ${userAnalytics.user.username}`;\n        break;\n\n      case 'plagiarism':\n        if (!contestId) {\n          return res.status(400).json({\n            success: false,\n            error: 'Contest ID required for plagiarism report'\n          });\n        }\n        \n        const plagiarismData = await getPlagiarismReportData(contestId);\n        reportData = plagiarismData;\n        title = `Plagiarism Report - Contest ${contestId}`;\n        break;\n\n      default:\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid report type'\n        });\n    }\n\n    const report = new Report({\n      type,\n      title,\n      description: `Generated report for ${type}`,\n      generatedBy: req.user._id,\n      relatedEntities: {\n        contest: contestId || null,\n        user: userId || null\n      },\n      data: reportData,\n      filters: {\n        dateRange: dateRange || null\n      }\n    });\n\n    await report.save();\n    await report.populate('generatedBy', 'username fullName');\n\n    res.json({\n      success: true,\n      data: report,\n      message: 'Report generated successfully'\n    });\n\n  } catch (error) {\n    console.error('Generate report error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate report'\n    });\n  }\n};\n\n// Helper functions (simplified versions of the main analytics functions)\nconst getContestAnalyticsData = async (contestId) => {\n  // Simplified version - in production, implement full analytics\n  const contest = await Contest.findById(contestId).populate('participants.user', 'username fullName');\n  return { contest, summary: 'Contest analytics data' };\n};\n\nconst getUserAnalyticsData = async (userId) => {\n  const user = await User.findById(userId);\n  return { user, summary: 'User analytics data' };\n};\n\nconst getPlagiarismReportData = async (contestId) => {\n  const flaggedSubmissions = await Submission.find({\n    contestId,\n    'plagiarismCheck.score': { $gte: 70 }\n  }).populate('userId', 'username fullName');\n  \n  return { flaggedSubmissions, summary: 'Plagiarism analysis data' };\n};\n\nmodule.exports = {\n  getUserAnalytics,\n  getContestAnalytics,\n  getPlatformAnalytics,\n  generateReport\n};","size_bytes":16445},"backend/controllers/authController.js":{"content":"const User = require('../models/User');\nconst { generateToken, generateTokens } = require('../utils/jwt');\n\n// Register user\nconst register = async (req, res) => {\n  try {\n    const { username, email, password, fullName, role = 'student' } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({\n      $or: [{ email }, { username }]\n    });\n\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        error: existingUser.email === email ? 'Email already exists' : 'Username already exists'\n      });\n    }\n\n    // Create user\n    const user = new User({\n      username,\n      email,\n      passwordHash: password, // Will be hashed by pre-save middleware\n      fullName,\n      role\n    });\n\n    await user.save();\n\n    // Generate token\n    const token = generateToken({ \n      id: user._id, \n      username: user.username, \n      email: user.email, \n      role: user.role \n    });\n\n    res.status(201).json({\n      success: true,\n      data: {\n        user: user.getPublicProfile(),\n        token\n      },\n      message: 'User registered successfully'\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Registration failed'\n    });\n  }\n};\n\n// Login user\nconst login = async (req, res) => {\n  try {\n    const { login, password } = req.body; // login can be email or username\n\n    // Find user by email or username\n    const user = await User.findOne({\n      $or: [\n        { email: login.toLowerCase() },\n        { username: login }\n      ]\n    });\n\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        error: 'Invalid credentials'\n      });\n    }\n\n    // Check password\n    const isValidPassword = await user.comparePassword(password);\n    if (!isValidPassword) {\n      return res.status(401).json({\n        success: false,\n        error: 'Invalid credentials'\n      });\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: 'Account is deactivated'\n      });\n    }\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Generate token\n    const token = generateToken({ \n      id: user._id, \n      username: user.username, \n      email: user.email, \n      role: user.role \n    });\n\n    res.json({\n      success: true,\n      data: {\n        user: user.getPublicProfile(),\n        token\n      },\n      message: 'Login successful'\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Login failed'\n    });\n  }\n};\n\n// Get current user profile\nconst getProfile = async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      data: {\n        user: req.user.getPublicProfile()\n      }\n    });\n  } catch (error) {\n    console.error('Get profile error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get profile'\n    });\n  }\n};\n\n// Update user profile\nconst updateProfile = async (req, res) => {\n  try {\n    const userId = req.user._id;\n    const updates = req.body;\n\n    // Remove sensitive fields that shouldn't be updated via this endpoint\n    delete updates.email;\n    delete updates.username;\n    delete updates.passwordHash;\n    delete updates.role;\n\n    const user = await User.findByIdAndUpdate(\n      userId,\n      { $set: updates },\n      { new: true, runValidators: true }\n    );\n\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        user: user.getPublicProfile()\n      },\n      message: 'Profile updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Update profile error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update profile'\n    });\n  }\n};\n\n// Change password\nconst changePassword = async (req, res) => {\n  try {\n    const { currentPassword, newPassword } = req.body;\n    const user = await User.findById(req.user._id);\n\n    // Verify current password\n    const isValidPassword = await user.comparePassword(currentPassword);\n    if (!isValidPassword) {\n      return res.status(400).json({\n        success: false,\n        error: 'Current password is incorrect'\n      });\n    }\n\n    // Update password\n    user.passwordHash = newPassword; // Will be hashed by pre-save middleware\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password changed successfully'\n    });\n\n  } catch (error) {\n    console.error('Change password error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to change password'\n    });\n  }\n};\n\n// Refresh token\nconst refreshToken = async (req, res) => {\n  try {\n    const { refreshToken } = req.body;\n\n    if (!refreshToken) {\n      return res.status(400).json({\n        success: false,\n        error: 'Refresh token required'\n      });\n    }\n\n    const decoded = jwt.verify(refreshToken, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.id);\n\n    if (!user || !user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: 'Invalid refresh token'\n      });\n    }\n\n    // Generate new tokens\n    const tokens = generateTokens(user);\n\n    res.json({\n      success: true,\n      data: tokens,\n      message: 'Tokens refreshed successfully'\n    });\n\n  } catch (error) {\n    console.error('Refresh token error:', error);\n    res.status(401).json({\n      success: false,\n      error: 'Invalid or expired refresh token'\n    });\n  }\n};\n\nmodule.exports = {\n  register,\n  login,\n  getProfile,\n  updateProfile,\n  changePassword,\n  refreshToken\n};","size_bytes":5793},"backend/controllers/contestController.js":{"content":"const Contest = require('../models/Contest');\nconst Problem = require('../models/Problem');\nconst User = require('../models/User');\nconst Submission = require('../models/Submission');\n\n// Get all contests with filtering\nconst getContests = async (req, res) => {\n  try {\n    const { \n      page = 1, \n      limit = 10, \n      status = 'all', \n      difficulty = 'all', \n      search = '', \n      tags = '' \n    } = req.query;\n\n    const query = {};\n    \n    // Apply filters\n    if (status !== 'all') {\n      query.status = status;\n    }\n    \n    if (difficulty !== 'all') {\n      query.difficulty = difficulty;\n    }\n    \n    if (search) {\n      query.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } }\n      ];\n    }\n    \n    if (tags) {\n      const tagArray = tags.split(',').map(tag => tag.trim());\n      query.tags = { $in: tagArray };\n    }\n\n    // Only show public contests to students, unless they created it\n    if (req.user?.role === 'student') {\n      query.$or = [\n        { isPublic: true },\n        { createdBy: req.user._id }\n      ];\n    }\n\n    const skip = (page - 1) * limit;\n    \n    const contests = await Contest.find(query)\n      .populate('createdBy', 'username fullName')\n      .populate('problems.problem', 'title difficulty')\n      .sort({ startTime: -1 })\n      .skip(skip)\n      .limit(parseInt(limit))\n      .lean();\n\n    const total = await Contest.countDocuments(query);\n\n    // Update contest statuses based on current time\n    const now = new Date();\n    contests.forEach(contest => {\n      if (now < new Date(contest.startTime)) contest.status = 'upcoming';\n      else if (now > new Date(contest.endTime)) contest.status = 'ended';\n      else contest.status = 'active';\n    });\n\n    res.json({\n      success: true,\n      data: contests,\n      pagination: {\n        currentPage: parseInt(page),\n        totalPages: Math.ceil(total / limit),\n        totalItems: total,\n        hasMore: skip + contests.length < total\n      }\n    });\n\n  } catch (error) {\n    console.error('Get contests error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch contests'\n    });\n  }\n};\n\n// Get single contest by ID\nconst getContest = async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const contest = await Contest.findById(id)\n      .populate('createdBy', 'username fullName')\n      .populate({\n        path: 'problems.problem',\n        select: 'title difficulty statement examples timeLimit memoryLimit'\n      })\n      .populate('participants.user', 'username fullName');\n\n    if (!contest) {\n      return res.status(404).json({\n        success: false,\n        error: 'Contest not found'\n      });\n    }\n\n    // Check access permissions\n    if (!contest.isPublic && \n        req.user?.role === 'student' && \n        contest.createdBy._id.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Access denied to private contest'\n      });\n    }\n\n    // Update contest status\n    const now = new Date();\n    if (now < contest.startTime) contest.status = 'upcoming';\n    else if (now > contest.endTime) contest.status = 'ended';\n    else contest.status = 'active';\n\n    await contest.save();\n\n    res.json({\n      success: true,\n      data: contest\n    });\n\n  } catch (error) {\n    console.error('Get contest error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch contest'\n    });\n  }\n};\n\n// Create new contest (teachers only)\nconst createContest = async (req, res) => {\n  try {\n    const contestData = {\n      ...req.body,\n      createdBy: req.user._id\n    };\n\n    // Calculate duration in minutes\n    const startTime = new Date(contestData.startTime);\n    const endTime = new Date(contestData.endTime);\n    contestData.duration = Math.round((endTime - startTime) / (1000 * 60));\n\n    const contest = new Contest(contestData);\n    await contest.save();\n\n    // Populate references for response\n    await contest.populate('createdBy', 'username fullName');\n    await contest.populate('problems.problem', 'title difficulty');\n\n    // Add contest ID to user's created contests\n    await User.findByIdAndUpdate(req.user._id, {\n      $push: { contestsCreated: contest._id }\n    });\n\n    res.status(201).json({\n      success: true,\n      data: contest,\n      message: 'Contest created successfully'\n    });\n\n  } catch (error) {\n    console.error('Create contest error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to create contest'\n    });\n  }\n};\n\n// Update contest (teachers only, must be creator or admin)\nconst updateContest = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n\n    const contest = await Contest.findById(id);\n    \n    if (!contest) {\n      return res.status(404).json({\n        success: false,\n        error: 'Contest not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role !== 'admin' && \n        contest.createdBy.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Not authorized to update this contest'\n      });\n    }\n\n    // Don't allow updates to active contests\n    if (contest.status === 'active') {\n      return res.status(400).json({\n        success: false,\n        error: 'Cannot update active contest'\n      });\n    }\n\n    // Recalculate duration if times are updated\n    if (updates.startTime || updates.endTime) {\n      const startTime = new Date(updates.startTime || contest.startTime);\n      const endTime = new Date(updates.endTime || contest.endTime);\n      updates.duration = Math.round((endTime - startTime) / (1000 * 60));\n    }\n\n    Object.assign(contest, updates);\n    await contest.save();\n\n    await contest.populate('createdBy', 'username fullName');\n    await contest.populate('problems.problem', 'title difficulty');\n\n    res.json({\n      success: true,\n      data: contest,\n      message: 'Contest updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Update contest error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update contest'\n    });\n  }\n};\n\n// Delete contest (admin only or creator)\nconst deleteContest = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const contest = await Contest.findById(id);\n    \n    if (!contest) {\n      return res.status(404).json({\n        success: false,\n        error: 'Contest not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role !== 'admin' && \n        contest.createdBy.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Not authorized to delete this contest'\n      });\n    }\n\n    // Don't allow deletion of active contests\n    if (contest.status === 'active') {\n      return res.status(400).json({\n        success: false,\n        error: 'Cannot delete active contest'\n      });\n    }\n\n    await Contest.findByIdAndDelete(id);\n\n    // Remove from user's created contests\n    await User.findByIdAndUpdate(contest.createdBy, {\n      $pull: { contestsCreated: id }\n    });\n\n    res.json({\n      success: true,\n      message: 'Contest deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Delete contest error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete contest'\n    });\n  }\n};\n\n// Join contest\nconst joinContest = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.user._id;\n\n    const contest = await Contest.findById(id);\n    \n    if (!contest) {\n      return res.status(404).json({\n        success: false,\n        error: 'Contest not found'\n      });\n    }\n\n    // Check if contest is joinable\n    if (contest.status === 'ended') {\n      return res.status(400).json({\n        success: false,\n        error: 'Contest has ended'\n      });\n    }\n\n    if (contest.registrationRequired && contest.status === 'active') {\n      return res.status(400).json({\n        success: false,\n        error: 'Registration period has ended'\n      });\n    }\n\n    // Check if already joined\n    const existingParticipant = contest.participants.find(\n      p => p.user.toString() === userId.toString()\n    );\n\n    if (existingParticipant) {\n      return res.status(400).json({\n        success: false,\n        error: 'Already joined this contest'\n      });\n    }\n\n    // Check participant limit\n    if (contest.participants.length >= contest.maxParticipants) {\n      return res.status(400).json({\n        success: false,\n        error: 'Contest is full'\n      });\n    }\n\n    // Add participant\n    contest.participants.push({ user: userId });\n    contest.statistics.totalParticipants += 1;\n    await contest.save();\n\n    // Add to user's joined contests\n    await User.findByIdAndUpdate(userId, {\n      $push: { \n        contestsJoined: { \n          contest: id,\n          joinedAt: new Date()\n        }\n      }\n    });\n\n    res.json({\n      success: true,\n      message: 'Successfully joined contest'\n    });\n\n  } catch (error) {\n    console.error('Join contest error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to join contest'\n    });\n  }\n};\n\n// Leave contest (before it starts)\nconst leaveContest = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.user._id;\n\n    const contest = await Contest.findById(id);\n    \n    if (!contest) {\n      return res.status(404).json({\n        success: false,\n        error: 'Contest not found'\n      });\n    }\n\n    // Can only leave before contest starts\n    if (contest.status !== 'upcoming') {\n      return res.status(400).json({\n        success: false,\n        error: 'Cannot leave contest after it has started'\n      });\n    }\n\n    // Remove participant\n    contest.participants = contest.participants.filter(\n      p => p.user.toString() !== userId.toString()\n    );\n    contest.statistics.totalParticipants = Math.max(0, contest.statistics.totalParticipants - 1);\n    await contest.save();\n\n    // Remove from user's joined contests\n    await User.findByIdAndUpdate(userId, {\n      $pull: { 'contestsJoined.contest': id }\n    });\n\n    res.json({\n      success: true,\n      message: 'Successfully left contest'\n    });\n\n  } catch (error) {\n    console.error('Leave contest error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to leave contest'\n    });\n  }\n};\n\nmodule.exports = {\n  getContests,\n  getContest,\n  createContest,\n  updateContest,\n  deleteContest,\n  joinContest,\n  leaveContest\n};","size_bytes":10664},"backend/controllers/problemController.js":{"content":"const Problem = require('../models/Problem');\nconst Contest = require('../models/Contest');\nconst Submission = require('../models/Submission');\n\n// Get all problems with filtering\nconst getProblems = async (req, res) => {\n  try {\n    const { \n      page = 1, \n      limit = 10, \n      difficulty = 'all', \n      category = 'all', \n      search = '', \n      tags = '' \n    } = req.query;\n\n    const query = { isActive: true };\n    \n    // Apply filters\n    if (difficulty !== 'all') {\n      query.difficulty = difficulty;\n    }\n    \n    if (category !== 'all') {\n      query.category = category;\n    }\n    \n    if (search) {\n      query.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { statement: { $regex: search, $options: 'i' } }\n      ];\n    }\n    \n    if (tags) {\n      const tagArray = tags.split(',').map(tag => tag.trim());\n      query.tags = { $in: tagArray };\n    }\n\n    // Only show public problems to students\n    if (req.user?.role === 'student') {\n      query.isPublic = true;\n    }\n\n    const skip = (page - 1) * limit;\n    \n    const problems = await Problem.find(query)\n      .populate('createdBy', 'username fullName')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(parseInt(limit))\n      .select('-testCases') // Hide test cases in list view\n      .lean();\n\n    const total = await Problem.countDocuments(query);\n\n    res.json({\n      success: true,\n      data: problems,\n      pagination: {\n        currentPage: parseInt(page),\n        totalPages: Math.ceil(total / limit),\n        totalItems: total,\n        hasMore: skip + problems.length < total\n      }\n    });\n\n  } catch (error) {\n    console.error('Get problems error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch problems'\n    });\n  }\n};\n\n// Get single problem by ID\nconst getProblem = async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const problem = await Problem.findById(id)\n      .populate('createdBy', 'username fullName');\n\n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    if (!problem.isActive) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not available'\n      });\n    }\n\n    // Check access permissions\n    if (!problem.isPublic && \n        req.user?.role === 'student' && \n        problem.createdBy._id.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Access denied to private problem'\n      });\n    }\n\n    // For students, only show public test cases\n    if (req.user?.role === 'student') {\n      const problemObj = problem.toObject();\n      problemObj.testCases = problem.publicTestCases;\n      res.json({\n        success: true,\n        data: problemObj\n      });\n    } else {\n      res.json({\n        success: true,\n        data: problem\n      });\n    }\n\n  } catch (error) {\n    console.error('Get problem error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch problem'\n    });\n  }\n};\n\n// Create new problem (teachers only)\nconst createProblem = async (req, res) => {\n  try {\n    const problemData = {\n      ...req.body,\n      createdBy: req.user._id\n    };\n\n    const problem = new Problem(problemData);\n    await problem.save();\n\n    // Populate references for response\n    await problem.populate('createdBy', 'username fullName');\n\n    res.status(201).json({\n      success: true,\n      data: problem,\n      message: 'Problem created successfully'\n    });\n\n  } catch (error) {\n    console.error('Create problem error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to create problem'\n    });\n  }\n};\n\n// Update problem (teachers only, must be creator or admin)\nconst updateProblem = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n\n    const problem = await Problem.findById(id);\n    \n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role !== 'admin' && \n        problem.createdBy.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Not authorized to update this problem'\n      });\n    }\n\n    Object.assign(problem, updates);\n    await problem.save();\n\n    await problem.populate('createdBy', 'username fullName');\n\n    res.json({\n      success: true,\n      data: problem,\n      message: 'Problem updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Update problem error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update problem'\n    });\n  }\n};\n\n// Delete problem (admin only or creator)\nconst deleteProblem = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const problem = await Problem.findById(id);\n    \n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role !== 'admin' && \n        problem.createdBy.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Not authorized to delete this problem'\n      });\n    }\n\n    // Check if problem is used in any active contest\n    const activeContests = await Contest.find({\n      'problems.problem': id,\n      status: { $in: ['upcoming', 'active'] }\n    });\n\n    if (activeContests.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Cannot delete problem used in active contests'\n      });\n    }\n\n    // Soft delete by setting isActive to false\n    problem.isActive = false;\n    await problem.save();\n\n    res.json({\n      success: true,\n      message: 'Problem deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Delete problem error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete problem'\n    });\n  }\n};\n\n// Add test case to problem\nconst addTestCase = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const testCaseData = req.body;\n\n    const problem = await Problem.findById(id);\n    \n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role !== 'admin' && \n        problem.createdBy.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Not authorized to modify this problem'\n      });\n    }\n\n    problem.testCases.push(testCaseData);\n    await problem.save();\n\n    res.json({\n      success: true,\n      data: problem.testCases[problem.testCases.length - 1],\n      message: 'Test case added successfully'\n    });\n\n  } catch (error) {\n    console.error('Add test case error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to add test case'\n    });\n  }\n};\n\n// Update test case\nconst updateTestCase = async (req, res) => {\n  try {\n    const { id, testCaseId } = req.params;\n    const updates = req.body;\n\n    const problem = await Problem.findById(id);\n    \n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role !== 'admin' && \n        problem.createdBy.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Not authorized to modify this problem'\n      });\n    }\n\n    const testCase = problem.testCases.id(testCaseId);\n    if (!testCase) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    Object.assign(testCase, updates);\n    await problem.save();\n\n    res.json({\n      success: true,\n      data: testCase,\n      message: 'Test case updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Update test case error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update test case'\n    });\n  }\n};\n\n// Delete test case\nconst deleteTestCase = async (req, res) => {\n  try {\n    const { id, testCaseId } = req.params;\n\n    const problem = await Problem.findById(id);\n    \n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role !== 'admin' && \n        problem.createdBy.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Not authorized to modify this problem'\n      });\n    }\n\n    problem.testCases.id(testCaseId).remove();\n    await problem.save();\n\n    res.json({\n      success: true,\n      message: 'Test case deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Delete test case error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete test case'\n    });\n  }\n};\n\n// Get problem statistics\nconst getProblemStats = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const problem = await Problem.findById(id);\n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    // Get submission statistics\n    const submissionStats = await Submission.aggregate([\n      { $match: { problemId: problem._id } },\n      {\n        $group: {\n          _id: '$status',\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    // Get language statistics\n    const languageStats = await Submission.aggregate([\n      { $match: { problemId: problem._id } },\n      {\n        $group: {\n          _id: '$language',\n          count: { $sum: 1 },\n          acceptedCount: {\n            $sum: { $cond: [{ $eq: ['$status', 'accepted'] }, 1, 0] }\n          }\n        }\n      }\n    ]);\n\n    // Get difficulty distribution among users who solved it\n    const solverStats = await Submission.aggregate([\n      { $match: { problemId: problem._id, status: 'accepted' } },\n      {\n        $group: {\n          _id: '$userId',\n          bestScore: { $max: '$score' }\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          uniqueSolvers: { $sum: 1 },\n          averageScore: { $avg: '$bestScore' }\n        }\n      }\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        problem: {\n          title: problem.title,\n          difficulty: problem.difficulty,\n          category: problem.category\n        },\n        statistics: problem.statistics,\n        submissionStats,\n        languageStats,\n        solverStats: solverStats[0] || { uniqueSolvers: 0, averageScore: 0 }\n      }\n    });\n\n  } catch (error) {\n    console.error('Get problem stats error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch problem statistics'\n    });\n  }\n};\n\nmodule.exports = {\n  getProblems,\n  getProblem,\n  createProblem,\n  updateProblem,\n  deleteProblem,\n  addTestCase,\n  updateTestCase,\n  deleteTestCase,\n  getProblemStats\n};","size_bytes":11226},"backend/controllers/submissionController.js":{"content":"const Submission = require('../models/Submission');\nconst Problem = require('../models/Problem');\nconst Contest = require('../models/Contest');\nconst User = require('../models/User');\nconst judge0Service = require('../services/judge0Service');\nconst plagiarismService = require('../services/plagiarismService');\n\n// Submit solution\nconst submitSolution = async (req, res) => {\n  try {\n    const { code, language, problemId, contestId } = req.body;\n    const userId = req.user._id;\n\n    // Validate problem exists\n    const problem = await Problem.findById(problemId);\n    if (!problem) {\n      return res.status(404).json({\n        success: false,\n        error: 'Problem not found'\n      });\n    }\n\n    // Validate contest if provided\n    let contest = null;\n    if (contestId) {\n      contest = await Contest.findById(contestId);\n      if (!contest) {\n        return res.status(404).json({\n          success: false,\n          error: 'Contest not found'\n        });\n      }\n\n      // Check if user is participant\n      const isParticipant = contest.participants.some(\n        p => p.user.toString() === userId.toString()\n      );\n      if (!isParticipant && contest.registrationRequired) {\n        return res.status(403).json({\n          success: false,\n          error: 'Must join contest before submitting'\n        });\n      }\n\n      // Check if contest is active\n      if (contest.status !== 'active') {\n        return res.status(400).json({\n          success: false,\n          error: 'Contest is not currently active'\n        });\n      }\n\n      // Check submission limits\n      if (contest.rules.maxSubmissions > 0) {\n        const userSubmissions = await Submission.countDocuments({\n          userId,\n          contestId,\n          problemId\n        });\n\n        if (userSubmissions >= contest.rules.maxSubmissions) {\n          return res.status(400).json({\n            success: false,\n            error: `Maximum ${contest.rules.maxSubmissions} submissions allowed per problem`\n          });\n        }\n      }\n\n      // Check allowed languages\n      if (contest.rules.allowedLanguages.length > 0 && \n          !contest.rules.allowedLanguages.includes(language)) {\n        return res.status(400).json({\n          success: false,\n          error: `Language ${language} not allowed in this contest`\n        });\n      }\n    }\n\n    // Create submission record\n    const submission = new Submission({\n      userId,\n      problemId,\n      contestId: contestId || null,\n      code,\n      language,\n      status: 'pending',\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n\n    await submission.save();\n\n    // Execute code asynchronously\n    executeSubmission(submission._id, problem);\n\n    res.status(201).json({\n      success: true,\n      data: {\n        id: submission._id,\n        status: 'pending',\n        submissionTime: submission.createdAt\n      },\n      message: 'Submission received and being processed'\n    });\n\n  } catch (error) {\n    console.error('Submit solution error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to submit solution'\n    });\n  }\n};\n\n// Get submissions for a user/problem/contest\nconst getSubmissions = async (req, res) => {\n  try {\n    const { \n      page = 1, \n      limit = 10, \n      userId, \n      problemId, \n      contestId, \n      status = 'all',\n      language = 'all'\n    } = req.query;\n\n    const query = {};\n    \n    // Apply filters\n    if (userId) query.userId = userId;\n    if (problemId) query.problemId = problemId;\n    if (contestId) query.contestId = contestId;\n    if (status !== 'all') query.status = status;\n    if (language !== 'all') query.language = language;\n\n    // Check permissions\n    if (req.user.role === 'student') {\n      // Students can only see their own submissions\n      query.userId = req.user._id;\n    }\n\n    const skip = (page - 1) * limit;\n    \n    const submissions = await Submission.find(query)\n      .populate('userId', 'username fullName')\n      .populate('problemId', 'title difficulty')\n      .populate('contestId', 'title')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(parseInt(limit))\n      .select('-code -testResults') // Exclude code and detailed results for list view\n      .lean();\n\n    const total = await Submission.countDocuments(query);\n\n    res.json({\n      success: true,\n      data: submissions,\n      pagination: {\n        currentPage: parseInt(page),\n        totalPages: Math.ceil(total / limit),\n        totalItems: total,\n        hasMore: skip + submissions.length < total\n      }\n    });\n\n  } catch (error) {\n    console.error('Get submissions error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch submissions'\n    });\n  }\n};\n\n// Get single submission details\nconst getSubmission = async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const submission = await Submission.findById(id)\n      .populate('userId', 'username fullName')\n      .populate('problemId', 'title difficulty testCases')\n      .populate('contestId', 'title');\n\n    if (!submission) {\n      return res.status(404).json({\n        success: false,\n        error: 'Submission not found'\n      });\n    }\n\n    // Check permissions\n    if (req.user.role === 'student' && \n        submission.userId._id.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: 'Access denied'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: submission\n    });\n\n  } catch (error) {\n    console.error('Get submission error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch submission'\n    });\n  }\n};\n\n// Execute submission against test cases (internal function)\nconst executeSubmission = async (submissionId, problem) => {\n  try {\n    const submission = await Submission.findById(submissionId);\n    if (!submission) return;\n\n    // Update status to running\n    submission.status = 'running';\n    await submission.save();\n\n    // Execute against test cases\n    const testResults = await judge0Service.executeWithTestCases(\n      submission.code,\n      submission.language,\n      problem.testCases,\n      problem.timeLimit,\n      problem.memoryLimit\n    );\n\n    // Update submission with results\n    submission.testResults = testResults;\n    submission.updateStatus(); // This calculates final status and score\n    \n    // Calculate execution metrics\n    if (testResults.length > 0) {\n      submission.executionTime = Math.max(...testResults.map(tr => tr.executionTime || 0));\n      submission.memoryUsage = Math.max(...testResults.map(tr => tr.memoryUsage || 0));\n    }\n\n    await submission.save();\n\n    // Update problem statistics\n    const isAccepted = submission.status === 'accepted';\n    await problem.addSubmission(submission._id, isAccepted);\n\n    // Update user statistics\n    await updateUserStatistics(submission.userId, isAccepted, submission.score);\n\n    // Update contest statistics if applicable\n    if (submission.contestId) {\n      await updateContestStatistics(submission.contestId, submission.userId, submission.problemId, submission);\n    }\n\n    // Check for plagiarism (async, don't wait)\n    if (submission.contestId) {\n      checkPlagiarism(submission);\n    }\n\n    console.log(`Submission ${submissionId} processed: ${submission.status}`);\n\n  } catch (error) {\n    console.error(`Execute submission ${submissionId} error:`, error);\n    \n    // Mark submission as system error\n    await Submission.findByIdAndUpdate(submissionId, {\n      status: 'system_error',\n      testResults: [{\n        status: 'failed',\n        errorMessage: 'System error during execution'\n      }]\n    });\n  }\n};\n\n// Update user statistics\nconst updateUserStatistics = async (userId, isAccepted, score) => {\n  try {\n    const updateQuery = {\n      $inc: {\n        'statistics.totalSubmissions': 1,\n        'statistics.totalScore': score\n      }\n    };\n\n    if (isAccepted) {\n      updateQuery.$inc['statistics.acceptedSubmissions'] = 1;\n    }\n\n    const user = await User.findByIdAndUpdate(userId, updateQuery, { new: true });\n    \n    // Calculate average score\n    if (user.statistics.totalSubmissions > 0) {\n      user.statistics.averageScore = user.statistics.totalScore / user.statistics.totalSubmissions;\n      await user.save();\n    }\n\n  } catch (error) {\n    console.error('Update user statistics error:', error);\n  }\n};\n\n// Update contest statistics and leaderboard\nconst updateContestStatistics = async (contestId, userId, problemId, submission) => {\n  try {\n    const contest = await Contest.findById(contestId);\n    if (!contest) return;\n\n    // Find participant\n    const participant = contest.participants.find(p => \n      p.user.toString() === userId.toString()\n    );\n    \n    if (!participant) return;\n\n    // Update or add submission for this problem\n    const existingSubmission = participant.submissions.find(s => \n      s.problem.toString() === problemId.toString()\n    );\n\n    if (existingSubmission) {\n      // Update if this submission has higher score\n      if (submission.score > existingSubmission.score) {\n        existingSubmission.submission = submission._id;\n        existingSubmission.score = submission.score;\n        existingSubmission.submittedAt = submission.createdAt;\n      }\n    } else {\n      // Add new submission\n      participant.submissions.push({\n        problem: problemId,\n        submission: submission._id,\n        score: submission.score,\n        submittedAt: submission.createdAt\n      });\n    }\n\n    // Recalculate participant's total score\n    participant.score = participant.submissions.reduce((total, sub) => total + sub.score, 0);\n\n    // Update contest statistics\n    contest.statistics.totalSubmissions += 1;\n    \n    await contest.save();\n\n    // Update leaderboard rankings (could be optimized with a separate job)\n    await updateLeaderboardRankings(contestId);\n\n  } catch (error) {\n    console.error('Update contest statistics error:', error);\n  }\n};\n\n// Update leaderboard rankings\nconst updateLeaderboardRankings = async (contestId) => {\n  try {\n    const contest = await Contest.findById(contestId);\n    if (!contest) return;\n\n    // Sort participants by score (descending)\n    contest.participants.sort((a, b) => {\n      if (b.score !== a.score) return b.score - a.score;\n      \n      // Tiebreaker: earliest submission time for same score\n      const aLastSubmission = Math.max(...a.submissions.map(s => new Date(s.submittedAt)));\n      const bLastSubmission = Math.max(...b.submissions.map(s => new Date(s.submittedAt)));\n      \n      return aLastSubmission - bLastSubmission;\n    });\n\n    // Assign rankings\n    contest.participants.forEach((participant, index) => {\n      participant.rank = index + 1;\n    });\n\n    await contest.save();\n\n  } catch (error) {\n    console.error('Update leaderboard rankings error:', error);\n  }\n};\n\n// Check plagiarism (async)\nconst checkPlagiarism = async (submission) => {\n  try {\n    // Get other submissions for the same problem in the contest\n    const otherSubmissions = await Submission.find({\n      contestId: submission.contestId,\n      problemId: submission.problemId,\n      userId: { $ne: submission.userId },\n      language: submission.language,\n      status: 'accepted'\n    }).limit(50); // Limit to prevent too many comparisons\n\n    if (otherSubmissions.length === 0) return;\n\n    // Check similarity with other submissions\n    for (const otherSubmission of otherSubmissions) {\n      const comparison = await plagiarismService.compareSubmissions(\n        submission, \n        otherSubmission\n      );\n\n      if (comparison.similarity >= 70) { // Threshold for flagging\n        // Update plagiarism scores for both submissions\n        await plagiarismService.updateSubmissionPlagiarismScore(\n          submission._id,\n          comparison.similarity,\n          [{ submission: otherSubmission._id, similarity: comparison.similarity }]\n        );\n\n        await plagiarismService.updateSubmissionPlagiarismScore(\n          otherSubmission._id,\n          Math.max(otherSubmission.plagiarismCheck?.score || 0, comparison.similarity),\n          [{ submission: submission._id, similarity: comparison.similarity }]\n        );\n      }\n    }\n\n  } catch (error) {\n    console.error('Plagiarism check error:', error);\n  }\n};\n\n// Run code with custom input (for testing)\nconst runCode = async (req, res) => {\n  try {\n    const { code, language, input = '', problemId } = req.body;\n\n    if (!code || !language) {\n      return res.status(400).json({\n        success: false,\n        error: 'Code and language are required'\n      });\n    }\n\n    // Validate language is supported\n    const supportedLanguages = judge0Service.getSupportedLanguages();\n    if (!supportedLanguages.includes(language)) {\n      return res.status(400).json({\n        success: false,\n        error: `Language ${language} is not supported`\n      });\n    }\n\n    // Execute code with custom input\n    const result = await judge0Service.submitCode(code, language, input);\n    \n    // Get the result\n    let executionResult;\n    if (result.token) {\n      // Wait a bit for processing\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      executionResult = await judge0Service.getSubmissionResult(result.token);\n    } else {\n      executionResult = result;\n    }\n\n    const response = {\n      status: judge0Service.mapStatusToInternal(executionResult.status || { id: 3 }),\n      output: executionResult.stdout || '',\n      error: executionResult.stderr || executionResult.compile_output || '',\n      executionTime: executionResult.time ? parseFloat(executionResult.time) * 1000 : null,\n      memoryUsage: executionResult.memory ? Math.round(executionResult.memory / 1024) : null\n    };\n\n    res.json({\n      success: true,\n      data: response\n    });\n\n  } catch (error) {\n    console.error('Run code error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Code execution failed',\n      details: error.message\n    });\n  }\n};\n\n// Rerun submission (teachers/admin only)\nconst rerunSubmission = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const submission = await Submission.findById(id).populate('problemId');\n    if (!submission) {\n      return res.status(404).json({\n        success: false,\n        error: 'Submission not found'\n      });\n    }\n\n    // Reset submission status\n    submission.status = 'pending';\n    submission.testResults = [];\n    submission.score = 0;\n    await submission.save();\n\n    // Execute again\n    executeSubmission(submission._id, submission.problemId);\n\n    res.json({\n      success: true,\n      message: 'Submission queued for rerun'\n    });\n\n  } catch (error) {\n    console.error('Rerun submission error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to rerun submission'\n    });\n  }\n};\n\nmodule.exports = {\n  submitSolution,\n  getSubmissions,\n  getSubmission,\n  runCode,\n  rerunSubmission\n};","size_bytes":14974},"backend/middleware/auth.js":{"content":"const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\n// Verify JWT token\nconst authenticate = async (req, res, next) => {\n  try {\n    const authHeader = req.header('Authorization');\n    \n    if (!authHeader) {\n      return res.status(401).json({ \n        success: false, \n        error: 'Access denied. No token provided.' \n      });\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ \n        success: false, \n        error: 'Access denied. Invalid token format.' \n      });\n    }\n\n    try {\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\n      const user = await User.findById(decoded.id).select('-passwordHash');\n      \n      if (!user) {\n        return res.status(401).json({ \n          success: false, \n          error: 'Token is valid but user not found.' \n        });\n      }\n\n      if (!user.isActive) {\n        return res.status(401).json({ \n          success: false, \n          error: 'Account is deactivated.' \n        });\n      }\n\n      req.user = user;\n      next();\n    } catch (jwtError) {\n      if (jwtError.name === 'TokenExpiredError') {\n        return res.status(401).json({ \n          success: false, \n          error: 'Token has expired.' \n        });\n      } else if (jwtError.name === 'JsonWebTokenError') {\n        return res.status(401).json({ \n          success: false, \n          error: 'Invalid token.' \n        });\n      } else {\n        throw jwtError;\n      }\n    }\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return res.status(500).json({ \n      success: false, \n      error: 'Authentication failed.' \n    });\n  }\n};\n\n// Check if user has specific role\nconst authorize = (...roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        success: false, \n        error: 'Authentication required.' \n      });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ \n        success: false, \n        error: `Access denied. Required roles: ${roles.join(', ')}` \n      });\n    }\n\n    next();\n  };\n};\n\n// Check if user is teacher or admin\nconst requireTeacher = authorize('teacher', 'admin');\n\n// Check if user is admin\nconst requireAdmin = authorize('admin');\n\n// Check if user owns the resource or is admin/teacher\nconst checkOwnership = (resourceUserField = 'userId') => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        success: false, \n        error: 'Authentication required.' \n      });\n    }\n\n    // Admin and teachers can access any resource\n    if (['admin', 'teacher'].includes(req.user.role)) {\n      return next();\n    }\n\n    // For students, check if they own the resource\n    const resourceUserId = req.params.userId || req.body[resourceUserField] || req.query.userId;\n    \n    if (resourceUserId && resourceUserId.toString() !== req.user._id.toString()) {\n      return res.status(403).json({ \n        success: false, \n        error: 'Access denied. You can only access your own resources.' \n      });\n    }\n\n    next();\n  };\n};\n\n// Optional authentication (doesn't fail if no token)\nconst optionalAuth = async (req, res, next) => {\n  try {\n    const authHeader = req.header('Authorization');\n    \n    if (!authHeader) {\n      return next();\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    if (!token) {\n      return next();\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.id).select('-passwordHash');\n    \n    if (user && user.isActive) {\n      req.user = user;\n    }\n\n    next();\n  } catch (error) {\n    // Ignore token errors for optional auth\n    next();\n  }\n};\n\nmodule.exports = {\n  authenticate,\n  authorize,\n  requireTeacher,\n  requireAdmin,\n  checkOwnership,\n  optionalAuth\n};","size_bytes":3880},"backend/middleware/validation.js":{"content":"const Joi = require('joi');\n\n// Generic validation middleware\nconst validate = (schema, property = 'body') => {\n  return (req, res, next) => {\n    const { error, value } = schema.validate(req[property], {\n      abortEarly: false,\n      stripUnknown: true\n    });\n\n    if (error) {\n      const errorDetails = error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message\n      }));\n\n      return res.status(400).json({\n        success: false,\n        error: 'Validation failed',\n        details: errorDetails\n      });\n    }\n\n    req[property] = value;\n    next();\n  };\n};\n\n// User validation schemas\nconst userSchemas = {\n  register: Joi.object({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    email: Joi.string().email().required(),\n    password: Joi.string().min(6).required(),\n    fullName: Joi.string().min(2).max(100).required(),\n    role: Joi.string().valid('student', 'teacher').default('student')\n  }),\n\n  login: Joi.object({\n    login: Joi.string().required(), // can be email or username\n    password: Joi.string().required()\n  }),\n\n  updateProfile: Joi.object({\n    fullName: Joi.string().min(2).max(100),\n    preferences: Joi.object({\n      preferredLanguage: Joi.string().valid('python', 'javascript', 'java', 'cpp', 'c', 'go', 'rust'),\n      notifications: Joi.object({\n        email: Joi.boolean(),\n        browser: Joi.boolean()\n      })\n    })\n  })\n};\n\n// Contest validation schemas\nconst contestSchemas = {\n  create: Joi.object({\n    title: Joi.string().min(5).max(200).required(),\n    description: Joi.string().min(10).max(2000).required(),\n    startTime: Joi.date().iso().greater('now').required(),\n    endTime: Joi.date().iso().greater(Joi.ref('startTime')).required(),\n    difficulty: Joi.string().valid('Easy', 'Medium', 'Hard', 'Expert').required(),\n    maxParticipants: Joi.number().integer().min(1).max(10000).default(1000),\n    isPublic: Joi.boolean().default(true),\n    registrationRequired: Joi.boolean().default(true),\n    problems: Joi.array().items(\n      Joi.object({\n        problemId: Joi.string().regex(/^[0-9a-fA-F]{24}$/).required(),\n        points: Joi.number().integer().min(1).max(1000).default(100),\n        order: Joi.number().integer().min(0).default(0)\n      })\n    ).min(1).required(),\n    rules: Joi.object({\n      allowedLanguages: Joi.array().items(\n        Joi.string().valid('python', 'javascript', 'java', 'cpp', 'c', 'go', 'rust')\n      ).min(1).required(),\n      maxSubmissions: Joi.number().integer().min(-1).default(-1),\n      penalty: Joi.object({\n        enabled: Joi.boolean().default(false),\n        points: Joi.number().integer().min(0).default(10)\n      }),\n      plagiarismDetection: Joi.object({\n        enabled: Joi.boolean().default(true),\n        threshold: Joi.number().min(30).max(100).default(70)\n      })\n    }),\n    prize: Joi.string().max(200).allow(null, ''),\n    tags: Joi.array().items(Joi.string().min(1).max(50)).max(10)\n  }),\n\n  update: Joi.object({\n    title: Joi.string().min(5).max(200),\n    description: Joi.string().min(10).max(2000),\n    startTime: Joi.date().iso(),\n    endTime: Joi.date().iso(),\n    difficulty: Joi.string().valid('Easy', 'Medium', 'Hard', 'Expert'),\n    maxParticipants: Joi.number().integer().min(1).max(10000),\n    isPublic: Joi.boolean(),\n    registrationRequired: Joi.boolean(),\n    prize: Joi.string().max(200).allow(null, ''),\n    tags: Joi.array().items(Joi.string().min(1).max(50)).max(10)\n  }).min(1)\n};\n\n// Problem validation schemas\nconst problemSchemas = {\n  create: Joi.object({\n    title: Joi.string().min(5).max(200).required(),\n    statement: Joi.string().min(20).required(),\n    description: Joi.string(),\n    constraints: Joi.string(),\n    inputFormat: Joi.string(),\n    outputFormat: Joi.string(),\n    examples: Joi.array().items(\n      Joi.object({\n        input: Joi.string().required(),\n        output: Joi.string().required(),\n        explanation: Joi.string().default('')\n      })\n    ).min(1).required(),\n    difficulty: Joi.string().valid('Easy', 'Medium', 'Hard', 'Expert').required(),\n    tags: Joi.array().items(Joi.string().min(1).max(50)).max(10),\n    category: Joi.string().valid('Algorithm', 'Data Structure', 'Mathematics', 'String Processing', 'Graph Theory', 'Dynamic Programming', 'Other').default('Algorithm'),\n    timeLimit: Joi.number().min(0.5).max(10).default(2),\n    memoryLimit: Joi.number().integer().min(64).max(512).default(128),\n    isPublic: Joi.boolean().default(true)\n  }),\n\n  addTestCase: Joi.object({\n    input: Joi.string().required(),\n    expectedOutput: Joi.string().required(),\n    isPublic: Joi.boolean().default(false),\n    points: Joi.number().integer().min(1).max(100).default(10)\n  })\n};\n\n// Submission validation schemas\nconst submissionSchemas = {\n  create: Joi.object({\n    code: Joi.string().min(10).max(50000).required(),\n    language: Joi.string().valid('python', 'javascript', 'java', 'cpp', 'c', 'go', 'rust').required(),\n    problemId: Joi.string().regex(/^[0-9a-fA-F]{24}$/).required(),\n    contestId: Joi.string().regex(/^[0-9a-fA-F]{24}$/).allow(null)\n  })\n};\n\n// Query validation schemas\nconst querySchemas = {\n  pagination: Joi.object({\n    page: Joi.number().integer().min(1).default(1),\n    limit: Joi.number().integer().min(1).max(100).default(10),\n    sort: Joi.string().valid('createdAt', '-createdAt', 'title', '-title', 'difficulty', '-difficulty').default('-createdAt')\n  }),\n\n  contestFilter: Joi.object({\n    status: Joi.string().valid('upcoming', 'active', 'ended', 'all').default('all'),\n    difficulty: Joi.string().valid('Easy', 'Medium', 'Hard', 'Expert', 'all').default('all'),\n    search: Joi.string().max(100),\n    tags: Joi.string().max(200)\n  }),\n\n  analyticsDate: Joi.object({\n    startDate: Joi.date().iso(),\n    endDate: Joi.date().iso().greater(Joi.ref('startDate')),\n    period: Joi.string().valid('day', 'week', 'month', 'year').default('month')\n  })\n};\n\nmodule.exports = {\n  validate,\n  userSchemas,\n  contestSchemas,\n  problemSchemas,\n  submissionSchemas,\n  querySchemas\n};","size_bytes":6043},"backend/models/Contest.js":{"content":"const mongoose = require('mongoose');\n\nconst contestSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  description: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 2000\n  },\n  createdBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  startTime: {\n    type: Date,\n    required: true\n  },\n  endTime: {\n    type: Date,\n    required: true\n  },\n  duration: {\n    type: Number, // in minutes\n    required: true\n  },\n  status: {\n    type: String,\n    enum: ['upcoming', 'active', 'ended', 'cancelled'],\n    default: 'upcoming'\n  },\n  difficulty: {\n    type: String,\n    enum: ['Easy', 'Medium', 'Hard', 'Expert'],\n    required: true\n  },\n  maxParticipants: {\n    type: Number,\n    default: 1000\n  },\n  isPublic: {\n    type: Boolean,\n    default: true\n  },\n  registrationRequired: {\n    type: Boolean,\n    default: true\n  },\n  problems: [{\n    problem: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Problem',\n      required: true\n    },\n    points: {\n      type: Number,\n      default: 100\n    },\n    order: {\n      type: Number,\n      default: 0\n    }\n  }],\n  participants: [{\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User'\n    },\n    registeredAt: {\n      type: Date,\n      default: Date.now\n    },\n    score: {\n      type: Number,\n      default: 0\n    },\n    rank: {\n      type: Number,\n      default: null\n    },\n    submissions: [{\n      problem: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Problem'\n      },\n      submission: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Submission'\n      },\n      score: {\n        type: Number,\n        default: 0\n      },\n      submittedAt: {\n        type: Date,\n        default: Date.now\n      }\n    }]\n  }],\n  rules: {\n    allowedLanguages: [{\n      type: String,\n      enum: ['python', 'javascript', 'java', 'cpp', 'c', 'go', 'rust']\n    }],\n    maxSubmissions: {\n      type: Number,\n      default: -1 // -1 means unlimited\n    },\n    penalty: {\n      enabled: {\n        type: Boolean,\n        default: false\n      },\n      points: {\n        type: Number,\n        default: 10\n      }\n    },\n    plagiarismDetection: {\n      enabled: {\n        type: Boolean,\n        default: true\n      },\n      threshold: {\n        type: Number,\n        default: 70\n      }\n    }\n  },\n  prize: {\n    type: String,\n    default: null\n  },\n  tags: [{\n    type: String,\n    trim: true\n  }],\n  statistics: {\n    totalParticipants: {\n      type: Number,\n      default: 0\n    },\n    totalSubmissions: {\n      type: Number,\n      default: 0\n    },\n    averageScore: {\n      type: Number,\n      default: 0\n    },\n    completionRate: {\n      type: Number,\n      default: 0\n    }\n  }\n}, {\n  timestamps: true\n});\n\n// Indexes for better query performance\ncontestSchema.index({ startTime: 1, endTime: 1 });\ncontestSchema.index({ status: 1 });\ncontestSchema.index({ createdBy: 1 });\ncontestSchema.index({ isPublic: 1 });\n\n// Virtual for contest duration in human readable format\ncontestSchema.virtual('durationFormatted').get(function() {\n  const hours = Math.floor(this.duration / 60);\n  const minutes = this.duration % 60;\n  return hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n});\n\n// Method to check if contest is active\ncontestSchema.methods.isActive = function() {\n  const now = new Date();\n  return now >= this.startTime && now <= this.endTime;\n};\n\n// Method to get contest status\ncontestSchema.methods.getStatus = function() {\n  const now = new Date();\n  if (now < this.startTime) return 'upcoming';\n  if (now > this.endTime) return 'ended';\n  return 'active';\n};\n\n// Method to add participant\ncontestSchema.methods.addParticipant = function(userId) {\n  const existingParticipant = this.participants.find(p => p.user.toString() === userId.toString());\n  if (!existingParticipant) {\n    this.participants.push({ user: userId });\n    this.statistics.totalParticipants += 1;\n  }\n  return this.save();\n};\n\n// Update contest status based on time\ncontestSchema.pre('save', function(next) {\n  this.status = this.getStatus();\n  next();\n});\n\nmodule.exports = mongoose.model('Contest', contestSchema);","size_bytes":4219},"backend/models/Problem.js":{"content":"const mongoose = require('mongoose');\n\nconst testCaseSchema = new mongoose.Schema({\n  input: {\n    type: String,\n    required: true\n  },\n  expectedOutput: {\n    type: String,\n    required: true\n  },\n  isPublic: {\n    type: Boolean,\n    default: false\n  },\n  points: {\n    type: Number,\n    default: 10\n  }\n});\n\nconst problemSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  statement: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    trim: true\n  },\n  constraints: {\n    type: String,\n    trim: true\n  },\n  inputFormat: {\n    type: String,\n    trim: true\n  },\n  outputFormat: {\n    type: String,\n    trim: true\n  },\n  examples: [{\n    input: {\n      type: String,\n      required: true\n    },\n    output: {\n      type: String,\n      required: true\n    },\n    explanation: {\n      type: String,\n      default: ''\n    }\n  }],\n  difficulty: {\n    type: String,\n    enum: ['Easy', 'Medium', 'Hard', 'Expert'],\n    required: true\n  },\n  tags: [{\n    type: String,\n    trim: true\n  }],\n  category: {\n    type: String,\n    enum: ['Algorithm', 'Data Structure', 'Mathematics', 'String Processing', 'Graph Theory', 'Dynamic Programming', 'Other'],\n    default: 'Algorithm'\n  },\n  timeLimit: {\n    type: Number, // in seconds\n    default: 2\n  },\n  memoryLimit: {\n    type: Number, // in MB\n    default: 128\n  },\n  testCases: [testCaseSchema],\n  submissions: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Submission'\n  }],\n  createdBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  isPublic: {\n    type: Boolean,\n    default: true\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  statistics: {\n    totalSubmissions: {\n      type: Number,\n      default: 0\n    },\n    acceptedSubmissions: {\n      type: Number,\n      default: 0\n    },\n    acceptanceRate: {\n      type: Number,\n      default: 0\n    },\n    averageScore: {\n      type: Number,\n      default: 0\n    }\n  },\n  hints: [{\n    level: {\n      type: Number,\n      min: 1,\n      max: 3\n    },\n    content: {\n      type: String,\n      required: true\n    }\n  }],\n  editorialUrl: {\n    type: String,\n    default: null\n  },\n  solutionTemplate: {\n    python: {\n      type: String,\n      default: ''\n    },\n    javascript: {\n      type: String,\n      default: ''\n    },\n    java: {\n      type: String,\n      default: ''\n    },\n    cpp: {\n      type: String,\n      default: ''\n    }\n  }\n}, {\n  timestamps: true\n});\n\n// Indexes for better query performance\nproblemSchema.index({ difficulty: 1 });\nproblemSchema.index({ category: 1 });\nproblemSchema.index({ tags: 1 });\nproblemSchema.index({ createdBy: 1 });\nproblemSchema.index({ isPublic: 1, isActive: 1 });\n\n// Virtual for getting public test cases only\nproblemSchema.virtual('publicTestCases').get(function() {\n  return this.testCases.filter(tc => tc.isPublic);\n});\n\n// Method to calculate acceptance rate\nproblemSchema.methods.calculateAcceptanceRate = function() {\n  if (this.statistics.totalSubmissions === 0) return 0;\n  return (this.statistics.acceptedSubmissions / this.statistics.totalSubmissions) * 100;\n};\n\n// Method to add submission\nproblemSchema.methods.addSubmission = function(submissionId, isAccepted = false) {\n  this.submissions.push(submissionId);\n  this.statistics.totalSubmissions += 1;\n  if (isAccepted) {\n    this.statistics.acceptedSubmissions += 1;\n  }\n  this.statistics.acceptanceRate = this.calculateAcceptanceRate();\n  return this.save();\n};\n\n// Method to get problem for contest (excludes some sensitive data)\nproblemSchema.methods.getContestVersion = function() {\n  const problemObject = this.toObject();\n  // Hide non-public test cases\n  problemObject.testCases = this.publicTestCases;\n  return problemObject;\n};\n\nmodule.exports = mongoose.model('Problem', problemSchema);","size_bytes":3874},"backend/models/Report.js":{"content":"const mongoose = require('mongoose');\n\nconst reportSchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['plagiarism', 'analytics', 'contest_summary', 'user_activity', 'system_performance'],\n    required: true\n  },\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    trim: true\n  },\n  generatedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  relatedEntities: {\n    contest: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Contest',\n      default: null\n    },\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      default: null\n    },\n    problem: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Problem',\n      default: null\n    }\n  },\n  data: {\n    type: mongoose.Schema.Types.Mixed,\n    required: true\n  },\n  filters: {\n    dateRange: {\n      startDate: {\n        type: Date,\n        default: null\n      },\n      endDate: {\n        type: Date,\n        default: null\n      }\n    },\n    parameters: {\n      type: mongoose.Schema.Types.Mixed,\n      default: {}\n    }\n  },\n  format: {\n    type: String,\n    enum: ['json', 'csv', 'pdf'],\n    default: 'json'\n  },\n  fileUrl: {\n    type: String,\n    default: null\n  },\n  status: {\n    type: String,\n    enum: ['generating', 'completed', 'failed'],\n    default: 'completed'\n  },\n  isPublic: {\n    type: Boolean,\n    default: false\n  },\n  expiresAt: {\n    type: Date,\n    default: () => new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now\n  }\n}, {\n  timestamps: true\n});\n\n// Indexes for better query performance\nreportSchema.index({ type: 1 });\nreportSchema.index({ generatedBy: 1 });\nreportSchema.index({ 'relatedEntities.contest': 1 });\nreportSchema.index({ createdAt: -1 });\nreportSchema.index({ expiresAt: 1 });\n\n// Method to check if report is expired\nreportSchema.methods.isExpired = function() {\n  return this.expiresAt && this.expiresAt < new Date();\n};\n\n// Static method to clean up expired reports\nreportSchema.statics.cleanupExpired = function() {\n  return this.deleteMany({ expiresAt: { $lt: new Date() } });\n};\n\nmodule.exports = mongoose.model('Report', reportSchema);","size_bytes":2202},"backend/models/Submission.js":{"content":"const mongoose = require('mongoose');\n\nconst submissionSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  problemId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Problem',\n    required: true\n  },\n  contestId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Contest',\n    default: null\n  },\n  code: {\n    type: String,\n    required: true\n  },\n  language: {\n    type: String,\n    enum: ['python', 'javascript', 'java', 'cpp', 'c', 'go', 'rust'],\n    required: true\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'running', 'accepted', 'wrong_answer', 'time_limit_exceeded', 'memory_limit_exceeded', 'runtime_error', 'compile_error', 'system_error'],\n    default: 'pending'\n  },\n  score: {\n    type: Number,\n    default: 0,\n    min: 0,\n    max: 100\n  },\n  executionTime: {\n    type: Number, // in milliseconds\n    default: null\n  },\n  memoryUsage: {\n    type: Number, // in MB\n    default: null\n  },\n  testResults: [{\n    testCase: {\n      type: mongoose.Schema.Types.ObjectId\n    },\n    status: {\n      type: String,\n      enum: ['passed', 'failed', 'tle', 'mle', 'runtime_error']\n    },\n    executionTime: {\n      type: Number\n    },\n    memoryUsage: {\n      type: Number\n    },\n    input: {\n      type: String\n    },\n    expectedOutput: {\n      type: String\n    },\n    actualOutput: {\n      type: String\n    },\n    errorMessage: {\n      type: String,\n      default: null\n    }\n  }],\n  judge0Token: {\n    type: String,\n    default: null\n  },\n  plagiarismCheck: {\n    checked: {\n      type: Boolean,\n      default: false\n    },\n    score: {\n      type: Number,\n      default: 0,\n      min: 0,\n      max: 100\n    },\n    similarSubmissions: [{\n      submission: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Submission'\n      },\n      similarity: {\n        type: Number\n      },\n      details: {\n        type: String\n      }\n    }],\n    checkedAt: {\n      type: Date,\n      default: null\n    }\n  },\n  ipAddress: {\n    type: String,\n    default: null\n  },\n  userAgent: {\n    type: String,\n    default: null\n  },\n  isPublic: {\n    type: Boolean,\n    default: false\n  }\n}, {\n  timestamps: true\n});\n\n// Indexes for better query performance\nsubmissionSchema.index({ userId: 1 });\nsubmissionSchema.index({ problemId: 1 });\nsubmissionSchema.index({ contestId: 1 });\nsubmissionSchema.index({ status: 1 });\nsubmissionSchema.index({ createdAt: -1 });\nsubmissionSchema.index({ contestId: 1, userId: 1, problemId: 1 });\n\n// Virtual for getting passed test cases count\nsubmissionSchema.virtual('passedTestCases').get(function() {\n  return this.testResults.filter(tr => tr.status === 'passed').length;\n});\n\n// Virtual for getting total test cases count\nsubmissionSchema.virtual('totalTestCases').get(function() {\n  return this.testResults.length;\n});\n\n// Method to calculate score based on test results\nsubmissionSchema.methods.calculateScore = function() {\n  if (this.testResults.length === 0) return 0;\n  const passedCount = this.passedTestCases;\n  return Math.round((passedCount / this.totalTestCases) * 100);\n};\n\n// Method to update submission status\nsubmissionSchema.methods.updateStatus = function() {\n  if (this.testResults.length === 0) {\n    this.status = 'pending';\n    return;\n  }\n\n  const hasRuntimeError = this.testResults.some(tr => tr.status === 'runtime_error');\n  const hasTLE = this.testResults.some(tr => tr.status === 'tle');\n  const hasMLE = this.testResults.some(tr => tr.status === 'mle');\n  const allPassed = this.testResults.every(tr => tr.status === 'passed');\n\n  if (hasRuntimeError) {\n    this.status = 'runtime_error';\n  } else if (hasTLE) {\n    this.status = 'time_limit_exceeded';\n  } else if (hasMLE) {\n    this.status = 'memory_limit_exceeded';\n  } else if (allPassed) {\n    this.status = 'accepted';\n  } else {\n    this.status = 'wrong_answer';\n  }\n\n  this.score = this.calculateScore();\n};\n\nmodule.exports = mongoose.model('Submission', submissionSchema);","size_bytes":3990},"backend/models/User.js":{"content":"const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 30\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true\n  },\n  passwordHash: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  role: {\n    type: String,\n    enum: ['student', 'teacher', 'admin'],\n    default: 'student'\n  },\n  fullName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  avatar: {\n    type: String,\n    default: null\n  },\n  contestsJoined: [{\n    contest: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Contest'\n    },\n    joinedAt: {\n      type: Date,\n      default: Date.now\n    },\n    rank: {\n      type: Number,\n      default: null\n    },\n    score: {\n      type: Number,\n      default: 0\n    }\n  }],\n  contestsCreated: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Contest'\n  }],\n  submissions: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Submission'\n  }],\n  statistics: {\n    totalSubmissions: {\n      type: Number,\n      default: 0\n    },\n    acceptedSubmissions: {\n      type: Number,\n      default: 0\n    },\n    totalScore: {\n      type: Number,\n      default: 0\n    },\n    averageScore: {\n      type: Number,\n      default: 0\n    },\n    contestsParticipated: {\n      type: Number,\n      default: 0\n    },\n    problemsSolved: {\n      type: Number,\n      default: 0\n    },\n    streak: {\n      type: Number,\n      default: 0\n    },\n    badges: [{\n      type: String\n    }]\n  },\n  preferences: {\n    preferredLanguage: {\n      type: String,\n      default: 'python'\n    },\n    notifications: {\n      email: {\n        type: Boolean,\n        default: true\n      },\n      browser: {\n        type: Boolean,\n        default: true\n      }\n    }\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  lastLogin: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n});\n\n// Index for better query performance\nuserSchema.index({ email: 1 });\nuserSchema.index({ username: 1 });\nuserSchema.index({ role: 1 });\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('passwordHash')) return next();\n  \n  try {\n    const salt = await bcrypt.genSalt(12);\n    this.passwordHash = await bcrypt.hash(this.passwordHash, salt);\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.passwordHash);\n};\n\n// Get public profile (excluding sensitive data)\nuserSchema.methods.getPublicProfile = function() {\n  const userObject = this.toObject();\n  delete userObject.passwordHash;\n  delete userObject.__v;\n  return userObject;\n};\n\nmodule.exports = mongoose.model('User', userSchema);","size_bytes":2943},"backend/routes/analytics.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst analyticsController = require('../controllers/analyticsController');\nconst { authenticate, requireTeacher } = require('../middleware/auth');\nconst { validate, querySchemas } = require('../middleware/validation');\n\n// User analytics (students can view their own, teachers can view any)\nrouter.get('/users/:userId?', authenticate, analyticsController.getUserAnalytics);\n\n// Contest analytics (participants and teachers can view)\nrouter.get('/contests/:contestId', authenticate, analyticsController.getContestAnalytics);\n\n// Platform analytics (teachers/admin only)\nrouter.get('/platform', authenticate, requireTeacher, validate(querySchemas.analyticsDate, 'query'), analyticsController.getPlatformAnalytics);\n\n// Generate reports (teachers/admin only)\nrouter.post('/reports', authenticate, requireTeacher, analyticsController.generateReport);\n\nmodule.exports = router;","size_bytes":942},"backend/routes/auth.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst authController = require('../controllers/authController');\nconst { authenticate } = require('../middleware/auth');\nconst { validate, userSchemas } = require('../middleware/validation');\n\n// Public routes\nrouter.post('/register', validate(userSchemas.register), authController.register);\nrouter.post('/login', validate(userSchemas.login), authController.login);\nrouter.post('/refresh-token', authController.refreshToken);\n\n// Protected routes\nrouter.get('/profile', authenticate, authController.getProfile);\nrouter.put('/profile', authenticate, validate(userSchemas.updateProfile), authController.updateProfile);\nrouter.put('/change-password', authenticate, authController.changePassword);\n\nmodule.exports = router;","size_bytes":790},"backend/routes/contests.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst contestController = require('../controllers/contestController');\nconst { authenticate, requireTeacher, optionalAuth } = require('../middleware/auth');\nconst { validate, contestSchemas, querySchemas } = require('../middleware/validation');\n\n// Public/Optional auth routes\nrouter.get('/', optionalAuth, validate(querySchemas.contestFilter, 'query'), contestController.getContests);\nrouter.get('/:id', optionalAuth, contestController.getContest);\n\n// Student routes (authenticated)\nrouter.post('/:id/join', authenticate, contestController.joinContest);\nrouter.delete('/:id/leave', authenticate, contestController.leaveContest);\n\n// Teacher/Admin routes\nrouter.post('/', authenticate, requireTeacher, validate(contestSchemas.create), contestController.createContest);\nrouter.put('/:id', authenticate, requireTeacher, validate(contestSchemas.update), contestController.updateContest);\nrouter.delete('/:id', authenticate, requireTeacher, contestController.deleteContest);\n\nmodule.exports = router;","size_bytes":1067},"backend/routes/index.js":{"content":"const express = require('express');\nconst router = express.Router();\n\n// Import all route modules\nconst authRoutes = require('./auth');\nconst contestRoutes = require('./contests');\nconst problemRoutes = require('./problems');\nconst submissionRoutes = require('./submissions');\nconst leaderboardRoutes = require('./leaderboard');\nconst analyticsRoutes = require('./analytics');\nconst plagiarismRoutes = require('./plagiarism');\nconst uploadRoutes = require('./upload');\n\n// Health check endpoint\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    message: 'CodeContest API is running',\n    timestamp: new Date().toISOString(),\n    version: '1.0.0'\n  });\n});\n\n// API information endpoint\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Welcome to CodeContest Pro API',\n    version: '1.0.0',\n    endpoints: {\n      auth: '/api/auth',\n      contests: '/api/contests',\n      problems: '/api/problems',\n      submissions: '/api/submissions',\n      leaderboard: '/api/leaderboard',\n      analytics: '/api/analytics',\n      plagiarism: '/api/plagiarism',\n      upload: '/api/upload'\n    },\n    documentation: 'https://docs.codecontest.com/api'\n  });\n});\n\n// Mount route modules\nrouter.use('/auth', authRoutes);\nrouter.use('/contests', contestRoutes);\nrouter.use('/problems', problemRoutes);\nrouter.use('/submissions', submissionRoutes);\nrouter.use('/leaderboard', leaderboardRoutes);\nrouter.use('/analytics', analyticsRoutes);\nrouter.use('/plagiarism', plagiarismRoutes);\nrouter.use('/upload', uploadRoutes);\n\nmodule.exports = router;","size_bytes":1579},"backend/routes/leaderboard.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst Contest = require('../models/Contest');\nconst { optionalAuth } = require('../middleware/auth');\n\n// Get contest leaderboard\nrouter.get('/', optionalAuth, async (req, res) => {\n  try {\n    const { contestId = 'all', limit = 50, offset = 0 } = req.query;\n\n    if (contestId === 'all') {\n      // Global leaderboard across all contests\n      const leaderboard = await Contest.aggregate([\n        { $unwind: '$participants' },\n        {\n          $lookup: {\n            from: 'users',\n            localField: 'participants.user',\n            foreignField: '_id',\n            as: 'user'\n          }\n        },\n        { $unwind: '$user' },\n        {\n          $group: {\n            _id: '$participants.user',\n            username: { $first: '$user.username' },\n            fullName: { $first: '$user.fullName' },\n            totalScore: { $sum: '$participants.score' },\n            contestsParticipated: { $sum: 1 },\n            averageScore: { $avg: '$participants.score' },\n            bestRank: { $min: '$participants.rank' },\n            lastActivity: { $max: '$endTime' }\n          }\n        },\n        { $sort: { totalScore: -1, averageScore: -1 } },\n        { $skip: parseInt(offset) },\n        { $limit: parseInt(limit) }\n      ]);\n\n      // Add rankings\n      const leaderboardWithRanks = leaderboard.map((entry, index) => ({\n        ...entry,\n        rank: parseInt(offset) + index + 1,\n        userId: entry._id,\n        problemsSolved: null, // Would need additional aggregation\n        lastSubmission: entry.lastActivity,\n        streak: 0, // Would need additional calculation\n        badges: [] // Would be fetched from user profile\n      }));\n\n      res.json({\n        success: true,\n        data: {\n          leaderboard: leaderboardWithRanks,\n          total: leaderboardWithRanks.length,\n          hasMore: leaderboardWithRanks.length === parseInt(limit)\n        }\n      });\n\n    } else {\n      // Contest-specific leaderboard\n      const contest = await Contest.findById(contestId)\n        .populate('participants.user', 'username fullName avatar')\n        .lean();\n\n      if (!contest) {\n        return res.status(404).json({\n          success: false,\n          error: 'Contest not found'\n        });\n      }\n\n      // Sort participants by score and format for response\n      const sortedParticipants = contest.participants\n        .sort((a, b) => {\n          if (b.score !== a.score) return b.score - a.score;\n          \n          // Tiebreaker: earliest submission time\n          const aLastSubmission = Math.max(...(a.submissions.map(s => new Date(s.submittedAt)) || [0]));\n          const bLastSubmission = Math.max(...(b.submissions.map(s => new Date(s.submittedAt)) || [0]));\n          \n          return aLastSubmission - bLastSubmission;\n        })\n        .slice(parseInt(offset), parseInt(offset) + parseInt(limit));\n\n      const leaderboard = sortedParticipants.map((participant, index) => ({\n        rank: parseInt(offset) + index + 1,\n        userId: participant.user._id,\n        username: participant.user.username,\n        fullName: participant.user.fullName,\n        avatar: participant.user.avatar,\n        score: participant.score,\n        problemsSolved: participant.submissions.length,\n        contestsParticipated: 1, // Current contest\n        averageScore: participant.score,\n        lastSubmission: participant.submissions.length > 0 ? \n          Math.max(...participant.submissions.map(s => new Date(s.submittedAt))) : null,\n        streak: 0, // Would need additional calculation\n        badges: [] // Would be fetched from user profile\n      }));\n\n      res.json({\n        success: true,\n        data: {\n          leaderboard,\n          total: contest.participants.length,\n          hasMore: parseInt(offset) + leaderboard.length < contest.participants.length\n        }\n      });\n    }\n\n  } catch (error) {\n    console.error('Get leaderboard error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch leaderboard'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":4111},"backend/routes/plagiarism.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst Submission = require('../models/Submission');\nconst Contest = require('../models/Contest');\nconst plagiarismService = require('../services/plagiarismService');\nconst { authenticate, requireTeacher } = require('../middleware/auth');\n\n// All routes require teacher authentication\nrouter.use(authenticate, requireTeacher);\n\n// Get plagiarism check results\nrouter.get('/check', async (req, res) => {\n  try {\n    const { contestId, problemId, threshold = 60 } = req.query;\n\n    const query = {\n      'plagiarismCheck.checked': true,\n      'plagiarismCheck.score': { $gte: parseInt(threshold) }\n    };\n\n    if (contestId) query.contestId = contestId;\n    if (problemId) query.problemId = problemId;\n\n    const flaggedSubmissions = await Submission.find(query)\n      .populate('userId', 'username fullName')\n      .populate('problemId', 'title difficulty')\n      .populate('contestId', 'title')\n      .populate('plagiarismCheck.similarSubmissions.submission', 'userId code')\n      .sort({ 'plagiarismCheck.score': -1 })\n      .lean();\n\n    // Group by similarity pairs\n    const pairs = [];\n    const processed = new Set();\n\n    for (const submission of flaggedSubmissions) {\n      for (const similar of submission.plagiarismCheck.similarSubmissions) {\n        const pairKey = [submission._id, similar.submission._id].sort().join('-');\n        \n        if (processed.has(pairKey)) continue;\n        processed.add(pairKey);\n\n        pairs.push({\n          id: pairKey,\n          studentA: submission.userId.username,\n          studentB: similar.submission.userId?.username || 'Unknown',\n          similarity: similar.similarity,\n          submissionAId: submission._id,\n          submissionBId: similar.submission._id,\n          problem: submission.problemId.title,\n          contest: submission.contestId?.title,\n          flaggedAt: submission.plagiarismCheck.checkedAt\n        });\n      }\n    }\n\n    const summary = {\n      totalSubmissions: await Submission.countDocuments(contestId ? { contestId } : {}),\n      flaggedPairs: pairs.length,\n      averageSimilarity: pairs.length > 0 ? \n        pairs.reduce((sum, pair) => sum + pair.similarity, 0) / pairs.length : 0,\n      scanDate: new Date()\n    };\n\n    res.json({\n      success: true,\n      data: {\n        summary,\n        pairs\n      }\n    });\n\n  } catch (error) {\n    console.error('Get plagiarism check error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch plagiarism results'\n    });\n  }\n});\n\n// Compare two specific submissions\nrouter.post('/compare', async (req, res) => {\n  try {\n    const { submissionIdA, submissionIdB } = req.body;\n\n    const [submissionA, submissionB] = await Promise.all([\n      Submission.findById(submissionIdA).populate('userId', 'username fullName'),\n      Submission.findById(submissionIdB).populate('userId', 'username fullName')\n    ]);\n\n    if (!submissionA || !submissionB) {\n      return res.status(404).json({\n        success: false,\n        error: 'One or both submissions not found'\n      });\n    }\n\n    const comparison = await plagiarismService.compareSubmissions(submissionA, submissionB);\n\n    const result = {\n      submissionA: {\n        id: submissionA._id,\n        username: submissionA.userId.username,\n        fullName: submissionA.userId.fullName,\n        submissionTime: submissionA.createdAt,\n        language: submissionA.language,\n        code: submissionA.code\n      },\n      submissionB: {\n        id: submissionB._id,\n        username: submissionB.userId.username,\n        fullName: submissionB.userId.fullName,\n        submissionTime: submissionB.createdAt,\n        language: submissionB.language,\n        code: submissionB.code\n      },\n      similarity: comparison.similarity,\n      matchedLines: [], // Would be calculated by plagiarism service\n      analysis: {\n        structuralSimilarity: comparison.structuralSimilarity,\n        variableNameSimilarity: comparison.variableNameSimilarity,\n        logicSimilarity: comparison.logicSimilarity,\n        commentSimilarity: comparison.commentSimilarity\n      },\n      details: comparison.details\n    };\n\n    res.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error) {\n    console.error('Compare submissions error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to compare submissions'\n    });\n  }\n});\n\n// Run plagiarism scan on contest/problem\nrouter.post('/scan', async (req, res) => {\n  try {\n    const { contestId, problemId, threshold = 60 } = req.body;\n\n    if (!contestId && !problemId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Either contestId or problemId is required'\n      });\n    }\n\n    // Get submissions to scan\n    const query = {};\n    if (contestId) query.contestId = contestId;\n    if (problemId) query.problemId = problemId;\n    \n    // Only scan accepted submissions\n    query.status = 'accepted';\n\n    const submissions = await Submission.find(query)\n      .populate('userId', 'username fullName')\n      .populate('problemId', 'title')\n      .limit(100); // Limit to prevent too much processing\n\n    if (submissions.length < 2) {\n      return res.status(400).json({\n        success: false,\n        error: 'At least 2 submissions required for plagiarism detection'\n      });\n    }\n\n    // Run plagiarism scan\n    const results = await plagiarismService.scanSubmissions(submissions, threshold);\n\n    // Update submission plagiarism scores\n    for (const result of results) {\n      await plagiarismService.updateSubmissionPlagiarismScore(\n        result.submissionA._id,\n        result.similarity,\n        [{ submission: result.submissionB._id, similarity: result.similarity }]\n      );\n\n      await plagiarismService.updateSubmissionPlagiarismScore(\n        result.submissionB._id,\n        result.similarity,\n        [{ submission: result.submissionA._id, similarity: result.similarity }]\n      );\n    }\n\n    const scanResult = {\n      scanId: `scan_${Date.now()}`,\n      contestId: contestId || null,\n      problemId: problemId || null,\n      threshold,\n      totalSubmissions: submissions.length,\n      comparisons: Math.floor(submissions.length * (submissions.length - 1) / 2),\n      flaggedPairs: results.length,\n      results: results.map(r => ({\n        submissionA: {\n          id: r.submissionA._id,\n          username: r.submissionA.userId.username,\n          fullName: r.submissionA.userId.fullName\n        },\n        submissionB: {\n          id: r.submissionB._id,\n          username: r.submissionB.userId.username,\n          fullName: r.submissionB.userId.fullName\n        },\n        similarity: r.similarity,\n        details: r.details\n      })),\n      scanCompletedAt: new Date()\n    };\n\n    res.json({\n      success: true,\n      data: scanResult,\n      message: `Plagiarism scan completed. Found ${results.length} potential matches.`\n    });\n\n  } catch (error) {\n    console.error('Plagiarism scan error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Plagiarism scan failed'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":7147},"backend/routes/problems.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst problemController = require('../controllers/problemController');\nconst { authenticate, requireTeacher, optionalAuth } = require('../middleware/auth');\nconst { validate, problemSchemas, querySchemas } = require('../middleware/validation');\n\n// Public/Optional auth routes\nrouter.get('/', optionalAuth, validate(querySchemas.pagination, 'query'), problemController.getProblems);\nrouter.get('/:id', optionalAuth, problemController.getProblem);\nrouter.get('/:id/stats', optionalAuth, problemController.getProblemStats);\n\n// Teacher/Admin routes\nrouter.post('/', authenticate, requireTeacher, validate(problemSchemas.create), problemController.createProblem);\nrouter.put('/:id', authenticate, requireTeacher, validate(problemSchemas.update), problemController.updateProblem);\nrouter.delete('/:id', authenticate, requireTeacher, problemController.deleteProblem);\n\n// Test case management (teachers only)\nrouter.post('/:id/test-cases', authenticate, requireTeacher, validate(problemSchemas.addTestCase), problemController.addTestCase);\nrouter.put('/:id/test-cases/:testCaseId', authenticate, requireTeacher, problemController.updateTestCase);\nrouter.delete('/:id/test-cases/:testCaseId', authenticate, requireTeacher, problemController.deleteTestCase);\n\nmodule.exports = router;","size_bytes":1347},"backend/routes/submissions.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst submissionController = require('../controllers/submissionController');\nconst { authenticate, requireTeacher } = require('../middleware/auth');\nconst { validate, submissionSchemas, querySchemas } = require('../middleware/validation');\n\n// All submission routes require authentication\nrouter.use(authenticate);\n\n// Submit solution\nrouter.post('/', validate(submissionSchemas.create), submissionController.submitSolution);\n\n// Get submissions (with filtering)\nrouter.get('/', validate(querySchemas.pagination, 'query'), submissionController.getSubmissions);\n\n// Get specific submission\nrouter.get('/:id', submissionController.getSubmission);\n\n// Execute code with custom input (run endpoint)\nrouter.post('/run', submissionController.runCode);\n\n// Rerun submission (teachers/admin only)  \nrouter.post('/:id/rerun', requireTeacher, submissionController.rerunSubmission);\n\nmodule.exports = router;","size_bytes":967},"backend/routes/upload.js":{"content":"const express = require('express');\nconst router = express.Router();\n\nconst fileUploadService = require('../services/fileUploadService');\nconst { authenticate, requireTeacher } = require('../middleware/auth');\n\n// All upload routes require teacher authentication\nrouter.use(authenticate, requireTeacher);\n\n// Upload test cases for problems\nrouter.post('/test-cases', \n  fileUploadService.uploadMultiple('files'), \n  fileUploadService.uploadTestCases\n);\n\n// Upload contest data\nrouter.post('/contest-data', \n  fileUploadService.uploadSingle('file'), \n  fileUploadService.uploadContestData\n);\n\n// Get uploaded file\nrouter.get('/files/:type/:filename', fileUploadService.getFile);\n\n// Delete uploaded file\nrouter.delete('/files/:type/:filename', fileUploadService.deleteFile);\n\nmodule.exports = router;","size_bytes":799},"backend/services/fileUploadService.js":{"content":"const multer = require('multer');\nconst path = require('path');\nconst fs = require('fs').promises;\n\n// Create upload directory if it doesn't exist\nconst ensureUploadDir = async (dir) => {\n  try {\n    await fs.access(dir);\n  } catch (error) {\n    await fs.mkdir(dir, { recursive: true });\n  }\n};\n\n// Configure multer storage\nconst storage = multer.diskStorage({\n  destination: async (req, file, cb) => {\n    const uploadPath = process.env.UPLOAD_PATH || './uploads';\n    const subDir = req.body.type || 'general'; // testcases, problems, etc.\n    const fullPath = path.join(uploadPath, subDir);\n    \n    try {\n      await ensureUploadDir(fullPath);\n      cb(null, fullPath);\n    } catch (error) {\n      cb(error);\n    }\n  },\n  filename: (req, file, cb) => {\n    // Generate unique filename\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const extension = path.extname(file.originalname);\n    const baseName = path.basename(file.originalname, extension);\n    const sanitizedBaseName = baseName.replace(/[^a-zA-Z0-9-_]/g, '_');\n    \n    cb(null, `${sanitizedBaseName}-${uniqueSuffix}${extension}`);\n  }\n});\n\n// File filter function\nconst fileFilter = (req, file, cb) => {\n  const allowedTypes = {\n    testcases: ['.txt', '.in', '.out', '.json'],\n    problems: ['.txt', '.md', '.json'],\n    general: ['.txt', '.json', '.csv', '.zip'],\n    images: ['.jpg', '.jpeg', '.png', '.gif']\n  };\n\n  const uploadType = req.body.type || 'general';\n  const allowed = allowedTypes[uploadType] || allowedTypes.general;\n  const extension = path.extname(file.originalname).toLowerCase();\n\n  if (allowed.includes(extension)) {\n    cb(null, true);\n  } else {\n    cb(new Error(`File type ${extension} not allowed for ${uploadType} uploads`), false);\n  }\n};\n\n// Configure multer\nconst upload = multer({\n  storage,\n  fileFilter,\n  limits: {\n    fileSize: parseInt(process.env.MAX_FILE_SIZE) || 10 * 1024 * 1024, // 10MB default\n    files: 10 // Maximum 10 files per request\n  }\n});\n\n// Middleware for single file upload\nconst uploadSingle = (fieldName = 'file') => {\n  return upload.single(fieldName);\n};\n\n// Middleware for multiple file upload\nconst uploadMultiple = (fieldName = 'files', maxCount = 10) => {\n  return upload.array(fieldName, maxCount);\n};\n\n// Upload handler for test cases\nconst uploadTestCases = async (req, res) => {\n  try {\n    if (!req.files || req.files.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No files uploaded'\n      });\n    }\n\n    const testCases = [];\n    \n    // Process uploaded files\n    for (const file of req.files) {\n      try {\n        const content = await fs.readFile(file.path, 'utf8');\n        \n        // Parse test case file (expecting JSON format)\n        let testCase;\n        if (path.extname(file.originalname) === '.json') {\n          testCase = JSON.parse(content);\n        } else {\n          // For .txt files, assume input and output are separated by a delimiter\n          const lines = content.trim().split('\\n');\n          const separatorIndex = lines.findIndex(line => line.trim() === '---' || line.trim() === '===');\n          \n          if (separatorIndex > 0) {\n            testCase = {\n              input: lines.slice(0, separatorIndex).join('\\n'),\n              expectedOutput: lines.slice(separatorIndex + 1).join('\\n'),\n              isPublic: false,\n              points: 10\n            };\n          } else {\n            throw new Error('Invalid test case format');\n          }\n        }\n\n        testCases.push({\n          ...testCase,\n          originalFileName: file.originalname,\n          filePath: file.path\n        });\n\n      } catch (parseError) {\n        console.error(`Error parsing test case file ${file.originalname}:`, parseError);\n        // Clean up the file\n        try {\n          await fs.unlink(file.path);\n        } catch (unlinkError) {\n          console.error('Error cleaning up file:', unlinkError);\n        }\n      }\n    }\n\n    if (testCases.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No valid test cases found in uploaded files'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        testCases,\n        count: testCases.length\n      },\n      message: `Successfully processed ${testCases.length} test case(s)`\n    });\n\n  } catch (error) {\n    console.error('Upload test cases error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process uploaded test cases'\n    });\n  }\n};\n\n// Upload handler for contest data\nconst uploadContestData = async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        success: false,\n        error: 'No file uploaded'\n      });\n    }\n\n    const content = await fs.readFile(req.file.path, 'utf8');\n    let contestData;\n\n    try {\n      if (path.extname(req.file.originalname) === '.json') {\n        contestData = JSON.parse(content);\n      } else if (path.extname(req.file.originalname) === '.csv') {\n        // Basic CSV parsing for contest data\n        const lines = content.trim().split('\\n');\n        const headers = lines[0].split(',');\n        const data = lines.slice(1).map(line => {\n          const values = line.split(',');\n          const obj = {};\n          headers.forEach((header, index) => {\n            obj[header.trim()] = values[index]?.trim();\n          });\n          return obj;\n        });\n        contestData = { problems: data };\n      } else {\n        throw new Error('Unsupported file format');\n      }\n    } catch (parseError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid file format or content'\n      });\n    }\n\n    // Clean up the uploaded file\n    try {\n      await fs.unlink(req.file.path);\n    } catch (unlinkError) {\n      console.error('Error cleaning up file:', unlinkError);\n    }\n\n    res.json({\n      success: true,\n      data: contestData,\n      message: 'Contest data processed successfully'\n    });\n\n  } catch (error) {\n    console.error('Upload contest data error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process contest data'\n    });\n  }\n};\n\n// Get uploaded file\nconst getFile = async (req, res) => {\n  try {\n    const { type, filename } = req.params;\n    const uploadPath = process.env.UPLOAD_PATH || './uploads';\n    const filePath = path.join(uploadPath, type, filename);\n\n    // Security check - ensure file is within upload directory\n    const normalizedPath = path.normalize(filePath);\n    const normalizedUploadPath = path.normalize(uploadPath);\n    \n    if (!normalizedPath.startsWith(normalizedUploadPath)) {\n      return res.status(403).json({\n        success: false,\n        error: 'Access denied'\n      });\n    }\n\n    try {\n      await fs.access(filePath);\n    } catch (error) {\n      return res.status(404).json({\n        success: false,\n        error: 'File not found'\n      });\n    }\n\n    res.sendFile(path.resolve(filePath));\n\n  } catch (error) {\n    console.error('Get file error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve file'\n    });\n  }\n};\n\n// Delete uploaded file\nconst deleteFile = async (req, res) => {\n  try {\n    const { type, filename } = req.params;\n    const uploadPath = process.env.UPLOAD_PATH || './uploads';\n    const filePath = path.join(uploadPath, type, filename);\n\n    // Security check\n    const normalizedPath = path.normalize(filePath);\n    const normalizedUploadPath = path.normalize(uploadPath);\n    \n    if (!normalizedPath.startsWith(normalizedUploadPath)) {\n      return res.status(403).json({\n        success: false,\n        error: 'Access denied'\n      });\n    }\n\n    try {\n      await fs.unlink(filePath);\n    } catch (error) {\n      return res.status(404).json({\n        success: false,\n        error: 'File not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'File deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Delete file error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete file'\n    });\n  }\n};\n\nmodule.exports = {\n  uploadSingle,\n  uploadMultiple,\n  uploadTestCases,\n  uploadContestData,\n  getFile,\n  deleteFile\n};","size_bytes":8249},"backend/services/judge0Service.js":{"content":"const axios = require('axios');\n\nclass Judge0Service {\n  constructor() {\n    this.baseURL = process.env.JUDGE0_API_URL || 'https://judge0-ce.p.rapidapi.com';\n    this.apiKey = process.env.JUDGE0_API_KEY;\n    this.languageMap = {\n      'python': 71,    // Python 3.8.1\n      'javascript': 63, // JavaScript (Node.js 12.14.0)\n      'java': 62,      // Java (OpenJDK 13.0.1)\n      'cpp': 54,       // C++ (GCC 9.2.0)\n      'c': 50,         // C (GCC 9.2.0)\n      'go': 60,        // Go (1.13.5)\n      'rust': 73       // Rust (1.40.0)\n    };\n  }\n\n  // Submit code for execution\n  async submitCode(code, language, input = '', expectedOutput = '') {\n    try {\n      const languageId = this.languageMap[language];\n      if (!languageId) {\n        throw new Error(`Unsupported language: ${language}`);\n      }\n\n      // If in development/testing mode without real Judge0 API\n      if (!this.apiKey || this.apiKey === 'mock-judge0-key') {\n        return this.mockSubmission(code, language, input, expectedOutput);\n      }\n\n      const submissionData = {\n        source_code: Buffer.from(code).toString('base64'),\n        language_id: languageId,\n        stdin: Buffer.from(input).toString('base64'),\n        expected_output: expectedOutput ? Buffer.from(expectedOutput).toString('base64') : undefined\n      };\n\n      const response = await axios.post(`${this.baseURL}/submissions`, submissionData, {\n        params: {\n          base64_encoded: 'true',\n          wait: 'false'\n        },\n        headers: {\n          'Content-Type': 'application/json',\n          'X-RapidAPI-Key': this.apiKey,\n          'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com'\n        }\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Judge0 submission error:', error);\n      throw new Error('Code execution failed');\n    }\n  }\n\n  // Get submission result\n  async getSubmissionResult(token) {\n    try {\n      // If in development/testing mode\n      if (!this.apiKey || this.apiKey === 'mock-judge0-key') {\n        return this.mockResult(token);\n      }\n\n      const response = await axios.get(`${this.baseURL}/submissions/${token}`, {\n        params: {\n          base64_encoded: 'true',\n          fields: '*'\n        },\n        headers: {\n          'X-RapidAPI-Key': this.apiKey,\n          'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com'\n        }\n      });\n\n      const result = response.data;\n\n      // Decode base64 encoded fields\n      if (result.stdout) result.stdout = Buffer.from(result.stdout, 'base64').toString();\n      if (result.stderr) result.stderr = Buffer.from(result.stderr, 'base64').toString();\n      if (result.compile_output) result.compile_output = Buffer.from(result.compile_output, 'base64').toString();\n\n      return result;\n    } catch (error) {\n      console.error('Judge0 get result error:', error);\n      throw new Error('Failed to get execution result');\n    }\n  }\n\n  // Mock submission for development/testing\n  mockSubmission(code, language, input, expectedOutput) {\n    const token = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    return { token };\n  }\n\n  // Mock result for development/testing\n  mockResult(token) {\n    // Simulate different outcomes based on random chance\n    const random = Math.random();\n    const executionTime = Math.floor(Math.random() * 100) + 10; // 10-110ms\n    const memory = Math.floor(Math.random() * 50000) + 30000; // 30-80MB\n\n    if (random > 0.8) {\n      // Runtime error\n      return {\n        status: { id: 5, description: 'Time Limit Exceeded' },\n        time: '2.000',\n        memory: memory,\n        stdout: null,\n        stderr: null,\n        compile_output: null,\n        token\n      };\n    } else if (random > 0.7) {\n      // Wrong answer\n      return {\n        status: { id: 4, description: 'Wrong Answer' },\n        time: (executionTime / 1000).toFixed(3),\n        memory: memory,\n        stdout: 'incorrect output',\n        stderr: null,\n        compile_output: null,\n        token\n      };\n    } else if (random > 0.6) {\n      // Runtime error\n      return {\n        status: { id: 6, description: 'Runtime Error (NZEC)' },\n        time: (executionTime / 1000).toFixed(3),\n        memory: memory,\n        stdout: null,\n        stderr: 'IndexError: list index out of range',\n        compile_output: null,\n        token\n      };\n    } else {\n      // Accepted\n      return {\n        status: { id: 3, description: 'Accepted' },\n        time: (executionTime / 1000).toFixed(3),\n        memory: memory,\n        stdout: 'expected output',\n        stderr: null,\n        compile_output: null,\n        token\n      };\n    }\n  }\n\n  // Execute code against multiple test cases\n  async executeWithTestCases(code, language, testCases, timeLimit = 2, memoryLimit = 128) {\n    try {\n      const results = [];\n      \n      for (const testCase of testCases) {\n        const submission = await this.submitCode(\n          code, \n          language, \n          testCase.input, \n          testCase.expectedOutput\n        );\n\n        // Wait a bit for processing (in real implementation, you'd poll the status)\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        const result = await this.getSubmissionResult(submission.token);\n        \n        const testResult = {\n          input: testCase.input,\n          expectedOutput: testCase.expectedOutput,\n          actualOutput: result.stdout,\n          status: this.mapStatusToInternal(result.status),\n          executionTime: result.time ? parseFloat(result.time) * 1000 : null,\n          memoryUsage: result.memory ? Math.round(result.memory / 1024) : null,\n          errorMessage: result.stderr || result.compile_output || null\n        };\n\n        results.push(testResult);\n\n        // Stop execution on first failure in contest mode\n        if (testResult.status !== 'passed') {\n          break;\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Test case execution error:', error);\n      throw error;\n    }\n  }\n\n  // Map Judge0 status to internal status\n  mapStatusToInternal(status) {\n    const statusMap = {\n      3: 'passed',      // Accepted\n      4: 'failed',      // Wrong Answer\n      5: 'tle',         // Time Limit Exceeded\n      6: 'runtime_error', // Runtime Error\n      7: 'runtime_error', // Runtime Error\n      8: 'runtime_error', // Runtime Error\n      9: 'runtime_error', // Runtime Error\n      10: 'runtime_error', // Runtime Error\n      11: 'runtime_error', // Runtime Error\n      12: 'runtime_error', // Runtime Error\n      13: 'runtime_error', // Runtime Error\n      14: 'mle'         // Memory Limit Exceeded\n    };\n\n    return statusMap[status.id] || 'failed';\n  }\n\n  // Get supported languages\n  getSupportedLanguages() {\n    return Object.keys(this.languageMap);\n  }\n}\n\nmodule.exports = new Judge0Service();","size_bytes":6811},"backend/services/plagiarismService.js":{"content":"const axios = require('axios');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nclass PlagiarismService {\n  constructor() {\n    this.jplagUrl = process.env.JPLAG_API_URL || 'https://jplag.ipd.kit.edu/api/v1';\n    this.jplagApiKey = process.env.JPLAG_API_KEY;\n    this.mossUserId = process.env.MOSS_USER_ID; // Legacy support for MOSS\n  }\n\n  // Compare two code submissions for similarity\n  async compareSubmissions(submission1, submission2) {\n    try {\n      // Use JPlag API if available, otherwise use mock comparison\n      if (!this.jplagApiKey && (!this.mossUserId || this.mossUserId === 'mock-moss-user')) {\n        return this.mockComparison(submission1, submission2);\n      }\n\n      // Real implementation would call JPlag or MOSS API\n      const similarity = await this.calculateSimilarity(\n        submission1.code, \n        submission2.code, \n        submission1.language\n      );\n\n      return {\n        similarity,\n        details: this.generateComparisonDetails(submission1, submission2, similarity),\n        structuralSimilarity: similarity * 0.9 + Math.random() * 10,\n        variableNameSimilarity: similarity * 0.7 + Math.random() * 20,\n        logicSimilarity: similarity * 0.8 + Math.random() * 15,\n        commentSimilarity: similarity * 0.5 + Math.random() * 30\n      };\n\n    } catch (error) {\n      console.error('Plagiarism comparison error:', error);\n      throw new Error('Plagiarism comparison failed');\n    }\n  }\n\n  // Scan all submissions for a contest/problem for plagiarism\n  async scanSubmissions(submissions, threshold = 70) {\n    try {\n      const results = [];\n      const processed = new Set();\n\n      for (let i = 0; i < submissions.length; i++) {\n        for (let j = i + 1; j < submissions.length; j++) {\n          const sub1 = submissions[i];\n          const sub2 = submissions[j];\n\n          // Skip if same user or already processed\n          const pairKey = `${sub1._id}-${sub2._id}`;\n          const pairKeyReverse = `${sub2._id}-${sub1._id}`;\n          \n          if (processed.has(pairKey) || processed.has(pairKeyReverse)) {\n            continue;\n          }\n\n          if (sub1.userId.toString() === sub2.userId.toString()) {\n            continue;\n          }\n\n          // Only compare submissions in same language\n          if (sub1.language !== sub2.language) {\n            continue;\n          }\n\n          processed.add(pairKey);\n\n          const comparison = await this.compareSubmissions(sub1, sub2);\n\n          if (comparison.similarity >= threshold) {\n            results.push({\n              submissionA: sub1,\n              submissionB: sub2,\n              similarity: comparison.similarity,\n              details: comparison.details,\n              analysis: {\n                structuralSimilarity: comparison.structuralSimilarity,\n                variableNameSimilarity: comparison.variableNameSimilarity,\n                logicSimilarity: comparison.logicSimilarity,\n                commentSimilarity: comparison.commentSimilarity\n              },\n              flaggedAt: new Date()\n            });\n          }\n\n          // Add small delay to prevent overwhelming the API\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Plagiarism scan error:', error);\n      throw new Error('Plagiarism scan failed');\n    }\n  }\n\n  // Calculate similarity between two code strings\n  async calculateSimilarity(code1, code2, language) {\n    try {\n      // Simple similarity algorithm (in production, use more sophisticated methods)\n      const lines1 = this.normalizeCode(code1, language);\n      const lines2 = this.normalizeCode(code2, language);\n\n      if (lines1.length === 0 || lines2.length === 0) {\n        return 0;\n      }\n\n      let matchingLines = 0;\n      const usedLines = new Set();\n\n      for (const line1 of lines1) {\n        for (let i = 0; i < lines2.length; i++) {\n          if (usedLines.has(i)) continue;\n          \n          const similarity = this.stringSimilarity(line1, lines2[i]);\n          if (similarity > 0.8) {\n            matchingLines++;\n            usedLines.add(i);\n            break;\n          }\n        }\n      }\n\n      const similarity = (matchingLines / Math.max(lines1.length, lines2.length)) * 100;\n      return Math.min(100, Math.max(0, Math.round(similarity)));\n\n    } catch (error) {\n      console.error('Similarity calculation error:', error);\n      return 0;\n    }\n  }\n\n  // Normalize code by removing comments, whitespace, etc.\n  normalizeCode(code, language) {\n    let lines = code.split('\\n');\n\n    // Remove empty lines and comments\n    lines = lines\n      .map(line => line.trim())\n      .filter(line => {\n        if (!line) return false;\n        \n        // Remove comments based on language\n        if (language === 'python' && (line.startsWith('#') || line.startsWith('\"\"\"') || line.startsWith(\"'''\"))) {\n          return false;\n        }\n        if (['javascript', 'java', 'cpp', 'c'].includes(language) && (line.startsWith('//') || line.startsWith('/*'))) {\n          return false;\n        }\n        \n        return true;\n      })\n      .map(line => {\n        // Normalize variable names and spacing\n        return line\n          .replace(/\\s+/g, ' ')\n          .replace(/([a-zA-Z_][a-zA-Z0-9_]*)/g, 'VAR')\n          .replace(/\\d+/g, 'NUM');\n      });\n\n    return lines;\n  }\n\n  // Calculate string similarity using Levenshtein distance\n  stringSimilarity(str1, str2) {\n    const matrix = Array(str1.length + 1).fill().map(() => Array(str2.length + 1).fill(0));\n\n    for (let i = 0; i <= str1.length; i++) matrix[i][0] = i;\n    for (let j = 0; j <= str2.length; j++) matrix[0][j] = j;\n\n    for (let i = 1; i <= str1.length; i++) {\n      for (let j = 1; j <= str2.length; j++) {\n        const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j - 1] + cost\n        );\n      }\n    }\n\n    const maxLen = Math.max(str1.length, str2.length);\n    return maxLen === 0 ? 1 : (maxLen - matrix[str1.length][str2.length]) / maxLen;\n  }\n\n  // Mock comparison for development\n  mockComparison(submission1, submission2) {\n    const baseSimilarity = Math.floor(Math.random() * 40) + 40; // 40-80%\n    \n    // Increase similarity if codes have similar structure\n    let similarity = baseSimilarity;\n    \n    if (submission1.language === submission2.language) {\n      similarity += 10;\n    }\n\n    if (submission1.code.length && submission2.code.length) {\n      const lengthRatio = Math.min(submission1.code.length, submission2.code.length) / \n                         Math.max(submission1.code.length, submission2.code.length);\n      similarity += lengthRatio * 10;\n    }\n\n    similarity = Math.min(100, Math.max(0, Math.round(similarity)));\n\n    return {\n      similarity,\n      details: `Mock plagiarism analysis - ${similarity}% similarity detected`,\n      structuralSimilarity: similarity * 0.9 + Math.random() * 10,\n      variableNameSimilarity: similarity * 0.7 + Math.random() * 20,\n      logicSimilarity: similarity * 0.8 + Math.random() * 15,\n      commentSimilarity: similarity * 0.5 + Math.random() * 30\n    };\n  }\n\n  // Generate detailed comparison report\n  generateComparisonDetails(submission1, submission2, similarity) {\n    const details = [];\n    \n    details.push(`Language: ${submission1.language}`);\n    details.push(`Similarity Score: ${similarity}%`);\n    details.push(`Code Length Ratio: ${Math.min(submission1.code.length, submission2.code.length)} / ${Math.max(submission1.code.length, submission2.code.length)}`);\n    \n    if (similarity > 80) {\n      details.push('High similarity detected - manual review recommended');\n    } else if (similarity > 60) {\n      details.push('Moderate similarity detected - possible collaboration');\n    } else {\n      details.push('Low similarity - likely independent work');\n    }\n\n    return details.join('; ');\n  }\n\n  // Update submission plagiarism score\n  async updateSubmissionPlagiarismScore(submissionId, score, similarSubmissions = []) {\n    try {\n      const Submission = require('../models/Submission');\n      \n      await Submission.findByIdAndUpdate(submissionId, {\n        $set: {\n          'plagiarismCheck.checked': true,\n          'plagiarismCheck.score': score,\n          'plagiarismCheck.similarSubmissions': similarSubmissions,\n          'plagiarismCheck.checkedAt': new Date()\n        }\n      });\n\n    } catch (error) {\n      console.error('Update plagiarism score error:', error);\n    }\n  }\n}\n\nmodule.exports = new PlagiarismService();","size_bytes":8629},"backend/sockets/leaderboardSocket.js":{"content":"const socketIo = require('socket.io');\nconst Contest = require('../models/Contest');\nconst Submission = require('../models/Submission');\n\nclass LeaderboardSocket {\n  constructor(server) {\n    this.io = socketIo(server, {\n      cors: {\n        origin: process.env.WEBSOCKET_CORS_ORIGINS?.split(',') || [\"http://localhost:3000\", \"http://localhost:5000\"],\n        methods: [\"GET\", \"POST\"]\n      }\n    });\n\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.io.on('connection', (socket) => {\n      console.log(`Client connected: ${socket.id}`);\n\n      // Join contest leaderboard room\n      socket.on('join_contest', async (data) => {\n        try {\n          const { contestId, userId } = data;\n          \n          // Validate contest exists and user has access\n          const contest = await Contest.findById(contestId);\n          if (!contest) {\n            socket.emit('error', { message: 'Contest not found' });\n            return;\n          }\n\n          // Join room\n          socket.join(`contest_${contestId}`);\n          socket.contestId = contestId;\n          socket.userId = userId;\n\n          // Send current leaderboard\n          const leaderboard = await this.getContestLeaderboard(contestId);\n          socket.emit('leaderboard_update', leaderboard);\n\n          console.log(`User ${userId} joined contest ${contestId} leaderboard`);\n\n        } catch (error) {\n          console.error('Join contest error:', error);\n          socket.emit('error', { message: 'Failed to join contest' });\n        }\n      });\n\n      // Leave contest leaderboard room\n      socket.on('leave_contest', () => {\n        if (socket.contestId) {\n          socket.leave(`contest_${socket.contestId}`);\n          console.log(`User ${socket.userId} left contest ${socket.contestId} leaderboard`);\n          socket.contestId = null;\n          socket.userId = null;\n        }\n      });\n\n      // Join submission feed room\n      socket.on('join_submission_feed', (data) => {\n        const { contestId } = data;\n        socket.join(`submissions_${contestId}`);\n        console.log(`Client joined submission feed for contest ${contestId}`);\n      });\n\n      // Leave submission feed room\n      socket.on('leave_submission_feed', (data) => {\n        const { contestId } = data;\n        socket.leave(`submissions_${contestId}`);\n        console.log(`Client left submission feed for contest ${contestId}`);\n      });\n\n      // Handle disconnection\n      socket.on('disconnect', () => {\n        console.log(`Client disconnected: ${socket.id}`);\n        if (socket.contestId) {\n          socket.leave(`contest_${socket.contestId}`);\n        }\n      });\n    });\n  }\n\n  // Get contest leaderboard data\n  async getContestLeaderboard(contestId, limit = 50) {\n    try {\n      const contest = await Contest.findById(contestId)\n        .populate('participants.user', 'username fullName avatar')\n        .lean();\n\n      if (!contest) return [];\n\n      // Sort participants by score and rank\n      const leaderboard = contest.participants\n        .sort((a, b) => {\n          if (b.score !== a.score) return b.score - a.score;\n          \n          // Tiebreaker: earliest last submission time\n          const aLastSubmission = Math.max(...(a.submissions.map(s => new Date(s.submittedAt)) || [0]));\n          const bLastSubmission = Math.max(...(b.submissions.map(s => new Date(s.submittedAt)) || [0]));\n          \n          return aLastSubmission - bLastSubmission;\n        })\n        .slice(0, limit)\n        .map((participant, index) => ({\n          rank: index + 1,\n          userId: participant.user._id,\n          username: participant.user.username,\n          fullName: participant.user.fullName,\n          avatar: participant.user.avatar,\n          score: participant.score,\n          problemsSolved: participant.submissions.length,\n          lastSubmission: participant.submissions.length > 0 ? \n            Math.max(...participant.submissions.map(s => new Date(s.submittedAt))) : null\n        }));\n\n      return {\n        contestId,\n        leaderboard,\n        totalParticipants: contest.participants.length,\n        lastUpdated: new Date()\n      };\n\n    } catch (error) {\n      console.error('Get leaderboard error:', error);\n      return [];\n    }\n  }\n\n  // Broadcast leaderboard update to all clients in contest room\n  async broadcastLeaderboardUpdate(contestId) {\n    try {\n      const leaderboard = await this.getContestLeaderboard(contestId);\n      this.io.to(`contest_${contestId}`).emit('leaderboard_update', leaderboard);\n      \n      console.log(`Broadcasted leaderboard update for contest ${contestId}`);\n    } catch (error) {\n      console.error('Broadcast leaderboard error:', error);\n    }\n  }\n\n  // Broadcast new submission to submission feed\n  async broadcastNewSubmission(submission) {\n    try {\n      const submissionWithUser = await Submission.findById(submission._id)\n        .populate('userId', 'username fullName')\n        .populate('problemId', 'title')\n        .lean();\n\n      const submissionData = {\n        id: submissionWithUser._id,\n        username: submissionWithUser.userId.username,\n        fullName: submissionWithUser.userId.fullName,\n        problemTitle: submissionWithUser.problemId.title,\n        language: submissionWithUser.language,\n        status: submissionWithUser.status,\n        score: submissionWithUser.score,\n        submittedAt: submissionWithUser.createdAt\n      };\n\n      if (submissionWithUser.contestId) {\n        this.io.to(`submissions_${submissionWithUser.contestId}`).emit('new_submission', submissionData);\n        \n        // Also update leaderboard if status changed\n        if (submissionWithUser.status !== 'pending' && submissionWithUser.status !== 'running') {\n          await this.broadcastLeaderboardUpdate(submissionWithUser.contestId);\n        }\n      }\n\n    } catch (error) {\n      console.error('Broadcast submission error:', error);\n    }\n  }\n\n  // Send real-time notifications\n  sendNotification(userId, notification) {\n    this.io.emit('notification', {\n      userId,\n      ...notification,\n      timestamp: new Date()\n    });\n  }\n\n  // Broadcast contest status updates\n  async broadcastContestUpdate(contest) {\n    try {\n      const contestData = {\n        id: contest._id,\n        title: contest.title,\n        status: contest.status,\n        startTime: contest.startTime,\n        endTime: contest.endTime,\n        participantCount: contest.participants.length\n      };\n\n      this.io.emit('contest_update', contestData);\n\n      // Also send to specific contest room\n      this.io.to(`contest_${contest._id}`).emit('contest_status_update', contestData);\n\n    } catch (error) {\n      console.error('Broadcast contest update error:', error);\n    }\n  }\n}\n\nmodule.exports = LeaderboardSocket;","size_bytes":6757},"backend/utils/jwt.js":{"content":"const jwt = require('jsonwebtoken');\n\n// Generate JWT token\nconst generateToken = (payload, expiresIn = process.env.JWT_EXPIRE) => {\n  return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn });\n};\n\n// Verify JWT token\nconst verifyToken = (token) => {\n  return jwt.verify(token, process.env.JWT_SECRET);\n};\n\n// Generate access and refresh tokens\nconst generateTokens = (user) => {\n  const payload = {\n    id: user._id,\n    username: user.username,\n    email: user.email,\n    role: user.role\n  };\n\n  const accessToken = generateToken(payload, '15m'); // Short-lived access token\n  const refreshToken = generateToken({ id: user._id }, '7d'); // Long-lived refresh token\n\n  return { accessToken, refreshToken };\n};\n\nmodule.exports = {\n  generateToken,\n  verifyToken,\n  generateTokens\n};","size_bytes":788},"components/ui/avatar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1099},"components/ui/badge.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span'\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1632},"components/ui/button.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2124},"components/ui/calendar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from 'lucide-react'\nimport { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = 'label',\n  buttonVariant = 'ghost',\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>['variant']\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className,\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString('default', { month: 'short' }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn('w-fit', defaultClassNames.root),\n        months: cn(\n          'flex gap-4 flex-col md:flex-row relative',\n          defaultClassNames.months,\n        ),\n        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),\n        nav: cn(\n          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',\n          defaultClassNames.nav,\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_previous,\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_next,\n        ),\n        month_caption: cn(\n          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',\n          defaultClassNames.month_caption,\n        ),\n        dropdowns: cn(\n          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',\n          defaultClassNames.dropdowns,\n        ),\n        dropdown_root: cn(\n          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',\n          defaultClassNames.dropdown_root,\n        ),\n        dropdown: cn(\n          'absolute bg-popover inset-0 opacity-0',\n          defaultClassNames.dropdown,\n        ),\n        caption_label: cn(\n          'select-none font-medium',\n          captionLayout === 'label'\n            ? 'text-sm'\n            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',\n          defaultClassNames.caption_label,\n        ),\n        table: 'w-full border-collapse',\n        weekdays: cn('flex', defaultClassNames.weekdays),\n        weekday: cn(\n          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',\n          defaultClassNames.weekday,\n        ),\n        week: cn('flex w-full mt-2', defaultClassNames.week),\n        week_number_header: cn(\n          'select-none w-(--cell-size)',\n          defaultClassNames.week_number_header,\n        ),\n        week_number: cn(\n          'text-[0.8rem] select-none text-muted-foreground',\n          defaultClassNames.week_number,\n        ),\n        day: cn(\n          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',\n          defaultClassNames.day,\n        ),\n        range_start: cn(\n          'rounded-l-md bg-accent',\n          defaultClassNames.range_start,\n        ),\n        range_middle: cn('rounded-none', defaultClassNames.range_middle),\n        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),\n        today: cn(\n          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',\n          defaultClassNames.today,\n        ),\n        outside: cn(\n          'text-muted-foreground aria-selected:text-muted-foreground',\n          defaultClassNames.outside,\n        ),\n        disabled: cn(\n          'text-muted-foreground opacity-50',\n          defaultClassNames.disabled,\n        ),\n        hidden: cn('invisible', defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === 'left') {\n            return (\n              <ChevronLeftIcon className={cn('size-4', className)} {...props} />\n            )\n          }\n\n          if (orientation === 'right') {\n            return (\n              <ChevronRightIcon\n                className={cn('size-4', className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn('size-4', className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',\n        defaultClassNames.day,\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7679},"components/ui/card.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1992},"components/ui/collapsible.tsx":{"content":"'use client'\n\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible'\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"components/ui/dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3985},"components/ui/dropdown-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8292},"components/ui/input.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":968},"components/ui/label.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":612},"components/ui/popover.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\n\nimport { cn } from '@/lib/utils'\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1636},"components/ui/progress.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ProgressPrimitive from '@radix-ui/react-progress'\n\nimport { cn } from '@/lib/utils'\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":741},"components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { PanelGroup, Panel, PanelResizeHandle } from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({ \n  className, \n  ...props \n}: React.ComponentProps<typeof PanelGroup>) => (\n  <PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <svg\n          width=\"15\"\n          height=\"15\"\n          viewBox=\"0 0 15 15\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-2.5 w-2.5\"\n        >\n          <path\n            d=\"M5.5 4.625C6.12132 4.625 6.625 4.12132 6.625 3.5C6.625 2.87868 6.12132 2.375 5.5 2.375C4.87868 2.375 4.375 2.87868 4.375 3.5C4.375 4.12132 4.87868 4.625 5.5 4.625ZM9.5 4.625C10.1213 4.625 10.625 4.12132 10.625 3.5C10.625 2.87868 10.1213 2.375 9.5 2.375C8.87868 2.375 8.375 2.87868 8.375 3.5C8.375 4.12132 8.87868 4.625 9.5 4.625ZM5.5 8.125C6.12132 8.125 6.625 7.62132 6.625 7C6.625 6.37868 6.12132 5.875 5.5 5.875C4.87868 5.875 4.375 6.37868 4.375 7C4.375 7.62132 4.87868 8.125 5.5 8.125ZM9.5 8.125C10.1213 8.125 10.625 7.62132 10.625 7C10.625 6.37868 10.1213 5.875 9.5 5.875C8.87868 5.875 8.375 6.37868 8.375 7C8.375 7.62132 8.87868 8.125 9.5 8.125ZM5.5 11.625C6.12132 11.625 6.625 11.1213 6.625 10.5C6.625 9.87868 6.12132 9.375 5.5 9.375C4.87868 9.375 4.375 9.87868 4.375 10.5C4.375 11.1213 4.87868 11.625 5.5 11.625ZM9.5 11.625C10.1213 11.625 10.625 11.1213 10.625 10.5C10.625 9.87868 10.1213 9.375 9.5 9.375C8.87868 9.375 8.375 9.87868 8.375 10.5C8.375 11.1213 8.87868 11.625 9.5 11.625Z\"\n            fill=\"currentColor\"\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      </div>\n    )}\n  </PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }","size_bytes":2909},"components/ui/scroll-area.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\n\nimport { cn } from '@/lib/utils'\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn('relative', className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none p-px transition-colors select-none',\n        orientation === 'vertical' &&\n          'h-full w-2.5 border-l border-l-transparent',\n        orientation === 'horizontal' &&\n          'h-2.5 flex-col border-t border-t-transparent',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1646},"components/ui/select.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = 'default',\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: 'sm' | 'default'\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6259},"components/ui/separator.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\n\nimport { cn } from '@/lib/utils'\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":700},"components/ui/slider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\n\nimport { cn } from '@/lib/utils'\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={\n          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5'\n        }\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={\n            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full'\n          }\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":1995},"components/ui/switch.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SwitchPrimitive from '@radix-ui/react-switch'\n\nimport { cn } from '@/lib/utils'\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={\n          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'\n        }\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1174},"components/ui/table.tsx":{"content":"'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Table({ className, ...props }: React.ComponentProps<'table'>) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<'tr'>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<'th'>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<'td'>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<'caption'>) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn('text-muted-foreground mt-4 text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2452},"components/ui/tabs.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\n\nimport { cn } from '@/lib/utils'\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1971},"components/ui/textarea.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":760},"components/ui/toast.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToastPrimitives from '@radix-ui/react-toast'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { X } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold', className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4863},"components/ui/toaster.tsx":{"content":"'use client'\n\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from '@/components/ui/toast'\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"app/api/analytics/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const type = searchParams.get(\"type\") || \"overview\"\n    const contestId = searchParams.get(\"contestId\")\n    const dateFrom = searchParams.get(\"dateFrom\")\n    const dateTo = searchParams.get(\"dateTo\")\n\n    // Simulate API delay\n    await new Promise((resolve) => setTimeout(resolve, 800))\n\n    // Mock analytics data\n    const analyticsData = {\n      overview: {\n        totalStudents: 1247,\n        activeContests: 8,\n        averageScore: 78.5,\n        totalSubmissions: 15432,\n        trends: {\n          studentsGrowth: 12,\n          scoreImprovement: 3.2,\n          submissionsGrowth: 8,\n        },\n      },\n      performance: {\n        scoreDistribution: [\n          { range: \"0-20\", count: 45 },\n          { range: \"21-40\", count: 123 },\n          { range: \"41-60\", count: 287 },\n          { range: \"61-80\", count: 456 },\n          { range: \"81-100\", count: 336 },\n        ],\n        topPerformers: [\n          { username: \"alice_codes\", score: 2850, improvement: 15.2 },\n          { username: \"bob_dev\", score: 2720, improvement: 12.8 },\n          { username: \"charlie_algo\", score: 2650, improvement: 8.5 },\n        ],\n      },\n      contests: {\n        participation: [\n          { contestName: \"Weekly Challenge #42\", participants: 156, avgScore: 82.3 },\n          { contestName: \"Algorithm Sprint\", participants: 89, avgScore: 75.6 },\n          { contestName: \"Monthly Championship\", participants: 234, avgScore: 68.9 },\n        ],\n        difficulty: {\n          easy: { attempted: 1234, solved: 1089, successRate: 88.2 },\n          medium: { attempted: 987, solved: 654, successRate: 66.3 },\n          hard: { attempted: 456, solved: 178, successRate: 39.0 },\n        },\n      },\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: analyticsData[type as keyof typeof analyticsData] || analyticsData.overview,\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Failed to fetch analytics\" }, { status: 500 })\n  }\n}\n","size_bytes":2128},"app/api/contests/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\n// Mock contest data\nconst contests = [\n  {\n    id: 1,\n    title: \"Weekly Challenge #42\",\n    description: \"Test your algorithmic skills with dynamic programming and graph theory problems.\",\n    duration: \"3 hours\",\n    participants: 156,\n    maxParticipants: 500,\n    status: \"active\",\n    startTime: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n    endTime: new Date(Date.now() + 2 * 60 * 60 * 1000 + 30 * 60 * 1000).toISOString(),\n    difficulty: \"Medium\",\n    prize: \"$500\",\n  },\n  // Add more mock contests...\n]\n\nexport async function GET() {\n  try {\n    // Simulate API delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    return NextResponse.json({\n      success: true,\n      data: contests,\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Failed to fetch contests\" }, { status: 500 })\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n\n    // Validate required fields\n    const { title, description, difficulty, duration, maxParticipants, startDate } = body\n\n    if (!title || !description || !difficulty || !duration || !maxParticipants || !startDate) {\n      return NextResponse.json({ success: false, error: \"Missing required fields\" }, { status: 400 })\n    }\n\n    // Simulate contest creation\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n\n    const newContest = {\n      id: contests.length + 1,\n      title,\n      description,\n      difficulty,\n      duration: `${duration} hour${duration !== \"1\" ? \"s\" : \"\"}`,\n      participants: 0,\n      maxParticipants: Number.parseInt(maxParticipants),\n      status: \"upcoming\",\n      startTime: new Date(startDate).toISOString(),\n      endTime: new Date(new Date(startDate).getTime() + Number.parseFloat(duration) * 60 * 60 * 1000).toISOString(),\n      prize: body.prize || null,\n    }\n\n    contests.push(newContest)\n\n    return NextResponse.json({\n      success: true,\n      data: newContest,\n      message: \"Contest created successfully\",\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Failed to create contest\" }, { status: 500 })\n  }\n}\n","size_bytes":2198},"app/api/execute/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { code, language, problemId } = body\n\n    if (!code || !language || !problemId) {\n      return NextResponse.json({ success: false, error: \"Missing required fields\" }, { status: 400 })\n    }\n\n    // Simulate code execution delay\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n\n    // Mock test results\n    const testResults = [\n      {\n        id: 1,\n        input: \"[2,7,11,15]\\n9\",\n        expectedOutput: \"[0,1]\",\n        actualOutput: \"[0,1]\",\n        status: \"passed\",\n        executionTime: \"2ms\",\n        memory: \"42.1 MB\",\n      },\n      {\n        id: 2,\n        input: \"[3,2,4]\\n6\",\n        expectedOutput: \"[1,2]\",\n        actualOutput: \"[1,2]\",\n        status: \"passed\",\n        executionTime: \"1ms\",\n        memory: \"41.8 MB\",\n      },\n      {\n        id: 3,\n        input: \"[3,3]\\n6\",\n        expectedOutput: \"[0,1]\",\n        actualOutput: Math.random() > 0.5 ? \"[0,1]\" : \"[1,0]\",\n        status: Math.random() > 0.5 ? \"passed\" : \"failed\",\n        executionTime: \"3ms\",\n        memory: \"42.3 MB\",\n      },\n    ]\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        testResults,\n        overallStatus: testResults.every((t) => t.status === \"passed\") ? \"accepted\" : \"wrong_answer\",\n        executionTime: \"3ms\",\n        memory: \"42.3 MB\",\n      },\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Code execution failed\" }, { status: 500 })\n  }\n}\n","size_bytes":1573},"app/api/leaderboard/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\n// Mock leaderboard data\nconst leaderboardData = [\n  {\n    rank: 1,\n    userId: \"user_1\",\n    username: \"alice_codes\",\n    fullName: \"Alice Johnson\",\n    score: 2850,\n    problemsSolved: 45,\n    contestsParticipated: 12,\n    averageScore: 95.2,\n    lastSubmission: \"2 hours ago\",\n    streak: 15,\n    badges: [\"Top Performer\", \"Speed Demon\"],\n  },\n  // Add more mock data...\n]\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const contestId = searchParams.get(\"contestId\")\n    const limit = Number.parseInt(searchParams.get(\"limit\") || \"50\")\n    const offset = Number.parseInt(searchParams.get(\"offset\") || \"0\")\n\n    // Simulate API delay\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    let filteredData = leaderboardData\n\n    // Filter by contest if specified\n    if (contestId && contestId !== \"all\") {\n      // In a real app, this would filter by contest participation\n      filteredData = leaderboardData.filter(() => Math.random() > 0.3)\n    }\n\n    // Apply pagination\n    const paginatedData = filteredData.slice(offset, offset + limit)\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        leaderboard: paginatedData,\n        total: filteredData.length,\n        hasMore: offset + limit < filteredData.length,\n      },\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Failed to fetch leaderboard\" }, { status: 500 })\n  }\n}\n","size_bytes":1505},"app/api/submissions/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { code, language, problemId, contestId, userId } = body\n\n    if (!code || !language || !problemId || !userId) {\n      return NextResponse.json({ success: false, error: \"Missing required fields\" }, { status: 400 })\n    }\n\n    // Simulate submission processing\n    await new Promise((resolve) => setTimeout(resolve, 3000))\n\n    const submissionId = `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    // Mock submission result\n    const submission = {\n      id: submissionId,\n      userId,\n      problemId,\n      contestId,\n      language,\n      code,\n      status: Math.random() > 0.3 ? \"accepted\" : \"wrong_answer\",\n      score: Math.floor(Math.random() * 100),\n      submissionTime: new Date().toISOString(),\n      executionTime: `${Math.floor(Math.random() * 100) + 1}ms`,\n      memory: `${(Math.random() * 20 + 40).toFixed(1)} MB`,\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: submission,\n      message: \"Submission processed successfully\",\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Submission failed\" }, { status: 500 })\n  }\n}\n","size_bytes":1259},"app/api/websocket/route.ts":{"content":"import type { NextRequest } from \"next/server\"\n\n// Mock WebSocket server simulation\n// In a real implementation, this would be handled by a separate WebSocket server\nexport async function GET(request: NextRequest) {\n  return new Response(\n    JSON.stringify({\n      message: \"WebSocket endpoint - would be handled by separate WebSocket server\",\n      endpoints: [\n        \"ws://localhost:3001/contest/{contestId}/leaderboard\",\n        \"ws://localhost:3001/contest/{contestId}/submissions\",\n        \"ws://localhost:3001/notifications\",\n      ],\n    }),\n    {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  )\n}\n","size_bytes":660},"app/auth/signin/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Code, User, GraduationCap } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\nimport { useAuth } from \"@/contexts/auth-context\"\n\nexport default function SignInPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [studentForm, setStudentForm] = useState({ email: \"\", password: \"\" })\n  const [teacherForm, setTeacherForm] = useState({ email: \"\", password: \"\" })\n  const router = useRouter()\n  const { login } = useAuth()\n\n  const handleSignIn = async (role: \"student\" | \"teacher\") => {\n    setIsLoading(true)\n    try {\n      const form = role === \"student\" ? studentForm : teacherForm\n      await login(form.email, form.password, role)\n\n      // Redirect based on role\n      if (role === \"student\") {\n        router.push(\"/dashboard\")\n      } else {\n        router.push(\"/teacher/dashboard\")\n      }\n    } catch (error) {\n      console.error(\"Sign in failed:\", error)\n    }\n    setIsLoading(false)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\" className=\"inline-flex items-center space-x-2 mb-6\">\n            <Code className=\"h-8 w-8 text-primary\" />\n            <span className=\"text-2xl font-bold\">CodeContest</span>\n          </Link>\n          <h1 className=\"text-2xl font-bold\">Welcome back</h1>\n          <p className=\"text-muted-foreground\">Sign in to your account</p>\n        </div>\n\n        <Tabs defaultValue=\"student\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"student\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              Student\n            </TabsTrigger>\n            <TabsTrigger value=\"teacher\" className=\"flex items-center gap-2\">\n              <GraduationCap className=\"h-4 w-4\" />\n              Teacher\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"student\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Student Sign In</CardTitle>\n                <CardDescription>Access your contests and track your progress</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"student-email\">Email</Label>\n                  <Input\n                    id=\"student-email\"\n                    type=\"email\"\n                    placeholder=\"student@university.edu\"\n                    value={studentForm.email}\n                    onChange={(e) => setStudentForm((prev) => ({ ...prev, email: e.target.value }))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"student-password\">Password</Label>\n                  <Input\n                    id=\"student-password\"\n                    type=\"password\"\n                    value={studentForm.password}\n                    onChange={(e) => setStudentForm((prev) => ({ ...prev, password: e.target.value }))}\n                  />\n                </div>\n                <Button className=\"w-full\" onClick={() => handleSignIn(\"student\")} disabled={isLoading}>\n                  {isLoading ? \"Signing in...\" : \"Sign In as Student\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"teacher\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Teacher Sign In</CardTitle>\n                <CardDescription>Manage contests and monitor student progress</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"teacher-email\">Email</Label>\n                  <Input\n                    id=\"teacher-email\"\n                    type=\"email\"\n                    placeholder=\"teacher@university.edu\"\n                    value={teacherForm.email}\n                    onChange={(e) => setTeacherForm((prev) => ({ ...prev, email: e.target.value }))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"teacher-password\">Password</Label>\n                  <Input\n                    id=\"teacher-password\"\n                    type=\"password\"\n                    value={teacherForm.password}\n                    onChange={(e) => setTeacherForm((prev) => ({ ...prev, password: e.target.value }))}\n                  />\n                </div>\n                <Button className=\"w-full\" onClick={() => handleSignIn(\"teacher\")} disabled={isLoading}>\n                  {isLoading ? \"Signing in...\" : \"Sign In as Teacher\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"text-center mt-6\">\n          <p className=\"text-sm text-muted-foreground\">\n            Don't have an account?{\" \"}\n            <Link href=\"/auth/signup\" className=\"text-primary hover:underline\">\n              Sign up\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":5622},"app/auth/signup/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/auth/signup/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Code, User, GraduationCap } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useRouter, useSearchParams } from \"next/navigation\"\n\nexport default function SignUpPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const defaultRole = searchParams.get(\"role\") || \"student\"\n\n  const handleSignUp = async (role: \"student\" | \"teacher\") => {\n    setIsLoading(true)\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n\n    // Redirect based on role\n    if (role === \"student\") {\n      router.push(\"/dashboard\")\n    } else {\n      router.push(\"/teacher/dashboard\")\n    }\n    setIsLoading(false)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\" className=\"inline-flex items-center space-x-2 mb-6\">\n            <Code className=\"h-8 w-8 text-primary\" />\n            <span className=\"text-2xl font-bold\">CodeContest</span>\n          </Link>\n          <h1 className=\"text-2xl font-bold\">Create your account</h1>\n          <p className=\"text-muted-foreground\">Join thousands of competitive programmers</p>\n        </div>\n\n        <Tabs defaultValue={defaultRole} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"student\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              Student\n            </TabsTrigger>\n            <TabsTrigger value=\"teacher\" className=\"flex items-center gap-2\">\n              <GraduationCap className=\"h-4 w-4\" />\n              Teacher\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"student\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Student Registration</CardTitle>\n                <CardDescription>Start your competitive programming journey</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"student-first-name\">First Name</Label>\n                    <Input id=\"student-first-name\" placeholder=\"John\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"student-last-name\">Last Name</Label>\n                    <Input id=\"student-last-name\" placeholder=\"Doe\" />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"student-email\">Email</Label>\n                  <Input id=\"student-email\" type=\"email\" placeholder=\"john.doe@university.edu\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"student-university\">University</Label>\n                  <Input id=\"student-university\" placeholder=\"Your University\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"student-password\">Password</Label>\n                  <Input id=\"student-password\" type=\"password\" />\n                </div>\n                <Button className=\"w-full\" onClick={() => handleSignUp(\"student\")} disabled={isLoading}>\n                  {isLoading ? \"Creating account...\" : \"Create Student Account\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"teacher\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Teacher Registration</CardTitle>\n                <CardDescription>Create and manage coding contests for your students</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"teacher-first-name\">First Name</Label>\n                    <Input id=\"teacher-first-name\" placeholder=\"Dr. Jane\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"teacher-last-name\">Last Name</Label>\n                    <Input id=\"teacher-last-name\" placeholder=\"Smith\" />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"teacher-email\">Email</Label>\n                  <Input id=\"teacher-email\" type=\"email\" placeholder=\"jane.smith@university.edu\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"teacher-institution\">Institution</Label>\n                  <Input id=\"teacher-institution\" placeholder=\"Your Institution\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"teacher-department\">Department</Label>\n                  <Input id=\"teacher-department\" placeholder=\"Computer Science\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"teacher-password\">Password</Label>\n                  <Input id=\"teacher-password\" type=\"password\" />\n                </div>\n                <Button className=\"w-full\" onClick={() => handleSignUp(\"teacher\")} disabled={isLoading}>\n                  {isLoading ? \"Creating account...\" : \"Create Teacher Account\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"text-center mt-6\">\n          <p className=\"text-sm text-muted-foreground\">\n            Already have an account?{\" \"}\n            <Link href=\"/auth/signin\" className=\"text-primary hover:underline\">\n              Sign in\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":6256},"app/contest/[id]/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Clock, Users, Trophy, Code, Send, Eye, Code2, Timer, Target, BarChart3, ArrowLeft } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\n// Mock contest data\nconst contestData = {\n  1: {\n    id: 1,\n    title: \"Weekly Challenge #42\",\n    description: \"Test your algorithmic skills with dynamic programming and graph theory problems.\",\n    duration: \"3 hours\",\n    participants: 156,\n    maxParticipants: 500,\n    status: \"active\" as const,\n    endTime: new Date(Date.now() + 2 * 60 * 60 * 1000 + 34 * 60 * 1000).toISOString(),\n    difficulty: \"Medium\" as const,\n    prize: \"$500\",\n    problems: [\n      {\n        id: 1,\n        title: \"Two Sum Variant\",\n        difficulty: \"Easy\",\n        points: 100,\n        solved: false,\n        description: \"Given an array of integers and a target sum, find two numbers that add up to the target.\",\n      },\n      {\n        id: 2,\n        title: \"Binary Tree Path Sum\",\n        difficulty: \"Medium\",\n        points: 200,\n        solved: true,\n        description: \"Find all root-to-leaf paths in a binary tree that sum to a given target.\",\n      },\n      {\n        id: 3,\n        title: \"Graph Shortest Path\",\n        difficulty: \"Hard\",\n        points: 300,\n        solved: false,\n        description: \"Find the shortest path between two nodes in a weighted directed graph.\",\n      },\n    ],\n  },\n  2: {\n    id: 2,\n    title: \"Algorithm Sprint\",\n    description: \"Fast-paced coding challenge focusing on optimization and time complexity.\",\n    duration: \"1.5 hours\",\n    participants: 89,\n    maxParticipants: 200,\n    status: \"active\" as const,\n    endTime: new Date(Date.now() + 45 * 60 * 1000).toISOString(),\n    difficulty: \"Hard\" as const,\n    prize: \"$200\",\n    problems: [\n      {\n        id: 4,\n        title: \"Array Optimization\",\n        difficulty: \"Medium\",\n        points: 150,\n        solved: false,\n        description: \"Optimize array operations for maximum efficiency.\",\n      },\n      {\n        id: 5,\n        title: \"String Matching\",\n        difficulty: \"Hard\",\n        points: 250,\n        solved: false,\n        description: \"Implement efficient string matching algorithms.\",\n      },\n    ],\n  },\n}\n\nexport default function ContestPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { toast } = useToast()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [selectedProblem, setSelectedProblem] = useState<number | null>(null)\n  const [code, setCode] = useState(\"\")\n  const [language, setLanguage] = useState(\"javascript\")\n  const [timeLeft, setTimeLeft] = useState(\"\")\n  const [contestSidebarOpen, setContestSidebarOpen] = useState(true)\n\n  const contestId = Number.parseInt(params.id as string)\n  const contest = contestData[contestId as keyof typeof contestData]\n\n  useEffect(() => {\n    if (!contest) return\n\n    const updateTimer = () => {\n      const now = new Date().getTime()\n      const end = new Date(contest.endTime).getTime()\n      const difference = end - now\n\n      if (difference > 0) {\n        const hours = Math.floor(difference / (1000 * 60 * 60))\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60))\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000)\n        setTimeLeft(`${hours}h ${minutes}m ${seconds}s`)\n      } else {\n        setTimeLeft(\"Contest Ended\")\n      }\n    }\n\n    updateTimer()\n    const timer = setInterval(updateTimer, 1000)\n    return () => clearInterval(timer)\n  }, [contest])\n\n  if (!contest) {\n    return (\n      <ProtectedRoute requiredRole=\"student\">\n        <div className=\"min-h-screen bg-background flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold mb-4\">Contest Not Found</h1>\n            <Button onClick={() => router.push(\"/dashboard\")}>Back to Dashboard</Button>\n          </div>\n        </div>\n      </ProtectedRoute>\n    )\n  }\n\n  const handleSubmit = () => {\n    if (!selectedProblem || !code.trim()) {\n      toast({\n        title: \"Submission Error\",\n        description: \"Please select a problem and write some code.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    toast({\n      title: \"Code Submitted!\",\n      description: \"Your solution is being evaluated...\",\n    })\n\n    // Simulate submission processing\n    setTimeout(() => {\n      toast({\n        title: \"Submission Result\",\n        description: \"Your solution passed 8/10 test cases. Score: 80/100\",\n      })\n    }, 3000)\n  }\n\n  const handleViewResults = () => {\n    router.push(`/contest/${contestId}/results`)\n  }\n\n  const handleViewLeaderboard = () => {\n    router.push(`/contest/${contestId}/leaderboard`)\n  }\n\n  const handleViewProblem = (problemId: number, problemTitle: string) => {\n    router.push(`/problems/${problemId}/view`)\n    toast({\n      title: \"Opening problem\",\n      description: `Loading ${problemTitle}...`,\n    })\n  }\n\n  const handleSolveProblem = (problemId: number, problemTitle: string) => {\n    router.push(`/problems/${problemId}/solve`)\n    toast({\n      title: \"Starting solution\",\n      description: `Opening code editor for ${problemTitle}...`,\n    })\n  }\n\n  const handleBackToDashboard = () => {\n    router.push('/dashboard')\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"student\">\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6 md:ml-0\">\n            <div className=\"max-w-7xl mx-auto\">\n              {/* Contest Header */}\n              <div className=\"mb-8\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={handleBackToDashboard}>\n                      <ArrowLeft className=\"h-4 w-4\" />\n                    </Button>\n                    <div>\n                      <div className=\"flex items-center gap-3\">\n                        <h1 className=\"text-3xl font-bold text-balance\">{contest.title}</h1>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {contest.difficulty}\n                        </Badge>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {contest.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-muted-foreground mt-2 text-pretty\">{contest.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" onClick={handleViewResults}>\n                      <BarChart3 className=\"mr-2 h-4 w-4\" />\n                      Results\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleViewLeaderboard}>\n                      <Trophy className=\"mr-2 h-4 w-4\" />\n                      Leaderboard\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Contest Stats */}\n                <div className=\"grid gap-4 md:grid-cols-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">Time Left</span>\n                      </div>\n                      <p className=\"text-2xl font-bold text-primary\">{timeLeft}</p>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">Participants</span>\n                      </div>\n                      <p className=\"text-2xl font-bold\">{contest.participants}</p>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">Prize Pool</span>\n                      </div>\n                      <p className=\"text-2xl font-bold\">{contest.prize}</p>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Code className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">Problems</span>\n                      </div>\n                      <p className=\"text-2xl font-bold\">{contest.problems.length}</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n\n              <div className=\"grid gap-6 lg:grid-cols-3\">\n                {/* Problems List */}\n                <Card className=\"lg:col-span-1\">\n                  <CardHeader>\n                    <CardTitle>Problems</CardTitle>\n                    <CardDescription>Select a problem to solve</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {contest.problems.map((problem) => (\n                      <div\n                        key={problem.id}\n                        className=\"p-3 border rounded-lg hover:bg-accent/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium\">{problem.title}</h4>\n                          {problem.solved && (\n                            <Badge variant=\"outline\" className=\"text-green-500 border-green-500\">\n                              Solved\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-3\">{problem.description}</p>\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <Badge\n                            variant={\n                              problem.difficulty === \"Easy\"\n                                ? \"secondary\"\n                                : problem.difficulty === \"Medium\"\n                                  ? \"default\"\n                                  : \"destructive\"\n                            }\n                            className=\"text-xs\"\n                          >\n                            {problem.difficulty}\n                          </Badge>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Target className=\"h-3 w-3\" />\n                            <span>{problem.points} pts</span>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"flex-1\"\n                            onClick={() => handleViewProblem(problem.id, problem.title)}\n                          >\n                            <Eye className=\"h-3 w-3 mr-1\" />\n                            View\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            className=\"flex-1\"\n                            onClick={() => handleSolveProblem(problem.id, problem.title)}\n                          >\n                            <Code2 className=\"h-3 w-3 mr-1\" />\n                            Solve\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Code Editor */}\n                <Card className=\"lg:col-span-2\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle>\n                          {selectedProblem\n                            ? contest.problems.find((p) => p.id === selectedProblem)?.title\n                            : \"Select a Problem\"}\n                        </CardTitle>\n                        <CardDescription>\n                          {selectedProblem\n                            ? contest.problems.find((p) => p.id === selectedProblem)?.description\n                            : \"Choose a problem from the list to start coding\"}\n                        </CardDescription>\n                      </div>\n                      <Select value={language} onValueChange={setLanguage}>\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                          <SelectItem value=\"python\">Python</SelectItem>\n                          <SelectItem value=\"java\">Java</SelectItem>\n                          <SelectItem value=\"cpp\">C++</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Textarea\n                      placeholder={selectedProblem ? \"Write your solution here...\" : \"Select a problem to start coding\"}\n                      value={code}\n                      onChange={(e) => setCode(e.target.value)}\n                      className=\"min-h-96 font-mono\"\n                      disabled={!selectedProblem}\n                    />\n                    <div className=\"flex justify-between\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        Language: {language.charAt(0).toUpperCase() + language.slice(1)}\n                      </div>\n                      <Button onClick={handleSubmit} disabled={!selectedProblem || !code.trim()}>\n                        <Send className=\"mr-2 h-4 w-4\" />\n                        Submit Solution\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}\n","size_bytes":15516},"app/contests/[id]/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Users, Clock, Trophy, Timer, Code, CheckCircle, XCircle, AlertCircle, Eye, Code2 } from \"lucide-react\"\n\nconst mockContest = {\n  id: 1,\n  title: \"Weekly Challenge #42\",\n  description:\n    \"Test your algorithmic skills with dynamic programming and graph theory problems. This contest features carefully curated problems that will challenge your problem-solving abilities.\",\n  duration: \"3 hours\",\n  participants: 156,\n  maxParticipants: 500,\n  status: \"active\" as const,\n  startTime: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // Started 30m ago\n  endTime: new Date(Date.now() + 2 * 60 * 60 * 1000 + 30 * 60 * 1000).toISOString(), // 2h 30m left\n  difficulty: \"Medium\" as const,\n  prize: \"$500\",\n  problems: [\n    {\n      id: 1,\n      title: \"Dynamic Array Manipulation\",\n      difficulty: \"Easy\",\n      points: 100,\n      solved: 89,\n      attempted: 134,\n      status: \"solved\" as const,\n    },\n    {\n      id: 2,\n      title: \"Graph Traversal Optimization\",\n      difficulty: \"Medium\",\n      points: 200,\n      solved: 45,\n      attempted: 98,\n      status: \"attempted\" as const,\n    },\n    {\n      id: 3,\n      title: \"Advanced DP with Memoization\",\n      difficulty: \"Hard\",\n      points: 300,\n      solved: 12,\n      attempted: 67,\n      status: \"unsolved\" as const,\n    },\n  ],\n}\n\nconst mockLeaderboard = [\n  { rank: 1, username: \"alice_codes\", score: 600, solved: 3, lastSubmission: \"2m ago\" },\n  { rank: 2, username: \"bob_dev\", score: 500, solved: 2, lastSubmission: \"15m ago\" },\n  { rank: 3, username: \"charlie_algo\", score: 300, solved: 2, lastSubmission: \"23m ago\" },\n  { rank: 4, username: \"diana_prog\", score: 300, solved: 1, lastSubmission: \"45m ago\" },\n  { rank: 5, username: \"eve_coder\", score: 100, solved: 1, lastSubmission: \"1h ago\" },\n]\n\nexport default function ContestPage() {\n  const params = useParams()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [timeLeft, setTimeLeft] = useState<string>(\"\")\n  const [progress, setProgress] = useState<number>(0)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date().getTime()\n      const end = new Date(mockContest.endTime).getTime()\n      const start = new Date(mockContest.startTime).getTime()\n      const distance = end - now\n\n      if (distance > 0) {\n        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n        const seconds = Math.floor((distance % (1000 * 60)) / 1000)\n\n        setTimeLeft(`${hours}h ${minutes}m ${seconds}s`)\n\n        // Calculate progress\n        const totalDuration = end - start\n        const elapsed = now - start\n        setProgress((elapsed / totalDuration) * 100)\n      } else {\n        setTimeLeft(\"Contest Ended\")\n        setProgress(100)\n      }\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"solved\":\n        return <CheckCircle className=\"h-4 w-4 text-green-400\" />\n      case \"attempted\":\n        return <AlertCircle className=\"h-4 w-4 text-yellow-400\" />\n      default:\n        return <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n    }\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"secondary\"\n      case \"Medium\":\n        return \"default\"\n      case \"Hard\":\n        return \"destructive\"\n      default:\n        return \"secondary\"\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n      <div className=\"flex\">\n        <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            {/* Contest Header */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-balance\">{mockContest.title}</h1>\n                <p className=\"text-muted-foreground mt-2 text-pretty\">{mockContest.description}</p>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <Badge variant={getDifficultyColor(mockContest.difficulty)} className=\"text-sm\">\n                  {mockContest.difficulty}\n                </Badge>\n                <div className=\"flex items-center gap-1 text-primary\">\n                  <Trophy className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">{mockContest.prize}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Contest Stats */}\n            <div className=\"grid gap-4 md:grid-cols-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Participants</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">\n                    {mockContest.participants}\n                    <span className=\"text-sm text-muted-foreground font-normal\">/{mockContest.maxParticipants}</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Duration</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">{mockContest.duration}</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Timer className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Time Left</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1 font-mono text-primary\">{timeLeft}</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Code className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Problems</span>\n                  </div>\n                  <div className=\"text-2xl font-bold mt-1\">{mockContest.problems.length}</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Progress Bar */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\">Contest Progress</span>\n                  <span className=\"text-sm text-muted-foreground\">{Math.round(progress)}%</span>\n                </div>\n                <Progress value={progress} className=\"h-2\" />\n              </CardContent>\n            </Card>\n\n            {/* Main Content */}\n            <Tabs defaultValue=\"problems\" className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"problems\">Problems</TabsTrigger>\n                <TabsTrigger value=\"leaderboard\">Leaderboard</TabsTrigger>\n                <TabsTrigger value=\"submissions\">My Submissions</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"problems\" className=\"space-y-4\">\n                <div className=\"grid gap-4\">\n                  {mockContest.problems.map((problem) => (\n                    <Card key={problem.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-4\">\n                            {getStatusIcon(problem.status)}\n                            <div>\n                              <h3 className=\"font-semibold text-lg\">{problem.title}</h3>\n                              <div className=\"flex items-center gap-4 mt-1 text-sm text-muted-foreground\">\n                                <Badge variant={getDifficultyColor(problem.difficulty)} className=\"text-xs\">\n                                  {problem.difficulty}\n                                </Badge>\n                                <span>{problem.points} points</span>\n                                <span>\n                                  {problem.solved}/{problem.attempted} solved\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => router.push(`/contests/${params.id}/problems/${problem.id}/view`)}\n                            >\n                              <Eye className=\"h-3 w-3 mr-1\" />\n                              View\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => router.push(`/contests/${params.id}/problems/${problem.id}/solve`)}\n                            >\n                              <Code2 className=\"h-3 w-3 mr-1\" />\n                              {problem.status === \"solved\" ? \"Solve Again\" : \"Solve\"}\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"leaderboard\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Live Leaderboard</CardTitle>\n                    <CardDescription>Real-time rankings updated every 30 seconds</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-96\">\n                      <div className=\"space-y-2\">\n                        {mockLeaderboard.map((entry) => (\n                          <div\n                            key={entry.rank}\n                            className=\"flex items-center justify-between p-3 rounded-lg border border-border hover:bg-accent/50 transition-colors\"\n                          >\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground text-sm font-bold\">\n                                {entry.rank}\n                              </div>\n                              <div>\n                                <div className=\"font-medium\">{entry.username}</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {entry.solved} problems solved • Last: {entry.lastSubmission}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-lg font-bold text-primary\">{entry.score}</div>\n                              <div className=\"text-xs text-muted-foreground\">points</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"submissions\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>My Submissions</CardTitle>\n                    <CardDescription>Track your progress and submission history</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Code className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No submissions yet. Start solving problems to see your progress here!</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":13405},"app/problems/[id]/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { CodeEditor } from \"@/components/code-editor\"\nimport { TestResults } from \"@/components/test-results\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Play, Send } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nconst mockProblem = {\n  id: 1,\n  title: \"Two Sum\",\n  difficulty: \"Easy\",\n  category: \"Array\",\n  description: `Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.`,\n  examples: [\n    {\n      input: \"nums = [2,7,11,15], target = 9\",\n      output: \"[0,1]\",\n      explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\",\n    },\n    {\n      input: \"nums = [3,2,4], target = 6\",\n      output: \"[1,2]\",\n      explanation: \"Because nums[1] + nums[2] == 6, we return [1, 2].\",\n    },\n  ],\n  constraints: [\n    \"2 ≤ nums.length ≤ 10⁴\",\n    \"-10⁹ ≤ nums[i] ≤ 10⁹\",\n    \"-10⁹ ≤ target ≤ 10⁹\",\n    \"Only one valid answer exists.\",\n  ],\n  testCases: [\n    {\n      id: 1,\n      input: \"[2,7,11,15]\\n9\",\n      expectedOutput: \"[0,1]\",\n      status: \"passed\" as const,\n      actualOutput: \"[0,1]\",\n      executionTime: \"2ms\",\n      memory: \"42.1 MB\",\n    },\n    {\n      id: 2,\n      input: \"[3,2,4]\\n6\",\n      expectedOutput: \"[1,2]\",\n      status: \"passed\" as const,\n      actualOutput: \"[1,2]\",\n      executionTime: \"1ms\",\n      memory: \"41.8 MB\",\n    },\n    {\n      id: 3,\n      input: \"[3,3]\\n6\",\n      expectedOutput: \"[0,1]\",\n      status: \"failed\" as const,\n      actualOutput: \"[1,0]\",\n      executionTime: \"3ms\",\n      memory: \"42.3 MB\",\n    },\n  ],\n}\n\nconst defaultCode = {\n  python: `def twoSum(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    # Your solution here\n    pass`,\n  javascript: `/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    // Your solution here\n};`,\n  java: `class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your solution here\n        return new int[0];\n    }\n}`,\n  cpp: `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your solution here\n        return {};\n    }\n};`,\n}\n\nexport default function ProblemPage() {\n  const params = useParams()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [language, setLanguage] = useState(\"python\")\n  const [code, setCode] = useState(defaultCode.python)\n  const [isRunning, setIsRunning] = useState(false)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [testResults, setTestResults] = useState(mockProblem.testCases)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    setCode(defaultCode[language as keyof typeof defaultCode])\n  }, [language])\n\n  const handleRunCode = async () => {\n    setIsRunning(true)\n    try {\n      // Simulate code execution\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n\n      // Simulate test results\n      const results = mockProblem.testCases.map((testCase, index) => ({\n        ...testCase,\n        status: Math.random() > 0.3 ? \"passed\" : (\"failed\" as const),\n        actualOutput: testCase.expectedOutput,\n        executionTime: `${Math.floor(Math.random() * 5) + 1}ms`,\n        memory: `${(Math.random() * 10 + 40).toFixed(1)} MB`,\n      }))\n\n      setTestResults(results)\n      toast({\n        title: \"Code executed successfully\",\n        description: `${results.filter((r) => r.status === \"passed\").length}/${results.length} test cases passed`,\n      })\n    } catch (error) {\n      toast({\n        title: \"Execution failed\",\n        description: \"There was an error running your code.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsRunning(false)\n    }\n  }\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true)\n    try {\n      // Simulate submission\n      await new Promise((resolve) => setTimeout(resolve, 3000))\n\n      toast({\n        title: \"Solution submitted!\",\n        description: \"Your solution has been submitted for evaluation.\",\n      })\n    } catch (error) {\n      toast({\n        title: \"Submission failed\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"secondary\"\n      case \"Medium\":\n        return \"default\"\n      case \"Hard\":\n        return \"destructive\"\n      default:\n        return \"secondary\"\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n      <div className=\"flex\">\n        <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n        <main className=\"flex-1 flex flex-col lg:flex-row h-[calc(100vh-4rem)]\">\n          {/* Problem Description */}\n          <div className=\"w-full lg:w-1/2 border-r border-border\">\n            <ScrollArea className=\"h-full\">\n              <div className=\"p-6 space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <h1 className=\"text-2xl font-bold\">{mockProblem.title}</h1>\n                    <Badge variant={getDifficultyColor(mockProblem.difficulty)}>{mockProblem.difficulty}</Badge>\n                    <Badge variant=\"outline\">{mockProblem.category}</Badge>\n                  </div>\n                </div>\n\n                <div className=\"prose prose-sm max-w-none text-foreground\">\n                  <p className=\"text-pretty leading-relaxed\">{mockProblem.description}</p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">Examples</h3>\n                  {mockProblem.examples.map((example, index) => (\n                    <Card key={index}>\n                      <CardContent className=\"p-4 space-y-2\">\n                        <div>\n                          <strong>Input:</strong>\n                          <code className=\"ml-2 px-2 py-1 bg-muted rounded text-sm font-mono\">{example.input}</code>\n                        </div>\n                        <div>\n                          <strong>Output:</strong>\n                          <code className=\"ml-2 px-2 py-1 bg-muted rounded text-sm font-mono\">{example.output}</code>\n                        </div>\n                        <div>\n                          <strong>Explanation:</strong>\n                          <span className=\"ml-2 text-sm text-muted-foreground\">{example.explanation}</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-lg font-semibold\">Constraints</h3>\n                  <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                    {mockProblem.constraints.map((constraint, index) => (\n                      <li key={index} className=\"flex items-center gap-2\">\n                        <span className=\"w-1 h-1 bg-muted-foreground rounded-full\" />\n                        <code className=\"font-mono\">{constraint}</code>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </ScrollArea>\n          </div>\n\n          {/* Code Editor and Results */}\n          <div className=\"w-full lg:w-1/2 flex flex-col\">\n            <div className=\"border-b border-border p-4\">\n              <div className=\"flex items-center justify-between\">\n                <Select value={language} onValueChange={setLanguage}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"python\">Python</SelectItem>\n                    <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                    <SelectItem value=\"java\">Java</SelectItem>\n                    <SelectItem value=\"cpp\">C++</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <div className=\"flex items-center gap-2\">\n                  <Button variant=\"outline\" onClick={handleRunCode} disabled={isRunning}>\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    {isRunning ? \"Running...\" : \"Run\"}\n                  </Button>\n                  <Button onClick={handleSubmit} disabled={isSubmitting}>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    {isSubmitting ? \"Submitting...\" : \"Submit\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex-1 flex flex-col\">\n              <Tabs defaultValue=\"code\" className=\"flex-1 flex flex-col\">\n                <TabsList className=\"grid w-full grid-cols-2 mx-4 mt-4\">\n                  <TabsTrigger value=\"code\">Code</TabsTrigger>\n                  <TabsTrigger value=\"results\">Test Results</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"code\" className=\"flex-1 m-4 mt-2\">\n                  <CodeEditor language={language} value={code} onChange={setCode} className=\"h-full\" />\n                </TabsContent>\n\n                <TabsContent value=\"results\" className=\"flex-1 m-4 mt-2\">\n                  <TestResults testCases={testResults} />\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":10377},"app/student/analytics/page.tsx":{"content":"\"use client\"\n\nimport { useQuery } from \"@tanstack/react-query\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\"\nimport { Trophy, Target, Clock, Code, TrendingUp, Award } from \"lucide-react\"\n\nconst performanceData = [\n  { date: \"2024-01\", score: 65, problems: 12 },\n  { date: \"2024-02\", score: 72, problems: 18 },\n  { date: \"2024-03\", score: 78, problems: 24 },\n  { date: \"2024-04\", score: 85, problems: 32 },\n  { date: \"2024-05\", score: 88, problems: 38 },\n  { date: \"2024-06\", score: 92, problems: 45 },\n]\n\nconst languageData = [\n  { name: \"Python\", value: 45, color: \"#3776ab\" },\n  { name: \"JavaScript\", value: 25, color: \"#f7df1e\" },\n  { name: \"Java\", value: 20, color: \"#ed8b00\" },\n  { name: \"C++\", value: 10, color: \"#00599c\" },\n]\n\nconst difficultyData = [\n  { difficulty: \"Easy\", solved: 28, total: 35 },\n  { difficulty: \"Medium\", solved: 15, total: 25 },\n  { difficulty: \"Hard\", solved: 5, total: 15 },\n]\n\nexport default function StudentAnalyticsPage() {\n  const { data: studentStats, isLoading } = useQuery({\n    queryKey: [\"student-analytics\"],\n    queryFn: async () => {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n      return {\n        totalProblems: 48,\n        contestsParticipated: 12,\n        averageScore: 88,\n        currentRank: 15,\n        totalStudents: 150,\n        streak: 7,\n        achievements: [\n          { name: \"First Contest\", icon: \"🏆\", date: \"2024-01-15\" },\n          { name: \"Problem Solver\", icon: \"🧩\", date: \"2024-02-20\" },\n          { name: \"Speed Demon\", icon: \"⚡\", date: \"2024-03-10\" },\n          { name: \"Consistency King\", icon: \"👑\", date: \"2024-04-05\" },\n        ],\n      }\n    },\n  })\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto py-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold\">My Analytics</h1>\n        <p className=\"text-muted-foreground\">Track your coding progress and performance insights</p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Problems Solved</CardTitle>\n            <Code className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{studentStats?.totalProblems}</div>\n            <p className=\"text-xs text-muted-foreground\">+5 from last week</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Rank</CardTitle>\n            <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">#{studentStats?.currentRank}</div>\n            <p className=\"text-xs text-muted-foreground\">out of {studentStats?.totalStudents} students</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Score</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{studentStats?.averageScore}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +3% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Streak</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{studentStats?.streak} days</div>\n            <p className=\"text-xs text-muted-foreground\">Keep it up! 🔥</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        {/* Performance Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Performance Over Time</CardTitle>\n            <CardDescription>Your score progression over the last 6 months</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={performanceData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"score\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Language Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Language Usage</CardTitle>\n            <CardDescription>Distribution of programming languages used</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={languageData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                  label={({ name, value }) => `${name}: ${value}%`}\n                >\n                  {languageData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Problem Difficulty Progress */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Problem Difficulty Progress</CardTitle>\n            <CardDescription>Your progress across different difficulty levels</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {difficultyData.map((item) => (\n              <div key={item.difficulty} className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"font-medium\">{item.difficulty}</span>\n                  <span className=\"text-muted-foreground\">\n                    {item.solved}/{item.total}\n                  </span>\n                </div>\n                <Progress value={(item.solved / item.total) * 100} className=\"h-2\" />\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Achievements */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Achievements</CardTitle>\n            <CardDescription>Your latest accomplishments</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {studentStats?.achievements.map((achievement, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                  <div className=\"text-2xl\">{achievement.icon}</div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium\">{achievement.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Earned on {new Date(achievement.date).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <Badge variant=\"secondary\">\n                    <Award className=\"h-3 w-3 mr-1\" />\n                    New\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":8856},"app/teacher/contests/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/teacher/contests/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { TeacherHeader } from \"@/components/teacher-header\"\nimport { TeacherSidebar } from \"@/components/teacher-sidebar\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Plus, Search, Eye, Edit, Trash2, Users, Clock, BarChart3 } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\n\nconst mockContests = [\n  {\n    id: 1,\n    title: \"Data Structures Quiz\",\n    status: \"active\",\n    participants: 45,\n    totalStudents: 60,\n    endTime: \"2h 15m\",\n    submissions: 38,\n    avgScore: 78,\n    createdAt: \"2024-03-15\",\n    duration: \"3 hours\",\n  },\n  {\n    id: 2,\n    title: \"Algorithm Challenge\",\n    status: \"upcoming\",\n    participants: 0,\n    totalStudents: 60,\n    startTime: \"Tomorrow 2:00 PM\",\n    submissions: 0,\n    avgScore: 0,\n    createdAt: \"2024-03-14\",\n    duration: \"2 hours\",\n  },\n  {\n    id: 3,\n    title: \"Final Exam Practice\",\n    status: \"ended\",\n    participants: 58,\n    totalStudents: 60,\n    submissions: 58,\n    avgScore: 85,\n    createdAt: \"2024-03-10\",\n    duration: \"4 hours\",\n  },\n  {\n    id: 4,\n    title: \"Midterm Review\",\n    status: \"draft\",\n    participants: 0,\n    totalStudents: 0,\n    submissions: 0,\n    avgScore: 0,\n    createdAt: \"2024-03-12\",\n    duration: \"2.5 hours\",\n  },\n]\n\nexport default function TeacherContestsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const router = useRouter()\n\n  const handleCreateContest = () => {\n    router.push(\"/teacher/contests/create\")\n  }\n\n  const handleViewContest = (contestId: number) => {\n    router.push(`/teacher/contests/${contestId}`)\n  }\n\n  const handleEditContest = (contestId: number) => {\n    router.push(`/teacher/contests/${contestId}/edit`)\n  }\n\n  const filteredContests = mockContests.filter((contest) =>\n    contest.title.toLowerCase().includes(searchQuery.toLowerCase()),\n  )\n\n  const activeContests = filteredContests.filter((c) => c.status === \"active\")\n  const upcomingContests = filteredContests.filter((c) => c.status === \"upcoming\")\n  const endedContests = filteredContests.filter((c) => c.status === \"ended\")\n  const draftContests = filteredContests.filter((c) => c.status === \"draft\")\n\n  const ContestCard = ({ contest }: { contest: (typeof mockContests)[0] }) => (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              {contest.title}\n              <Badge\n                variant={\n                  contest.status === \"active\"\n                    ? \"default\"\n                    : contest.status === \"upcoming\"\n                      ? \"secondary\"\n                      : contest.status === \"ended\"\n                        ? \"outline\"\n                        : \"destructive\"\n                }\n              >\n                {contest.status}\n              </Badge>\n            </CardTitle>\n            <CardDescription>\n              Created on {new Date(contest.createdAt).toLocaleDateString()} • Duration: {contest.duration}\n            </CardDescription>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewContest(contest.id)}>\n              <Eye className=\"mr-2 h-4 w-4\" />\n              View\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEditContest(contest.id)}>\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Edit\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n            <div>\n              <p className=\"text-sm font-medium\">\n                {contest.participants}/{contest.totalStudents}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">Participants</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n            <div>\n              <p className=\"text-sm font-medium\">{contest.submissions}</p>\n              <p className=\"text-xs text-muted-foreground\">Submissions</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n            <div>\n              <p className=\"text-sm font-medium\">{contest.avgScore}%</p>\n              <p className=\"text-xs text-muted-foreground\">Avg Score</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            <div>\n              <p className=\"text-sm font-medium\">\n                {contest.status === \"active\"\n                  ? contest.endTime\n                  : contest.status === \"upcoming\"\n                    ? contest.startTime\n                    : contest.status === \"ended\"\n                      ? \"Completed\"\n                      : \"Draft\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">Status</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n\n  return (\n    <ProtectedRoute requiredRole=\"teacher\">\n      <div className=\"min-h-screen bg-background\">\n        <TeacherHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <TeacherSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6 md:ml-0\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"flex items-center justify-between mb-8\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-balance\">Contest Management</h1>\n                  <p className=\"text-muted-foreground mt-2 text-pretty\">\n                    Create, manage, and monitor your coding contests.\n                  </p>\n                </div>\n                <Button onClick={handleCreateContest}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Contest\n                </Button>\n              </div>\n\n              {/* Search */}\n              <div className=\"mb-6\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search contests...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <Tabs defaultValue=\"all\" className=\"space-y-6\">\n                <TabsList>\n                  <TabsTrigger value=\"all\">All ({filteredContests.length})</TabsTrigger>\n                  <TabsTrigger value=\"active\">Active ({activeContests.length})</TabsTrigger>\n                  <TabsTrigger value=\"upcoming\">Upcoming ({upcomingContests.length})</TabsTrigger>\n                  <TabsTrigger value=\"ended\">Ended ({endedContests.length})</TabsTrigger>\n                  <TabsTrigger value=\"drafts\">Drafts ({draftContests.length})</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"all\" className=\"space-y-4\">\n                  {filteredContests.map((contest) => (\n                    <ContestCard key={contest.id} contest={contest} />\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"active\" className=\"space-y-4\">\n                  {activeContests.map((contest) => (\n                    <ContestCard key={contest.id} contest={contest} />\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"upcoming\" className=\"space-y-4\">\n                  {upcomingContests.map((contest) => (\n                    <ContestCard key={contest.id} contest={contest} />\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"ended\" className=\"space-y-4\">\n                  {endedContests.map((contest) => (\n                    <ContestCard key={contest.id} contest={contest} />\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"drafts\" className=\"space-y-4\">\n                  {draftContests.map((contest) => (\n                    <ContestCard key={contest.id} contest={contest} />\n                  ))}\n                </TabsContent>\n              </Tabs>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}\n","size_bytes":9197},"app/teacher/dashboard/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { TeacherHeader } from \"@/components/teacher-header\"\nimport { TeacherSidebar } from \"@/components/teacher-sidebar\"\nimport { Users, Trophy, Plus, Eye, Edit, BarChart3, AlertTriangle, CheckCircle, Clock } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\n\nconst mockContests = [\n  {\n    id: 1,\n    title: \"Data Structures Quiz\",\n    status: \"active\",\n    participants: 45,\n    totalStudents: 60,\n    endTime: \"2h 15m\",\n    submissions: 38,\n    avgScore: 78,\n  },\n  {\n    id: 2,\n    title: \"Algorithm Challenge\",\n    status: \"upcoming\",\n    participants: 0,\n    totalStudents: 60,\n    startTime: \"Tomorrow 2:00 PM\",\n    submissions: 0,\n    avgScore: 0,\n  },\n  {\n    id: 3,\n    title: \"Final Exam Practice\",\n    status: \"ended\",\n    participants: 58,\n    totalStudents: 60,\n    submissions: 58,\n    avgScore: 85,\n  },\n]\n\nconst mockStudents = [\n  { id: 1, name: \"Alice Johnson\", score: 95, rank: 1, submissions: 12, lastActive: \"2 hours ago\" },\n  { id: 2, name: \"Bob Smith\", score: 87, rank: 2, submissions: 10, lastActive: \"1 day ago\" },\n  { id: 3, name: \"Carol Davis\", score: 82, rank: 3, submissions: 8, lastActive: \"3 hours ago\" },\n  { id: 4, name: \"David Wilson\", score: 76, rank: 4, submissions: 6, lastActive: \"5 hours ago\" },\n  { id: 5, name: \"Eva Brown\", score: 71, rank: 5, submissions: 9, lastActive: \"1 hour ago\" },\n]\n\nconst plagiarismAlerts = [\n  { id: 1, student1: \"John Doe\", student2: \"Jane Smith\", similarity: 89, contest: \"Weekly Challenge #42\" },\n  { id: 2, student1: \"Mike Johnson\", student2: \"Sarah Wilson\", similarity: 76, contest: \"Algorithm Sprint\" },\n]\n\nexport default function TeacherDashboard() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const router = useRouter()\n\n  const handleCreateContest = () => {\n    router.push(\"/teacher/contests/create\")\n  }\n\n  const handleViewContest = (contestId: number) => {\n    router.push(`/teacher/contests/${contestId}`)\n  }\n\n  const handleViewStudent = (studentId: number) => {\n    router.push(`/teacher/students/${studentId}`)\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"teacher\">\n      <div className=\"min-h-screen bg-background\">\n        <TeacherHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <TeacherSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6 md:ml-0\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"flex items-center justify-between mb-8\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-balance\">Teacher Dashboard</h1>\n                  <p className=\"text-muted-foreground mt-2 text-pretty\">\n                    Manage contests, monitor student progress, and analyze performance.\n                  </p>\n                </div>\n                <Button onClick={handleCreateContest}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Contest\n                </Button>\n              </div>\n\n              {/* Overview Stats */}\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">127</div>\n                    <p className=\"text-xs text-muted-foreground\">+5 new this month</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Active Contests</CardTitle>\n                    <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">3</div>\n                    <p className=\"text-xs text-muted-foreground\">2 ending today</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Avg Performance</CardTitle>\n                    <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">82%</div>\n                    <p className=\"text-xs text-muted-foreground\">+3% from last week</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Plagiarism Alerts</CardTitle>\n                    <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-destructive\">2</div>\n                    <p className=\"text-xs text-muted-foreground\">Requires attention</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Tabs defaultValue=\"contests\" className=\"space-y-6\">\n                <TabsList>\n                  <TabsTrigger value=\"contests\">Contests</TabsTrigger>\n                  <TabsTrigger value=\"students\">Students</TabsTrigger>\n                  <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n                  <TabsTrigger value=\"plagiarism\">Plagiarism</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"contests\" className=\"space-y-6\">\n                  <div className=\"grid gap-6\">\n                    {mockContests.map((contest) => (\n                      <Card key={contest.id}>\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <CardTitle className=\"flex items-center gap-2\">\n                                {contest.title}\n                                <Badge\n                                  variant={\n                                    contest.status === \"active\"\n                                      ? \"default\"\n                                      : contest.status === \"upcoming\"\n                                        ? \"secondary\"\n                                        : \"outline\"\n                                  }\n                                >\n                                  {contest.status}\n                                </Badge>\n                              </CardTitle>\n                              <CardDescription>\n                                {contest.status === \"active\" && `Ends in ${contest.endTime}`}\n                                {contest.status === \"upcoming\" && `Starts ${contest.startTime}`}\n                                {contest.status === \"ended\" && \"Contest completed\"}\n                              </CardDescription>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewContest(contest.id)}>\n                                <Eye className=\"mr-2 h-4 w-4\" />\n                                View\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </Button>\n                            </div>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"grid gap-4 md:grid-cols-4\">\n                            <div className=\"space-y-2\">\n                              <p className=\"text-sm text-muted-foreground\">Participation</p>\n                              <div className=\"flex items-center gap-2\">\n                                <Progress\n                                  value={(contest.participants / contest.totalStudents) * 100}\n                                  className=\"flex-1\"\n                                />\n                                <span className=\"text-sm font-medium\">\n                                  {contest.participants}/{contest.totalStudents}\n                                </span>\n                              </div>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Submissions</p>\n                              <p className=\"text-2xl font-bold\">{contest.submissions}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Avg Score</p>\n                              <p className=\"text-2xl font-bold\">{contest.avgScore}%</p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Status</p>\n                              <div className=\"flex items-center gap-1\">\n                                {contest.status === \"active\" && <Clock className=\"h-4 w-4 text-primary\" />}\n                                {contest.status === \"ended\" && <CheckCircle className=\"h-4 w-4 text-green-500\" />}\n                                <span className=\"text-sm capitalize\">{contest.status}</span>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"students\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Student Performance</CardTitle>\n                      <CardDescription>Top performing students in your classes</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {mockStudents.map((student) => (\n                          <div\n                            key={student.id}\n                            className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors\"\n                          >\n                            <div className=\"flex items-center gap-4\">\n                              <Badge\n                                variant=\"outline\"\n                                className=\"w-8 h-8 rounded-full flex items-center justify-center\"\n                              >\n                                #{student.rank}\n                              </Badge>\n                              <div>\n                                <p className=\"font-medium\">{student.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {student.submissions} submissions • Last active {student.lastActive}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"text-right\">\n                                <p className=\"font-bold text-lg\">{student.score}%</p>\n                                <p className=\"text-sm text-muted-foreground\">Average Score</p>\n                              </div>\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewStudent(student.id)}>\n                                <Eye className=\"mr-2 h-4 w-4\" />\n                                View Profile\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"analytics\" className=\"space-y-6\">\n                  <div className=\"grid gap-6 md:grid-cols-2\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Performance Trends</CardTitle>\n                        <CardDescription>Class performance over time</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                          <BarChart3 className=\"h-16 w-16 mb-4\" />\n                          <p>Performance chart would be displayed here</p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Problem Difficulty Analysis</CardTitle>\n                        <CardDescription>Success rates by difficulty level</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Easy Problems</span>\n                            <span>92% success rate</span>\n                          </div>\n                          <Progress value={92} className=\"h-2\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Medium Problems</span>\n                            <span>67% success rate</span>\n                          </div>\n                          <Progress value={67} className=\"h-2\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Hard Problems</span>\n                            <span>34% success rate</span>\n                          </div>\n                          <Progress value={34} className=\"h-2\" />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"plagiarism\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n                        Plagiarism Alerts\n                      </CardTitle>\n                      <CardDescription>Suspicious similarities detected in student submissions</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {plagiarismAlerts.map((alert) => (\n                          <div key={alert.id} className=\"border border-destructive/20 rounded-lg p-4 bg-destructive/5\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <p className=\"font-medium text-destructive\">{alert.similarity}% similarity detected</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  Between {alert.student1} and {alert.student2} in {alert.contest}\n                                </p>\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button variant=\"outline\" size=\"sm\">\n                                  Review Code\n                                </Button>\n                                <Button variant=\"destructive\" size=\"sm\">\n                                  Flag Submission\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}\n","size_bytes":17052},"app/teacher/plagiarism/page.tsx":{"content":"\"use client\"\n\nimport { Suspense } from \"react\"\nimport { TeacherPlagiarismDashboard } from \"@/components/teacher-plagiarism-dashboard\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Loader2 } from \"lucide-react\"\n\nfunction PlagiarismDashboardSkeleton() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default function TeacherPlagiarismPage() {\n  // In a real app, this would come from route params or context\n  const contestId = \"123\"\n\n  return (\n    <div className=\"container mx-auto py-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold\">Plagiarism Detection</h1>\n        <p className=\"text-muted-foreground\">Monitor and analyze code submissions for potential plagiarism</p>\n      </div>\n\n      <Suspense fallback={<PlagiarismDashboardSkeleton />}>\n        <TeacherPlagiarismDashboard contestId={contestId} />\n      </Suspense>\n    </div>\n  )\n}\n","size_bytes":1582},"app/teacher/students/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/teacher/students/page.tsx":{"content":"\"use client\"\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Users, Search, Filter, UserPlus, TrendingUp, Award, Clock } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function TeacherStudentsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  const students = [\n    {\n      id: 1,\n      name: \"Alice Johnson\",\n      email: \"alice@school.edu\",\n      class: \"CS101\",\n      contests: 12,\n      avgScore: 285,\n      lastActive: \"2 hours ago\",\n      status: \"active\",\n    },\n    {\n      id: 2,\n      name: \"Bob Smith\",\n      email: \"bob@school.edu\",\n      class: \"CS101\",\n      contests: 8,\n      avgScore: 245,\n      lastActive: \"1 day ago\",\n      status: \"active\",\n    },\n    {\n      id: 3,\n      name: \"Carol Davis\",\n      email: \"carol@school.edu\",\n      class: \"CS102\",\n      contests: 15,\n      avgScore: 320,\n      lastActive: \"30 minutes ago\",\n      status: \"active\",\n    },\n    {\n      id: 4,\n      name: \"David Wilson\",\n      email: \"david@school.edu\",\n      class: \"CS101\",\n      contests: 5,\n      avgScore: 180,\n      lastActive: \"3 days ago\",\n      status: \"inactive\",\n    },\n    {\n      id: 5,\n      name: \"Eve Brown\",\n      email: \"eve@school.edu\",\n      class: \"CS102\",\n      contests: 10,\n      avgScore: 265,\n      lastActive: \"1 hour ago\",\n      status: \"active\",\n    },\n  ]\n\n  const filteredStudents = students.filter(\n    (student) =>\n      student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.class.toLowerCase().includes(searchTerm.toLowerCase()),\n  )\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">Student Management</h1>\n              <p className=\"text-muted-foreground\">Monitor and manage your students' progress</p>\n            </div>\n            <Button>\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Add Student\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Students</p>\n                  <p className=\"text-2xl font-bold\">{students.length}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Students</p>\n                  <p className=\"text-2xl font-bold\">{students.filter((s) => s.status === \"active\").length}</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Score</p>\n                  <p className=\"text-2xl font-bold\">\n                    {Math.round(students.reduce((acc, s) => acc + s.avgScore, 0) / students.length)}\n                  </p>\n                </div>\n                <Award className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Contests</p>\n                  <p className=\"text-2xl font-bold\">{students.reduce((acc, s) => acc + s.contests, 0)}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"all\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <TabsList>\n              <TabsTrigger value=\"all\">All Students</TabsTrigger>\n              <TabsTrigger value=\"active\">Active</TabsTrigger>\n              <TabsTrigger value=\"inactive\">Inactive</TabsTrigger>\n            </TabsList>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search students...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </div>\n\n          <TabsContent value=\"all\">\n            <Card>\n              <CardHeader>\n                <CardTitle>All Students</CardTitle>\n                <CardDescription>Complete list of enrolled students</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Contests Participated</TableHead>\n                      <TableHead>Average Score</TableHead>\n                      <TableHead>Last Active</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredStudents.map((student) => (\n                      <TableRow key={student.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{student.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{student.class}</Badge>\n                        </TableCell>\n                        <TableCell>{student.contests}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">{student.avgScore} pts</Badge>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">{student.lastActive}</TableCell>\n                        <TableCell>\n                          <Badge variant={student.status === \"active\" ? \"default\" : \"secondary\"}>\n                            {student.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Link href={`/teacher/students/${student.id}`}>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              View Details\n                            </Button>\n                          </Link>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"active\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Active Students</CardTitle>\n                <CardDescription>Students who have been active recently</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Contests Participated</TableHead>\n                      <TableHead>Average Score</TableHead>\n                      <TableHead>Last Active</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredStudents\n                      .filter((s) => s.status === \"active\")\n                      .map((student) => (\n                        <TableRow key={student.id}>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{student.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{student.class}</Badge>\n                          </TableCell>\n                          <TableCell>{student.contests}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"secondary\">{student.avgScore} pts</Badge>\n                          </TableCell>\n                          <TableCell className=\"text-muted-foreground\">{student.lastActive}</TableCell>\n                          <TableCell>\n                            <Link href={`/teacher/students/${student.id}`}>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                View Details\n                              </Button>\n                            </Link>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"inactive\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Inactive Students</CardTitle>\n                <CardDescription>Students who haven't been active recently</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Contests Participated</TableHead>\n                      <TableHead>Average Score</TableHead>\n                      <TableHead>Last Active</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredStudents\n                      .filter((s) => s.status === \"inactive\")\n                      .map((student) => (\n                        <TableRow key={student.id}>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{student.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{student.class}</Badge>\n                          </TableCell>\n                          <TableCell>{student.contests}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"secondary\">{student.avgScore} pts</Badge>\n                          </TableCell>\n                          <TableCell className=\"text-muted-foreground\">{student.lastActive}</TableCell>\n                          <TableCell>\n                            <Link href={`/teacher/students/${student.id}`}>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                View Details\n                              </Button>\n                            </Link>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","size_bytes":12941},"app/api/contests/join/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { contestId, userId } = body\n\n    if (!contestId || !userId) {\n      return NextResponse.json({ success: false, error: \"Contest ID and User ID are required\" }, { status: 400 })\n    }\n\n    // Simulate API delay and processing\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n\n    // Simulate random success/failure for demo\n    const success = Math.random() > 0.1 // 90% success rate\n\n    if (!success) {\n      return NextResponse.json({ success: false, error: \"Contest is full or registration closed\" }, { status: 400 })\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: \"Successfully joined the contest\",\n      data: {\n        contestId,\n        userId,\n        joinedAt: new Date().toISOString(),\n      },\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Failed to join contest\" }, { status: 500 })\n  }\n}\n","size_bytes":1024},"app/api/plagiarism/check/route.ts":{"content":"import { type NextRequest, NextResponse } from \"next/server\"\n\n// Mock data for demonstration\nconst mockPlagiarismData = {\n  summary: {\n    totalSubmissions: 45,\n    flaggedPairs: 8,\n    averageSimilarity: 23.5,\n    scanDate: new Date().toISOString(),\n  },\n  pairs: [\n    {\n      id: \"1\",\n      studentA: \"Alice Johnson\",\n      studentB: \"Bob Smith\",\n      similarity: 85.2,\n      submissionAId: \"sub_001\",\n      submissionBId: \"sub_002\",\n      codeSnippetA: `def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\n# Calculate first 10 numbers\nfor i in range(10):\n    print(f\"F({i}) = {fibonacci(i)}\")`,\n      codeSnippetB: `def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\n# Print first 10 fibonacci numbers\nfor i in range(10):\n    print(f\"F({i}) = {fibonacci(i)}\")`,\n      matchingLines: [1, 2, 3, 4, 6, 7],\n    },\n    {\n      id: \"2\",\n      studentA: \"Carol Davis\",\n      studentB: \"David Wilson\",\n      similarity: 72.8,\n      submissionAId: \"sub_003\",\n      submissionBId: \"sub_004\",\n      codeSnippetA: `function quickSort(arr) {\n    if (arr.length <= 1) return arr;\n    const pivot = arr[Math.floor(arr.length / 2)];\n    const left = arr.filter(x => x < pivot);\n    const right = arr.filter(x => x > pivot);\n    return [...quickSort(left), pivot, ...quickSort(right)];\n}`,\n      codeSnippetB: `function quickSort(array) {\n    if (array.length <= 1) return array;\n    const pivot = array[Math.floor(array.length / 2)];\n    const left = array.filter(x => x < pivot);\n    const right = array.filter(x => x > pivot);\n    return [...quickSort(left), pivot, ...quickSort(right)];\n}`,\n      matchingLines: [1, 2, 3, 4, 5],\n    },\n    {\n      id: \"3\",\n      studentA: \"Eve Brown\",\n      studentB: \"Frank Miller\",\n      similarity: 45.6,\n      submissionAId: \"sub_005\",\n      submissionBId: \"sub_006\",\n      codeSnippetA: `class BinaryTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    \n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BinaryTree(value)\n            else:\n                self.left.insert(value)`,\n      codeSnippetB: `class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n    \n    def add(self, val):\n        if val < self.val:\n            if self.left is None:\n                self.left = TreeNode(val)\n            else:\n                self.left.add(val)`,\n      matchingLines: [3, 4, 7, 8, 10],\n    },\n    {\n      id: \"4\",\n      studentA: \"Grace Lee\",\n      studentB: \"Henry Taylor\",\n      similarity: 25.3,\n      submissionAId: \"sub_007\",\n      submissionBId: \"sub_008\",\n      codeSnippetA: `def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0`,\n      codeSnippetB: `def mergeSort(array):\n    if len(array) <= 1:\n        return array\n    \n    middle = len(array) // 2\n    leftHalf = mergeSort(array[:middle])\n    rightHalf = mergeSort(array[middle:])\n    \n    return mergeArrays(leftHalf, rightHalf)\n\ndef mergeArrays(left, right):\n    merged = []\n    i = j = 0`,\n      matchingLines: [2, 3, 5, 9, 13],\n    },\n  ],\n}\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url)\n  const contestId = searchParams.get(\"contestId\")\n\n  if (!contestId) {\n    return NextResponse.json({ error: \"Contest ID is required\" }, { status: 400 })\n  }\n\n  // Simulate API delay\n  await new Promise((resolve) => setTimeout(resolve, 500))\n\n  return NextResponse.json(mockPlagiarismData)\n}\n\nexport async function POST(request: NextRequest) {\n  const { searchParams } = new URL(request.url)\n  const contestId = searchParams.get(\"contestId\")\n\n  if (!contestId) {\n    return NextResponse.json({ error: \"Contest ID is required\" }, { status: 400 })\n  }\n\n  // Simulate scanning process\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  // Return updated data with new scan timestamp\n  const updatedData = {\n    ...mockPlagiarismData,\n    summary: {\n      ...mockPlagiarismData.summary,\n      scanDate: new Date().toISOString(),\n    },\n  }\n\n  return NextResponse.json(updatedData)\n}\n","size_bytes":4410},"app/api/plagiarism/compare/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { submissionIdA, submissionIdB } = body\n\n    if (!submissionIdA || !submissionIdB) {\n      return NextResponse.json({ success: false, error: \"Both submission IDs are required\" }, { status: 400 })\n    }\n\n    // Simulate API delay\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n\n    // Mock detailed comparison data\n    const comparison = {\n      submissionA: {\n        id: submissionIdA,\n        username: \"alice_codes\",\n        fullName: \"Alice Johnson\",\n        submissionTime: \"2024-03-01T14:30:00Z\",\n        language: \"python\",\n        code: `def twoSum(nums, target):\n    hash_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hash_map:\n            return [hash_map[complement], i]\n        hash_map[num] = i\n    return []`,\n      },\n      submissionB: {\n        id: submissionIdB,\n        username: \"bob_dev\",\n        fullName: \"Bob Smith\",\n        submissionTime: \"2024-03-01T14:45:00Z\",\n        language: \"python\",\n        code: `def twoSum(nums, target):\n    hash_table = {}\n    for index, number in enumerate(nums):\n        diff = target - number\n        if diff in hash_table:\n            return [hash_table[diff], index]\n        hash_table[number] = index\n    return []`,\n      },\n      similarity: 87,\n      matchedLines: [1, 2, 3, 4, 5, 6, 7, 8],\n      analysis: {\n        structuralSimilarity: 92,\n        variableNameSimilarity: 65,\n        logicSimilarity: 95,\n        commentSimilarity: 0,\n      },\n      problemTitle: \"Two Sum\",\n      contestTitle: \"Weekly Challenge #42\",\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: comparison,\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Failed to compare submissions\" }, { status: 500 })\n  }\n}\n","size_bytes":1927},"app/api/plagiarism/scan/route.ts":{"content":"import { NextResponse } from \"next/server\"\n\n// Mock plagiarism detection algorithm\nfunction calculateSimilarity(codeA: string, codeB: string) {\n  // Simple similarity calculation based on common lines\n  const linesA = codeA.split(\"\\n\").filter((line) => line.trim())\n  const linesB = codeB.split(\"\\n\").filter((line) => line.trim())\n\n  let commonLines = 0\n  const matchedLines: number[] = []\n\n  linesA.forEach((lineA, indexA) => {\n    linesB.forEach((lineB, indexB) => {\n      // Simple string similarity check\n      if (lineA.trim() === lineB.trim() && lineA.trim().length > 5) {\n        commonLines++\n        matchedLines.push(indexA + 1)\n      }\n    })\n  })\n\n  const similarity = Math.min(100, (commonLines / Math.max(linesA.length, linesB.length)) * 100)\n\n  return {\n    similarity: Math.round(similarity),\n    matchedLines,\n    analysis: {\n      structuralSimilarity: Math.round(similarity * 0.9 + Math.random() * 10),\n      variableNameSimilarity: Math.round(similarity * 0.7 + Math.random() * 20),\n      logicSimilarity: Math.round(similarity * 0.8 + Math.random() * 15),\n      commentSimilarity: Math.round(similarity * 0.5 + Math.random() * 30),\n    },\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { contestId, problemId, threshold = 60 } = body\n\n    // Simulate plagiarism scanning delay\n    await new Promise((resolve) => setTimeout(resolve, 3000))\n\n    // Mock submission data for comparison\n    const mockSubmissions = [\n      {\n        id: \"sub_001\",\n        userId: \"user_1\",\n        username: \"alice_codes\",\n        fullName: \"Alice Johnson\",\n        submissionTime: \"2024-03-01T14:30:00Z\",\n        language: \"python\",\n        code: `def twoSum(nums, target):\n    hash_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hash_map:\n            return [hash_map[complement], i]\n        hash_map[num] = i\n    return []`,\n      },\n      {\n        id: \"sub_002\",\n        userId: \"user_2\",\n        username: \"bob_dev\",\n        fullName: \"Bob Smith\",\n        submissionTime: \"2024-03-01T14:45:00Z\",\n        language: \"python\",\n        code: `def twoSum(nums, target):\n    hash_table = {}\n    for index, number in enumerate(nums):\n        diff = target - number\n        if diff in hash_table:\n            return [hash_table[diff], index]\n        hash_table[number] = index\n    return []`,\n      },\n      {\n        id: \"sub_003\",\n        userId: \"user_3\",\n        username: \"charlie_algo\",\n        fullName: \"Charlie Brown\",\n        submissionTime: \"2024-03-01T15:00:00Z\",\n        language: \"python\",\n        code: `def twoSum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []`,\n      },\n    ]\n\n    // Compare all pairs of submissions\n    const results = []\n\n    for (let i = 0; i < mockSubmissions.length; i++) {\n      for (let j = i + 1; j < mockSubmissions.length; j++) {\n        const submissionA = mockSubmissions[i]\n        const submissionB = mockSubmissions[j]\n\n        const comparison = calculateSimilarity(submissionA.code, submissionB.code)\n\n        if (comparison.similarity >= threshold) {\n          results.push({\n            id: `comparison_${submissionA.id}_${submissionB.id}`,\n            submissionA,\n            submissionB,\n            similarity: comparison.similarity,\n            matchedLines: comparison.matchedLines,\n            analysis: comparison.analysis,\n            status: comparison.similarity >= 80 ? \"high_risk\" : \"medium_risk\",\n            detectedAt: new Date().toISOString(),\n          })\n        }\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        scanId: `scan_${Date.now()}`,\n        contestId,\n        problemId,\n        threshold,\n        totalSubmissions: mockSubmissions.length,\n        comparisons: (mockSubmissions.length * (mockSubmissions.length - 1)) / 2,\n        flaggedPairs: results.length,\n        results,\n        scanCompletedAt: new Date().toISOString(),\n      },\n      message: `Plagiarism scan completed. Found ${results.length} potential matches.`,\n    })\n  } catch (error) {\n    return NextResponse.json({ success: false, error: \"Plagiarism scan failed\" }, { status: 500 })\n  }\n}\n","size_bytes":4328},"app/contest/[id]/leaderboard/page.tsx":{"content":"\"use client\"\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Trophy, Medal, Award, RefreshCw, Clock, User } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function ContestLeaderboardPage({ params }: { params: { id: string } }) {\n  const [isLive, setIsLive] = useState(true)\n  const [lastUpdated, setLastUpdated] = useState(new Date())\n\n  const [leaderboard, setLeaderboard] = useState([\n    { rank: 1, name: \"Alice Johnson\", score: 280, solved: 2, lastSubmission: \"5m ago\", status: \"active\" },\n    { rank: 2, name: \"Bob Smith\", score: 250, solved: 2, lastSubmission: \"12m ago\", status: \"active\" },\n    { rank: 3, name: \"Carol Davis\", score: 200, solved: 1, lastSubmission: \"8m ago\", status: \"active\" },\n    { rank: 4, name: \"David Wilson\", score: 180, solved: 1, lastSubmission: \"15m ago\", status: \"idle\" },\n    { rank: 5, name: \"Eve Brown\", score: 150, solved: 1, lastSubmission: \"20m ago\", status: \"idle\" },\n    { rank: 6, name: \"Frank Miller\", score: 120, solved: 1, lastSubmission: \"25m ago\", status: \"idle\" },\n    { rank: 7, name: \"Grace Lee\", score: 100, solved: 1, lastSubmission: \"30m ago\", status: \"active\" },\n    { rank: 8, name: \"Henry Chen\", score: 80, solved: 0, lastSubmission: \"35m ago\", status: \"idle\" },\n  ])\n\n  useEffect(() => {\n    if (isLive) {\n      const interval = setInterval(() => {\n        setLastUpdated(new Date())\n        // Simulate minor score changes\n        setLeaderboard((prev) =>\n          prev\n            .map((participant) => ({\n              ...participant,\n              score: participant.score + Math.floor(Math.random() * 10) - 5,\n            }))\n            .sort((a, b) => b.score - a.score)\n            .map((participant, index) => ({\n              ...participant,\n              rank: index + 1,\n            })),\n        )\n      }, 30000) // Update every 30 seconds\n      return () => clearInterval(interval)\n    }\n  }, [isLive])\n\n  const refreshLeaderboard = () => {\n    setLastUpdated(new Date())\n    // Simulate refresh\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">Live Leaderboard</h1>\n              <p className=\"text-muted-foreground\">Weekly Programming Challenge #1</p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant={isLive ? \"default\" : \"secondary\"} className=\"bg-green-100 text-green-800\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                {isLive ? \"Live\" : \"Paused\"}\n              </Badge>\n              <Button variant=\"outline\" size=\"sm\" onClick={refreshLeaderboard}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Participants</p>\n                  <p className=\"text-2xl font-bold\">{leaderboard.filter((p) => p.status === \"active\").length}</p>\n                </div>\n                <User className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Participants</p>\n                  <p className=\"text-2xl font-bold\">{leaderboard.length}</p>\n                </div>\n                <Trophy className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Time Remaining</p>\n                  <p className=\"text-2xl font-bold\">1h 23m</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Last Updated</p>\n                  <p className=\"text-sm font-bold\">{lastUpdated.toLocaleTimeString()}</p>\n                </div>\n                <RefreshCw className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"h-5 w-5\" />\n              Current Rankings\n            </CardTitle>\n            <CardDescription>Live updates every 30 seconds</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Rank</TableHead>\n                  <TableHead>Participant</TableHead>\n                  <TableHead>Score</TableHead>\n                  <TableHead>Problems Solved</TableHead>\n                  <TableHead>Last Submission</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {leaderboard.map((participant) => (\n                  <TableRow key={participant.name} className={participant.status === \"active\" ? \"bg-green-50\" : \"\"}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {participant.rank === 1 && <Trophy className=\"h-4 w-4 text-yellow-500\" />}\n                        {participant.rank === 2 && <Medal className=\"h-4 w-4 text-gray-400\" />}\n                        {participant.rank === 3 && <Award className=\"h-4 w-4 text-amber-600\" />}#{participant.rank}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{participant.name}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"secondary\">{participant.score} pts</Badge>\n                    </TableCell>\n                    <TableCell>{participant.solved}/3</TableCell>\n                    <TableCell className=\"text-muted-foreground\">{participant.lastSubmission}</TableCell>\n                    <TableCell>\n                      <Badge variant={participant.status === \"active\" ? \"default\" : \"secondary\"}>\n                        {participant.status === \"active\" ? \"Active\" : \"Idle\"}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-8 flex gap-4\">\n          <Link href={`/contest/${params.id}`}>\n            <Button variant=\"outline\">Back to Contest</Button>\n          </Link>\n          <Link href={`/contest/${params.id}/results`}>\n            <Button>View Final Results</Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":7823},"app/contest/[id]/results/page.tsx":{"content":"\"use client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Trophy, Medal, Award, Clock, CheckCircle, User, Code } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function ContestResultsPage({ params }: { params: { id: string } }) {\n  const contestResults = {\n    title: \"Weekly Programming Challenge #1\",\n    status: \"completed\",\n    participants: 45,\n    duration: \"2 hours\",\n    problems: [\n      { id: 1, title: \"Two Sum\", difficulty: \"Easy\", solved: 38, attempts: 45 },\n      { id: 2, title: \"Binary Tree Traversal\", difficulty: \"Medium\", solved: 22, attempts: 41 },\n      { id: 3, title: \"Dynamic Programming\", difficulty: \"Hard\", solved: 8, attempts: 28 },\n    ],\n    leaderboard: [\n      { rank: 1, name: \"Alice Johnson\", score: 300, solved: 3, time: \"1h 23m\", accuracy: \"95%\" },\n      { rank: 2, name: \"Bob Smith\", score: 280, solved: 3, time: \"1h 45m\", accuracy: \"88%\" },\n      { rank: 3, name: \"Carol Davis\", score: 250, solved: 2, time: \"1h 12m\", accuracy: \"92%\" },\n      { rank: 4, name: \"David Wilson\", score: 220, solved: 2, time: \"1h 35m\", accuracy: \"85%\" },\n      { rank: 5, name: \"Eve Brown\", score: 200, solved: 2, time: \"1h 48m\", accuracy: \"78%\" },\n    ],\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">{contestResults.title}</h1>\n              <p className=\"text-muted-foreground\">Contest Results & Analytics</p>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n              <CheckCircle className=\"h-4 w-4 mr-1\" />\n              Completed\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Participants</p>\n                  <p className=\"text-2xl font-bold\">{contestResults.participants}</p>\n                </div>\n                <User className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Duration</p>\n                  <p className=\"text-2xl font-bold\">{contestResults.duration}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Problems</p>\n                  <p className=\"text-2xl font-bold\">{contestResults.problems.length}</p>\n                </div>\n                <Code className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Score</p>\n                  <p className=\"text-2xl font-bold\">245</p>\n                </div>\n                <Trophy className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"leaderboard\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"leaderboard\">Final Leaderboard</TabsTrigger>\n            <TabsTrigger value=\"problems\">Problem Statistics</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"leaderboard\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"h-5 w-5\" />\n                  Final Rankings\n                </CardTitle>\n                <CardDescription>Top performers in this contest</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Rank</TableHead>\n                      <TableHead>Participant</TableHead>\n                      <TableHead>Score</TableHead>\n                      <TableHead>Problems Solved</TableHead>\n                      <TableHead>Total Time</TableHead>\n                      <TableHead>Accuracy</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {contestResults.leaderboard.map((participant) => (\n                      <TableRow key={participant.rank}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            {participant.rank === 1 && <Trophy className=\"h-4 w-4 text-yellow-500\" />}\n                            {participant.rank === 2 && <Medal className=\"h-4 w-4 text-gray-400\" />}\n                            {participant.rank === 3 && <Award className=\"h-4 w-4 text-amber-600\" />}#{participant.rank}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-medium\">{participant.name}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">{participant.score} pts</Badge>\n                        </TableCell>\n                        <TableCell>{participant.solved}/3</TableCell>\n                        <TableCell>{participant.time}</TableCell>\n                        <TableCell>{participant.accuracy}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"problems\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Problem Statistics</CardTitle>\n                <CardDescription>Success rates and difficulty analysis</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {contestResults.problems.map((problem) => (\n                    <div key={problem.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">{problem.title}</h4>\n                        <Badge\n                          variant={\n                            problem.difficulty === \"Easy\"\n                              ? \"secondary\"\n                              : problem.difficulty === \"Medium\"\n                                ? \"default\"\n                                : \"destructive\"\n                          }\n                        >\n                          {problem.difficulty}\n                        </Badge>\n                      </div>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Solved</p>\n                          <p className=\"font-medium\">\n                            {problem.solved}/{problem.attempts}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Success Rate</p>\n                          <p className=\"font-medium\">{Math.round((problem.solved / problem.attempts) * 100)}%</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Attempts</p>\n                          <p className=\"font-medium\">{problem.attempts}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Difficulty</p>\n                          <p className=\"font-medium\">{problem.difficulty}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Submission Timeline</CardTitle>\n                  <CardDescription>When participants submitted their solutions</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    Chart visualization would go here\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Language Distribution</CardTitle>\n                  <CardDescription>Programming languages used</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Python</span>\n                      <span className=\"text-muted-foreground\">65%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Java</span>\n                      <span className=\"text-muted-foreground\">20%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>C++</span>\n                      <span className=\"text-muted-foreground\">12%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>JavaScript</span>\n                      <span className=\"text-muted-foreground\">3%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"mt-8 flex gap-4\">\n          <Link href={`/contest/${params.id}`}>\n            <Button variant=\"outline\">Back to Contest</Button>\n          </Link>\n          <Link href={`/contest/${params.id}/leaderboard`}>\n            <Button>View Live Leaderboard</Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":11180},"app/contests/[id]/live/page.tsx":{"content":"\"use client\"\n\nimport { RealTimeLeaderboard } from \"@/components/real-time-leaderboard\"\nimport { LiveSubmissionFeed } from \"@/components/live-submission-feed\"\nimport { ContestTimer } from \"@/components/contest-timer\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Users, Code, Trophy, Activity } from \"lucide-react\"\n\nexport default function ContestLivePage({ params }: { params: { id: string } }) {\n  const contestId = params.id\n\n  // Mock contest data\n  const contestData = {\n    title: \"Weekly Programming Challenge #42\",\n    participants: 156,\n    totalSubmissions: 1247,\n    startTime: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // Started 2 hours ago\n    endTime: new Date(Date.now() + 1 * 60 * 60 * 1000).toISOString(), // Ends in 1 hour\n    problems: 8,\n  }\n\n  return (\n    <div className=\"container mx-auto py-6\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h1 className=\"text-3xl font-bold\">{contestData.title}</h1>\n          <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-200\">\n            <Activity className=\"h-3 w-3 mr-1\" />\n            Live\n          </Badge>\n        </div>\n        <p className=\"text-muted-foreground\">Real-time contest monitoring and live updates</p>\n      </div>\n\n      {/* Contest Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Participants</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contestData.participants}</div>\n            <p className=\"text-xs text-muted-foreground\">Currently active</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Submissions</CardTitle>\n            <Code className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contestData.totalSubmissions}</div>\n            <p className=\"text-xs text-muted-foreground\">Total attempts</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Problems</CardTitle>\n            <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contestData.problems}</div>\n            <p className=\"text-xs text-muted-foreground\">Available challenges</p>\n          </CardContent>\n        </Card>\n\n        <ContestTimer startTime={contestData.startTime} endTime={contestData.endTime} />\n      </div>\n\n      {/* Live Data Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <RealTimeLeaderboard contestId={contestId} />\n        <LiveSubmissionFeed contestId={contestId} />\n      </div>\n    </div>\n  )\n}\n","size_bytes":3316},"app/problems/[id]/solve/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { CodeEditor } from \"@/components/code-editor\"\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from \"@/components/ui/resizable\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { \n  Code2, \n  Play, \n  Send, \n  ArrowLeft, \n  Clock, \n  MemoryStick, \n  CheckCircle, \n  XCircle, \n  Eye,\n  BookOpen,\n  Target\n} from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { useToast } from \"@/hooks/use-toast\"\n\n// Mock problem data\nconst mockProblem = {\n  id: 1,\n  title: \"Two Sum\",\n  difficulty: \"Easy\",\n  category: \"Array\",\n  description: `Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.`,\n  examples: [\n    {\n      input: \"nums = [2,7,11,15], target = 9\",\n      output: \"[0,1]\",\n      explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\",\n    },\n    {\n      input: \"nums = [3,2,4], target = 6\",\n      output: \"[1,2]\",\n      explanation: \"Because nums[1] + nums[2] == 6, we return [1, 2].\",\n    },\n  ],\n  testCases: [\n    {\n      id: 1,\n      input: \"[2,7,11,15]\\n9\",\n      expectedOutput: \"[0,1]\",\n      status: \"pending\" as const,\n      actualOutput: \"\",\n      executionTime: \"\",\n      memory: \"\",\n    },\n    {\n      id: 2,\n      input: \"[3,2,4]\\n6\",\n      expectedOutput: \"[1,2]\",\n      status: \"pending\" as const,\n      actualOutput: \"\",\n      executionTime: \"\",\n      memory: \"\",\n    },\n  ],\n  timeLimit: 2000,\n  memoryLimit: 128\n}\n\nconst defaultCode = {\n  python: `def twoSum(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    # Your solution here\n    pass`,\n  javascript: `/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    // Your solution here\n};`,\n  java: `class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your solution here\n        return new int[0];\n    }\n}`,\n  cpp: `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your solution here\n        return {};\n    }\n};`,\n}\n\nexport default function ProblemSolvePage() {\n  const params = useParams()\n  const router = useRouter()\n  const { toast } = useToast()\n  const [language, setLanguage] = useState(\"python\")\n  const [code, setCode] = useState(defaultCode.python)\n  const [isRunning, setIsRunning] = useState(false)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [testResults, setTestResults] = useState(mockProblem.testCases)\n  const [customInput, setCustomInput] = useState(\"\")\n  const [customOutput, setCustomOutput] = useState(\"\")\n\n  useEffect(() => {\n    setCode(defaultCode[language as keyof typeof defaultCode])\n  }, [language])\n\n  const handleRunCode = async () => {\n    setIsRunning(true)\n    try {\n      // Simulate code execution\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n\n      // Simulate test results\n      const results = mockProblem.testCases.map((testCase) => ({\n        ...testCase,\n        status: Math.random() > 0.3 ? \"passed\" : (\"failed\" as const),\n        actualOutput: Math.random() > 0.3 ? testCase.expectedOutput : \"incorrect output\",\n        executionTime: `${Math.floor(Math.random() * 5) + 1}ms`,\n        memory: `${(Math.random() * 10 + 40).toFixed(1)} MB`,\n      }))\n\n      setTestResults(results)\n      toast({\n        title: \"Code executed successfully\",\n        description: `${results.filter((r) => r.status === \"passed\").length}/${results.length} test cases passed`,\n      })\n    } catch (error) {\n      toast({\n        title: \"Execution failed\",\n        description: \"There was an error running your code.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsRunning(false)\n    }\n  }\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true)\n    try {\n      // Simulate submission\n      await new Promise((resolve) => setTimeout(resolve, 3000))\n\n      toast({\n        title: \"Solution submitted!\",\n        description: \"Your solution has been submitted for evaluation.\",\n      })\n    } catch (error) {\n      toast({\n        title: \"Submission failed\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleRunCustomInput = () => {\n    if (!customInput.trim()) {\n      toast({\n        title: \"Input required\",\n        description: \"Please provide input to test your code.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setCustomOutput(\"Processing...\")\n    \n    // Simulate custom input execution\n    setTimeout(() => {\n      setCustomOutput(`Output for input: ${customInput}\\n[0,1]`)\n      toast({\n        title: \"Custom test completed\",\n        description: \"Your code has been tested with custom input.\",\n      })\n    }, 1500)\n  }\n\n  const handleViewProblem = () => {\n    router.push(`/problems/${params.id}/view`)\n  }\n\n  const handleBackToProblems = () => {\n    router.push('/problems')\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"text-green-400 border-green-400\"\n      case \"Medium\":\n        return \"text-yellow-400 border-yellow-400\"\n      case \"Hard\":\n        return \"text-red-400 border-red-400\"\n      default:\n        return \"text-muted-foreground border-muted-foreground\"\n    }\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"student\">\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => {}} />\n\n        <div className=\"flex h-[calc(100vh-4rem)]\">\n          <ResizablePanelGroup direction=\"horizontal\">\n            {/* Problem Statement Panel */}\n            <ResizablePanel defaultSize={40} minSize={30}>\n              <div className=\"h-full border-r border-border\">\n                <div className=\"p-4 border-b border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Button variant=\"ghost\" size=\"icon\" onClick={handleBackToProblems}>\n                        <ArrowLeft className=\"h-4 w-4\" />\n                      </Button>\n                      <div>\n                        <div className=\"flex items-center gap-2\">\n                          <h2 className=\"font-semibold\">{mockProblem.title}</h2>\n                          <Badge variant=\"outline\" className={cn(\"text-xs\", getDifficultyColor(mockProblem.difficulty))}>\n                            {mockProblem.difficulty}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-3 mt-1 text-xs text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            {mockProblem.timeLimit}ms\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <MemoryStick className=\"h-3 w-3\" />\n                            {mockProblem.memoryLimit}MB\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleViewProblem}>\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      View\n                    </Button>\n                  </div>\n                </div>\n\n                <ScrollArea className=\"h-[calc(100%-5rem)]\">\n                  <div className=\"p-4 space-y-6\">\n                    {/* Problem Description */}\n                    <div>\n                      <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n                        <BookOpen className=\"h-4 w-4\" />\n                        Problem\n                      </h3>\n                      <div className=\"prose prose-sm prose-neutral dark:prose-invert max-w-none\">\n                        <p className=\"whitespace-pre-line text-sm\">{mockProblem.description}</p>\n                      </div>\n                    </div>\n\n                    {/* Examples */}\n                    <div>\n                      <h3 className=\"font-medium mb-3\">Examples</h3>\n                      <div className=\"space-y-4\">\n                        {mockProblem.examples.map((example, index) => (\n                          <div key={index} className=\"space-y-2\">\n                            <div className=\"text-sm font-medium\">Example {index + 1}:</div>\n                            <div className=\"space-y-2\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground mb-1\">Input:</div>\n                                <div className=\"bg-muted p-2 rounded text-xs font-mono\">{example.input}</div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground mb-1\">Output:</div>\n                                <div className=\"bg-muted p-2 rounded text-xs font-mono\">{example.output}</div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground mb-1\">Explanation:</div>\n                                <div className=\"text-xs\">{example.explanation}</div>\n                              </div>\n                            </div>\n                            {index < mockProblem.examples.length - 1 && <Separator />}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </ScrollArea>\n              </div>\n            </ResizablePanel>\n\n            <ResizableHandle />\n\n            {/* Code Editor Panel */}\n            <ResizablePanel defaultSize={60} minSize={40}>\n              <div className=\"h-full flex flex-col\">\n                {/* Editor Header */}\n                <div className=\"p-4 border-b border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Select value={language} onValueChange={setLanguage}>\n                        <SelectTrigger className=\"w-40\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"python\">Python</SelectItem>\n                          <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                          <SelectItem value=\"java\">Java</SelectItem>\n                          <SelectItem value=\"cpp\">C++</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button variant=\"outline\" onClick={handleRunCode} disabled={isRunning}>\n                        <Play className=\"h-4 w-4 mr-2\" />\n                        {isRunning ? \"Running...\" : \"Run\"}\n                      </Button>\n                      <Button onClick={handleSubmit} disabled={isSubmitting}>\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        {isSubmitting ? \"Submitting...\" : \"Submit\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Editor Content */}\n                <div className=\"flex-1 flex flex-col\">\n                  <ResizablePanelGroup direction=\"vertical\">\n                    {/* Code Editor */}\n                    <ResizablePanel defaultSize={60} minSize={40}>\n                      <div className=\"h-full p-4\">\n                        <CodeEditor\n                          language={language}\n                          value={code}\n                          onChange={setCode}\n                          className=\"h-full\"\n                        />\n                      </div>\n                    </ResizablePanel>\n\n                    <ResizableHandle />\n\n                    {/* Test Results Panel */}\n                    <ResizablePanel defaultSize={40} minSize={25}>\n                      <div className=\"h-full border-t border-border\">\n                        <Tabs defaultValue=\"testcases\" className=\"h-full flex flex-col\">\n                          <TabsList className=\"m-4 mb-0\">\n                            <TabsTrigger value=\"testcases\">Test Cases</TabsTrigger>\n                            <TabsTrigger value=\"custom\">Custom Input</TabsTrigger>\n                          </TabsList>\n                          \n                          <TabsContent value=\"testcases\" className=\"flex-1 m-0\">\n                            <ScrollArea className=\"h-full\">\n                              <div className=\"p-4 space-y-3\">\n                                {testResults.map((testCase, index) => (\n                                  <Card key={testCase.id} className=\"p-3\">\n                                    <div className=\"flex items-center justify-between mb-2\">\n                                      <span className=\"text-sm font-medium\">Test Case {index + 1}</span>\n                                      <div className=\"flex items-center gap-2\">\n                                        {testCase.status === \"passed\" && (\n                                          <CheckCircle className=\"h-4 w-4 text-green-400\" />\n                                        )}\n                                        {testCase.status === \"failed\" && (\n                                          <XCircle className=\"h-4 w-4 text-red-400\" />\n                                        )}\n                                        <Badge\n                                          variant={testCase.status === \"passed\" ? \"default\" : \"destructive\"}\n                                          className=\"text-xs\"\n                                        >\n                                          {testCase.status}\n                                        </Badge>\n                                      </div>\n                                    </div>\n                                    <div className=\"space-y-2 text-xs\">\n                                      <div>\n                                        <div className=\"text-muted-foreground mb-1\">Input:</div>\n                                        <div className=\"bg-muted p-2 rounded font-mono\">{testCase.input}</div>\n                                      </div>\n                                      <div>\n                                        <div className=\"text-muted-foreground mb-1\">Expected:</div>\n                                        <div className=\"bg-muted p-2 rounded font-mono\">{testCase.expectedOutput}</div>\n                                      </div>\n                                      {testCase.actualOutput && (\n                                        <div>\n                                          <div className=\"text-muted-foreground mb-1\">Your Output:</div>\n                                          <div className=\"bg-muted p-2 rounded font-mono\">{testCase.actualOutput}</div>\n                                        </div>\n                                      )}\n                                      {testCase.executionTime && (\n                                        <div className=\"flex gap-4 text-muted-foreground\">\n                                          <span>Runtime: {testCase.executionTime}</span>\n                                          <span>Memory: {testCase.memory}</span>\n                                        </div>\n                                      )}\n                                    </div>\n                                  </Card>\n                                ))}\n                              </div>\n                            </ScrollArea>\n                          </TabsContent>\n\n                          <TabsContent value=\"custom\" className=\"flex-1 m-0\">\n                            <div className=\"p-4 h-full flex flex-col space-y-4\">\n                              <div>\n                                <label className=\"text-sm font-medium mb-2 block\">Custom Input:</label>\n                                <textarea\n                                  value={customInput}\n                                  onChange={(e) => setCustomInput(e.target.value)}\n                                  className=\"w-full h-20 p-2 border border-border rounded bg-muted font-mono text-sm resize-none\"\n                                  placeholder=\"Enter your test input here...\"\n                                />\n                              </div>\n                              <Button onClick={handleRunCustomInput} className=\"w-fit\">\n                                <Play className=\"h-4 w-4 mr-2\" />\n                                Run Custom Test\n                              </Button>\n                              {customOutput && (\n                                <div>\n                                  <label className=\"text-sm font-medium mb-2 block\">Output:</label>\n                                  <div className=\"w-full p-2 border border-border rounded bg-muted font-mono text-sm whitespace-pre-wrap\">\n                                    {customOutput}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </TabsContent>\n                        </Tabs>\n                      </div>\n                    </ResizablePanel>\n                  </ResizablePanelGroup>\n                </div>\n              </div>\n            </ResizablePanel>\n          </ResizablePanelGroup>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}","size_bytes":18578},"app/problems/[id]/view/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Code2, Clock, MemoryStick, ArrowLeft, Play, BookOpen, Target } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\n// Mock problem data - in real app, this would come from API\nconst mockProblem = {\n  id: 1,\n  title: \"Two Sum\",\n  difficulty: \"Easy\",\n  category: \"Array\",\n  description: `Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.`,\n  examples: [\n    {\n      input: \"nums = [2,7,11,15], target = 9\",\n      output: \"[0,1]\",\n      explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\",\n    },\n    {\n      input: \"nums = [3,2,4], target = 6\",\n      output: \"[1,2]\",\n      explanation: \"Because nums[1] + nums[2] == 6, we return [1, 2].\",\n    },\n  ],\n  constraints: [\n    \"2 ≤ nums.length ≤ 10⁴\",\n    \"-10⁹ ≤ nums[i] ≤ 10⁹\",\n    \"-10⁹ ≤ target ≤ 10⁹\",\n    \"Only one valid answer exists.\",\n  ],\n  hints: [\n    \"A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.\",\n    \"So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?\",\n    \"The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?\"\n  ],\n  editorial: `The Two Sum problem is a classic algorithmic challenge that demonstrates the power of hash tables.\n\n**Approach 1: Brute Force**\nThe brute force approach is to try every possible pair of numbers. For each element, check if there exists another element that adds up to the target.\n\nTime Complexity: O(n²)\nSpace Complexity: O(1)\n\n**Approach 2: Hash Table (Optimal)**\nWe can solve this in one pass using a hash table. For each element, we check if the complement (target - current element) exists in the hash table.\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\nThis optimization reduces the lookup time from O(n) to O(1) by trading space for time.`,\n  submissions: {\n    total: 2847,\n    accepted: 1923,\n    acceptanceRate: 67.5\n  },\n  timeLimit: 2000, // ms\n  memoryLimit: 128 // MB\n}\n\nexport default function ProblemViewPage() {\n  const params = useParams()\n  const router = useRouter()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  \n  const handleSolveProblem = () => {\n    router.push(`/problems/${params.id}/solve`)\n  }\n\n  const handleBackToProblems = () => {\n    router.push('/problems')\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"text-green-400 border-green-400\"\n      case \"Medium\":\n        return \"text-yellow-400 border-yellow-400\"\n      case \"Hard\":\n        return \"text-red-400 border-red-400\"\n      default:\n        return \"text-muted-foreground border-muted-foreground\"\n    }\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"student\">\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6\">\n            <div className=\"max-w-4xl mx-auto space-y-6\">\n              {/* Header */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <Button variant=\"ghost\" size=\"icon\" onClick={handleBackToProblems}>\n                    <ArrowLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <div>\n                    <div className=\"flex items-center gap-3\">\n                      <h1 className=\"text-2xl font-bold\">{mockProblem.title}</h1>\n                      <Badge variant=\"outline\" className={cn(\"text-xs\", getDifficultyColor(mockProblem.difficulty))}>\n                        {mockProblem.difficulty}\n                      </Badge>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {mockProblem.category}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Target className=\"h-3 w-3\" />\n                        {mockProblem.submissions.acceptanceRate}% acceptance rate\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        {mockProblem.timeLimit}ms time limit\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <MemoryStick className=\"h-3 w-3\" />\n                        {mockProblem.memoryLimit}MB memory limit\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Button onClick={handleSolveProblem}>\n                  <Code2 className=\"h-4 w-4 mr-2\" />\n                  Start Solving\n                </Button>\n              </div>\n\n              {/* Problem Content */}\n              <Tabs defaultValue=\"problem\" className=\"space-y-4\">\n                <TabsList>\n                  <TabsTrigger value=\"problem\">Problem</TabsTrigger>\n                  <TabsTrigger value=\"editorial\">Editorial</TabsTrigger>\n                  <TabsTrigger value=\"submissions\">My Submissions</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"problem\" className=\"space-y-6\">\n                  {/* Problem Description */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <BookOpen className=\"h-5 w-5\" />\n                        Problem Description\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"prose prose-neutral dark:prose-invert max-w-none\">\n                        <p className=\"whitespace-pre-line\">{mockProblem.description}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Examples */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Examples</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {mockProblem.examples.map((example, index) => (\n                        <div key={index}>\n                          <h4 className=\"font-medium mb-3\">Example {index + 1}:</h4>\n                          <div className=\"grid gap-3\">\n                            <div>\n                              <div className=\"text-sm font-medium text-muted-foreground mb-1\">Input:</div>\n                              <div className=\"bg-muted p-3 rounded-md font-mono text-sm\">{example.input}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-muted-foreground mb-1\">Output:</div>\n                              <div className=\"bg-muted p-3 rounded-md font-mono text-sm\">{example.output}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-muted-foreground mb-1\">Explanation:</div>\n                              <div className=\"text-sm\">{example.explanation}</div>\n                            </div>\n                          </div>\n                          {index < mockProblem.examples.length - 1 && <Separator className=\"mt-6\" />}\n                        </div>\n                      ))}\n                    </CardContent>\n                  </Card>\n\n                  {/* Constraints */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Constraints</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {mockProblem.constraints.map((constraint, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <span className=\"text-primary mt-1.5\">•</span>\n                            <code className=\"text-sm\">{constraint}</code>\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n\n                  {/* Hints */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Hints</CardTitle>\n                      <CardDescription>Click to reveal hints when you need them</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {mockProblem.hints.map((hint, index) => (\n                        <details key={index} className=\"group\">\n                          <summary className=\"cursor-pointer hover:text-primary transition-colors\">\n                            <span className=\"font-medium\">Hint {index + 1}</span>\n                          </summary>\n                          <div className=\"mt-2 text-sm text-muted-foreground pl-4 border-l-2 border-muted\">\n                            {hint}\n                          </div>\n                        </details>\n                      ))}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"editorial\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Editorial Solution</CardTitle>\n                      <CardDescription>Learn the optimal approach to solve this problem</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"prose prose-neutral dark:prose-invert max-w-none\">\n                        <div className=\"whitespace-pre-line\">{mockProblem.editorial}</div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"submissions\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>My Submissions</CardTitle>\n                      <CardDescription>View your submission history for this problem</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-12 text-muted-foreground\">\n                        <Code2 className=\"h-12 w-12 mx-auto mb-4\" />\n                        <p>No submissions yet</p>\n                        <p className=\"text-sm\">Start solving to see your submissions here</p>\n                        <Button className=\"mt-4\" onClick={handleSolveProblem}>\n                          <Play className=\"h-4 w-4 mr-2\" />\n                          Start Solving\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}","size_bytes":12309},"app/teacher/contests/create/page.tsx":{"content":"\"use client\"\nimport { useState } from \"react\"\nimport type React from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Clock, Users, Trophy, Plus, X } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport default function CreateContestPage() {\n  const router = useRouter()\n  const { toast } = useToast()\n  const [problems, setProblems] = useState([{ title: \"\", description: \"\", difficulty: \"easy\", points: 100 }])\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    toast({\n      title: \"Contest Created\",\n      description: \"Your contest has been successfully created and scheduled.\",\n    })\n    router.push(\"/teacher/contests\")\n  }\n\n  const addProblem = () => {\n    setProblems([...problems, { title: \"\", description: \"\", difficulty: \"easy\", points: 100 }])\n  }\n\n  const removeProblem = (index: number) => {\n    setProblems(problems.filter((_, i) => i !== index))\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Create New Contest</h1>\n          <p className=\"text-muted-foreground\">Set up a new coding contest for your students</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5\" />\n                Contest Details\n              </CardTitle>\n              <CardDescription>Basic information about your contest</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Contest Title</Label>\n                  <Input id=\"title\" placeholder=\"Weekly Programming Challenge #1\" required />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"duration\">Duration (minutes)</Label>\n                  <Input id=\"duration\" type=\"number\" placeholder=\"120\" required />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea id=\"description\" placeholder=\"Contest description and rules...\" rows={3} />\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"start-date\">Start Date & Time</Label>\n                  <Input id=\"start-date\" type=\"datetime-local\" required />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"max-participants\">Max Participants</Label>\n                  <Input id=\"max-participants\" type=\"number\" placeholder=\"50\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Contest Settings\n              </CardTitle>\n              <CardDescription>Configure contest behavior and rules</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Public Contest</Label>\n                  <p className=\"text-sm text-muted-foreground\">Allow anyone to participate</p>\n                </div>\n                <Switch />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Enable Plagiarism Detection</Label>\n                  <p className=\"text-sm text-muted-foreground\">Automatically scan submissions</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Show Leaderboard</Label>\n                  <p className=\"text-sm text-muted-foreground\">Display real-time rankings</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Problems\n              </CardTitle>\n              <CardDescription>Add problems to your contest</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {problems.map((problem, index) => (\n                <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium\">Problem {index + 1}</h4>\n                    {problems.length > 1 && (\n                      <Button type=\"button\" variant=\"ghost\" size=\"sm\" onClick={() => removeProblem(index)}>\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Problem Title</Label>\n                      <Input placeholder=\"Two Sum\" required />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Points</Label>\n                      <Input type=\"number\" placeholder=\"100\" required />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Problem Description</Label>\n                    <Textarea placeholder=\"Problem statement...\" rows={3} required />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Difficulty</Label>\n                    <Select defaultValue=\"easy\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"easy\">Easy</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"hard\">Hard</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              ))}\n              <Button type=\"button\" variant=\"outline\" onClick={addProblem} className=\"w-full bg-transparent\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Problem\n              </Button>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex gap-4\">\n            <Button type=\"submit\" className=\"flex-1\">\n              Create Contest\n            </Button>\n            <Button type=\"button\" variant=\"outline\" onClick={() => router.back()}>\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n","size_bytes":7733},"app/contests/[id]/problems/[problemId]/view/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { DashboardHeader } from \"@/components/dashboard-header\"\nimport { DashboardSidebar } from \"@/components/dashboard-sidebar\"\nimport { ProtectedRoute } from \"@/components/protected-route\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Code2, Clock, MemoryStick, ArrowLeft, Play, BookOpen, Target, Timer } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\n// Mock contest and problem data\nconst mockContest = {\n  id: 1,\n  title: \"Weekly Challenge #42\",\n  timeLeft: \"2h 34m\",\n  status: \"active\" as const,\n}\n\nconst mockProblem = {\n  id: 1,\n  title: \"Dynamic Array Manipulation\",\n  difficulty: \"Easy\",\n  category: \"Array\",\n  points: 100,\n  description: `Given an array of integers, implement a dynamic array that supports the following operations:\n\n1. Insert an element at a specific index\n2. Delete an element at a specific index  \n3. Find the maximum element in the array\n4. Sort the array in ascending order\n\nReturn the final state of the array after all operations.`,\n  examples: [\n    {\n      input: \"operations = [['insert', 0, 5], ['insert', 1, 3], ['insert', 2, 8], ['max'], ['sort']]\",\n      output: \"[3, 5, 8]\",\n      explanation: \"After inserting 5, 3, 8 at indices 0, 1, 2 respectively, max returns 8, then sort arranges in ascending order.\",\n    },\n    {\n      input: \"operations = [['insert', 0, 1], ['insert', 1, 4], ['delete', 0], ['insert', 0, 7]]\",\n      output: \"[7, 4]\",\n      explanation: \"Insert 1, insert 4, delete element at index 0 (removes 1), insert 7 at index 0.\",\n    },\n  ],\n  constraints: [\n    \"1 ≤ operations.length ≤ 10⁴\",\n    \"Each operation is valid\",\n    \"-10⁹ ≤ element values ≤ 10⁹\",\n  ],\n  hints: [\n    \"Think about how to efficiently handle insertions and deletions.\",\n    \"Consider using a list or vector data structure.\",\n    \"Remember that indices shift when elements are inserted or deleted.\"\n  ],\n  timeLimit: 2000,\n  memoryLimit: 128\n}\n\nexport default function ContestProblemViewPage() {\n  const params = useParams()\n  const router = useRouter()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  \n  const handleSolveProblem = () => {\n    router.push(`/contests/${params.id}/problems/${params.problemId}/solve`)\n  }\n\n  const handleBackToContest = () => {\n    router.push(`/contests/${params.id}`)\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"text-green-400 border-green-400\"\n      case \"Medium\":\n        return \"text-yellow-400 border-yellow-400\"\n      case \"Hard\":\n        return \"text-red-400 border-red-400\"\n      default:\n        return \"text-muted-foreground border-muted-foreground\"\n    }\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"student\">\n      <div className=\"min-h-screen bg-background\">\n        <DashboardHeader onMenuToggle={() => setSidebarOpen(!sidebarOpen)} />\n\n        <div className=\"flex\">\n          <DashboardSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n          <main className=\"flex-1 p-6\">\n            <div className=\"max-w-4xl mx-auto space-y-6\">\n              {/* Contest Header */}\n              <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium text-primary\">{mockContest.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">Contest Mode - Problem View</p>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-primary\">\n                    <Timer className=\"h-4 w-4\" />\n                    <span className=\"font-mono font-medium\">{mockContest.timeLeft}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Header */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <Button variant=\"ghost\" size=\"icon\" onClick={handleBackToContest}>\n                    <ArrowLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <div>\n                    <div className=\"flex items-center gap-3\">\n                      <h1 className=\"text-2xl font-bold\">{mockProblem.title}</h1>\n                      <Badge variant=\"outline\" className={cn(\"text-xs\", getDifficultyColor(mockProblem.difficulty))}>\n                        {mockProblem.difficulty}\n                      </Badge>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {mockProblem.category}\n                      </Badge>\n                      <Badge variant=\"default\" className=\"text-xs bg-primary\">\n                        {mockProblem.points} points\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        {mockProblem.timeLimit}ms time limit\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <MemoryStick className=\"h-3 w-3\" />\n                        {mockProblem.memoryLimit}MB memory limit\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Button onClick={handleSolveProblem}>\n                  <Code2 className=\"h-4 w-4 mr-2\" />\n                  Start Solving\n                </Button>\n              </div>\n\n              {/* Problem Content */}\n              <Tabs defaultValue=\"problem\" className=\"space-y-4\">\n                <TabsList>\n                  <TabsTrigger value=\"problem\">Problem</TabsTrigger>\n                  <TabsTrigger value=\"submissions\">My Submissions</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"problem\" className=\"space-y-6\">\n                  {/* Problem Description */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <BookOpen className=\"h-5 w-5\" />\n                        Problem Description\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"prose prose-neutral dark:prose-invert max-w-none\">\n                        <p className=\"whitespace-pre-line\">{mockProblem.description}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Examples */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Examples</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {mockProblem.examples.map((example, index) => (\n                        <div key={index}>\n                          <h4 className=\"font-medium mb-3\">Example {index + 1}:</h4>\n                          <div className=\"grid gap-3\">\n                            <div>\n                              <div className=\"text-sm font-medium text-muted-foreground mb-1\">Input:</div>\n                              <div className=\"bg-muted p-3 rounded-md font-mono text-sm\">{example.input}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-muted-foreground mb-1\">Output:</div>\n                              <div className=\"bg-muted p-3 rounded-md font-mono text-sm\">{example.output}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-muted-foreground mb-1\">Explanation:</div>\n                              <div className=\"text-sm\">{example.explanation}</div>\n                            </div>\n                          </div>\n                          {index < mockProblem.examples.length - 1 && <Separator className=\"mt-6\" />}\n                        </div>\n                      ))}\n                    </CardContent>\n                  </Card>\n\n                  {/* Constraints */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Constraints</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {mockProblem.constraints.map((constraint, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <span className=\"text-primary mt-1.5\">•</span>\n                            <code className=\"text-sm\">{constraint}</code>\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n\n                  {/* Hints - Contest Mode Limited */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Hints</CardTitle>\n                      <CardDescription>Contest mode - hints available after 30 minutes</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-4 text-muted-foreground\">\n                        <Target className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                        <p className=\"text-sm\">Hints will be available after 30 minutes into the contest</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"submissions\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>My Submissions</CardTitle>\n                      <CardDescription>View your submission history for this contest problem</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-12 text-muted-foreground\">\n                        <Code2 className=\"h-12 w-12 mx-auto mb-4\" />\n                        <p>No submissions yet</p>\n                        <p className=\"text-sm\">Start solving to see your submissions here</p>\n                        <Button className=\"mt-4\" onClick={handleSolveProblem}>\n                          <Play className=\"h-4 w-4 mr-2\" />\n                          Start Solving\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </main>\n        </div>\n      </div>\n    </ProtectedRoute>\n  )\n}","size_bytes":11126}},"version":1}